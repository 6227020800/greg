{"version":3,"sources":["assets/js/jsQR.js"],"names":["root","factory","exports","module","define","amd","self","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","value","BitMatrix","data","width","height","length","createEmpty","Uint8ClampedArray","x","y","set","v","setRegion","left","top","GenericGFPoly_1","addOrSubtractGF","a","b","GenericGF","primitive","size","genBase","generatorBase","expTable","Array","logTable","zero","default","from","one","multiply","inverse","Error","buildMonomial","degree","coefficient","coefficients","log","exp","GenericGF_1","GenericGFPoly","field","coefficientsLength","firstNonZero","isZero","getCoefficient","addOrSubtract","other","_a","smallerCoefficients","largerCoefficients","sumDiff","lengthDiff","scalar","product","multiplyPoly","aCoefficients","aLength","bCoefficients","bLength","aCoeff","j","multiplyByMonomial","evaluateAt","result","forEach","binarizer_1","decoder_1","extractor_1","locator_1","scan","matrix","locations","locate","_i","locations_1","location_1","extracted","extract","decoded","decode","binaryData","bytes","text","chunks","location","topRightCorner","mappingFunction","dimension","topLeftCorner","bottomRightCorner","bottomLeftCorner","topRightFinderPattern","topRight","topLeftFinderPattern","topLeft","bottomLeftFinderPattern","bottomLeft","bottomRightAlignmentPattern","alignmentPattern","defaultOptions","inversionAttempts","jsQR","providedOptions","options","keys","opt","shouldInvert","tryInvertedFirst","binarize","binarized","inverted","BitMatrix_1","REGION_SIZE","MIN_DYNAMIC_RANGE","numBetween","min","max","Matrix","returnInverted","greyscalePixels","r","g","horizontalRegionCount","Math","ceil","verticalRegionCount","blackPoints","verticalRegion","hortizontalRegion","sum","Infinity","pixelLumosity","average","pow","averageNeighborBlackPoint","top_1","xRegion","yRegion","threshold","lum","decodeData_1","reedsolomon_1","version_1","numBitsDiffering","z","bitCount","pushBit","bit","byte","FORMAT_INFO_TABLE","bits","formatInfo","errorCorrectionLevel","dataMask","DATA_MASKS","floor","readCodewords","version","functionPatternMask","buildFunctionPatternMask","versionNumber","alignmentPatternCenters","_b","_c","codewords","currentByte","bitsRead","readingUp","columnIndex","columnOffset","push","decodeMatrix","readVersion","provisionalVersion","VERSIONS","topRightVersionBits","bottomLeftVersionBits","bestDifference","bestVersion","VERSIONS_1","infoBits","difference","readFormatInformation","topLeftFormatInfoBits","topRightBottomRightFormatInfoBits","bestFormatInfo","FORMAT_INFO_TABLE_1","dataBlocks","getDataBlocks","ecLevel","ecInfo","errorCorrectionLevels","totalCodewords","ecBlocks","block","numBlocks","numDataCodewords","dataCodewordsPerBlock","ecCodewordsPerBlock","slice","shortBlockSize","dataBlocks_1","shift","smallBlockCount","largeBlockCount","dataBlocks_2","totalBytes","reduce","resultBytes","resultIndex","dataBlocks_3","dataBlock","correctedBytes","BitStream_1","Mode","ModeByte","shiftJISTable_1","decodeNumeric","stream","characterCountSize","readBits","num","toString","AlphanumericCharacterCodes","decodeAlphanumeric","charCodeAt","decodeByte","decodeURIComponent","map","substr","join","decodeKanji","k","String","fromCharCode","shiftJISTable","_d","BitStream","available","mode","Terminator","ECI","type","assignmentNumber","Numeric","numericResult","apply","Alphanumeric","alphanumericResult","Byte","byteResult","Kanji","kanjiResult","byteOffset","bitOffset","numBits","bitsLeft","toRead","mask","bitsToNotRead","twoS","outputBytes","poly","syndromeCoefficients","error","evaluation","syndrome","sigmaOmega","runEuclideanAlgorithm","R","rLast","tLast","t","rLastLast","tLastLast","q","denominatorLeadingTerm","dltInverse","degreeDiff","scale","sigmaTildeAtZero","errorLocations","findErrorLocations","errorLocator","numErrors","errorCount","errorMagnitudes","findErrorMagnitudes","errorEvaluator","xiInverse","denominator","position","squareToQuadrilateral","p1","p2","p3","p4","dx3","dy3","a11","a12","a13","a21","a22","a23","a31","a32","a33","dx1","dx2","dy1","dy2","image","qToS","quadrilateralToSquare","sToQ","transform","xValue","sourcePixel","MAX_FINDERPATTERNS_TO_SEARCH","MIN_QUAD_RATIO","MAX_QUAD_RATIO","distance","sqrt","values","countBlackWhiteRunTowardsPoint","origin","end","switchPoints","fromX","fromY","toX","toY","steep","abs","dx","dy","xStep","yStep","currentPixel","realX","realY","distances","countBlackWhiteRun","rise","run","towardsEnd","awayFromEnd","middleValue","concat","scoreBlackWhiteRun","sequence","ratios","averageSize","ratio","scorePattern","point","horizontalRun","verticalRun","topLeftBottomRightRun","bottomLeftTopRightRun","horzError","vertError","diagDownError","diagUpError","ratioError","avgSize","recenterLocation","leftX","round","rightX","topY","bottomY","findAlignmentPattern","alignmentPatternQuads","moduleSize","computeDimension","topDimension","sideDimension","e","bottomRightFinderPattern","modulesBetweenFinderPatterns","correctionToTopLeft","expectedAlignmentPattern","alignmentPatterns","startX","endX","bottom","lengths","score","filter","sort","finderPatternQuads","activeFinderPatternQuads","activeAlignmentPatternQuads","_loop_1","length_1","lastBit","scans","_loop_2","averageFinderPatternBlocksize","validFinderPattern","averageAlignmentPatternBlocksize","validAlignmentPattern","endX_1","startX_1","line","matchingQuads","endX_2","startX_2","finderPatternGroups","finderPatterns","otherPoints","ii","points","reorderFinderPatterns","pattern1","pattern2","pattern3","oneTwoDistance","twoThreeDistance","oneThreeDistance","alignment","midTopRight","midTopLeft","midBottomLeft","centeredAlignment"],"mappings":"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","file":"jsQR.768240cf.js","sourceRoot":"../application","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === \"object\" && typeof module === \"object\")\n    module.exports = factory();\n  else if (typeof define === \"function\" && define.amd) define([], factory);\n  else if (typeof exports === \"object\") exports[\"jsQR\"] = factory();\n  else root[\"jsQR\"] = factory();\n})(typeof self !== \"undefined\" ? self : this, function () {\n  return /******/ (function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/ var installedModules = {}; // The require function\n    /******/\n    /******/ /******/ function __webpack_require__(moduleId) {\n      /******/\n      /******/ // Check if module is in cache\n      /******/ if (installedModules[moduleId]) {\n        /******/ return installedModules[moduleId].exports;\n        /******/\n      } // Create a new module (and put it into the cache)\n      /******/ /******/ var module = (installedModules[moduleId] = {\n        /******/ i: moduleId,\n        /******/ l: false,\n        /******/ exports: {},\n        /******/\n      }); // Execute the module function\n      /******/\n      /******/ /******/ modules[moduleId].call(\n        module.exports,\n        module,\n        module.exports,\n        __webpack_require__\n      ); // Flag the module as loaded\n      /******/\n      /******/ /******/ module.l = true; // Return the exports of the module\n      /******/\n      /******/ /******/ return module.exports;\n      /******/\n    } // expose the modules object (__webpack_modules__)\n    /******/\n    /******/\n    /******/ /******/ __webpack_require__.m = modules; // expose the module cache\n    /******/\n    /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports\n    /******/\n    /******/ /******/ __webpack_require__.d = function (exports, name, getter) {\n      /******/ if (!__webpack_require__.o(exports, name)) {\n        /******/ Object.defineProperty(exports, name, {\n          /******/ configurable: false,\n          /******/ enumerable: true,\n          /******/ get: getter,\n          /******/\n        });\n        /******/\n      }\n      /******/\n    }; // getDefaultExport function for compatibility with non-harmony modules\n    /******/\n    /******/ /******/ __webpack_require__.n = function (module) {\n      /******/ var getter =\n        module && module.__esModule\n          ? /******/ function getDefault() {\n              return module[\"default\"];\n            }\n          : /******/ function getModuleExports() {\n              return module;\n            };\n      /******/ __webpack_require__.d(getter, \"a\", getter);\n      /******/ return getter;\n      /******/\n    }; // Object.prototype.hasOwnProperty.call\n    /******/\n    /******/ /******/ __webpack_require__.o = function (object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n    }; // __webpack_public_path__\n    /******/\n    /******/ /******/ __webpack_require__.p = \"\"; // Load entry module and return exports\n    /******/\n    /******/ /******/ return __webpack_require__((__webpack_require__.s = 3));\n    /******/\n  })(\n    /************************************************************************/\n    /******/ [\n      /* 0 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var BitMatrix = /** @class */ (function () {\n          function BitMatrix(data, width) {\n            this.width = width;\n            this.height = data.length / width;\n            this.data = data;\n          }\n          BitMatrix.createEmpty = function (width, height) {\n            return new BitMatrix(new Uint8ClampedArray(width * height), width);\n          };\n          BitMatrix.prototype.get = function (x, y) {\n            if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n              return false;\n            }\n            return !!this.data[y * this.width + x];\n          };\n          BitMatrix.prototype.set = function (x, y, v) {\n            this.data[y * this.width + x] = v ? 1 : 0;\n          };\n          BitMatrix.prototype.setRegion = function (\n            left,\n            top,\n            width,\n            height,\n            v\n          ) {\n            for (var y = top; y < top + height; y++) {\n              for (var x = left; x < left + width; x++) {\n                this.set(x, y, !!v);\n              }\n            }\n          };\n          return BitMatrix;\n        })();\n        exports.BitMatrix = BitMatrix;\n\n        /***/\n      },\n      /* 1 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var GenericGFPoly_1 = __webpack_require__(2);\n        function addOrSubtractGF(a, b) {\n          return a ^ b; // tslint:disable-line:no-bitwise\n        }\n        exports.addOrSubtractGF = addOrSubtractGF;\n        var GenericGF = /** @class */ (function () {\n          function GenericGF(primitive, size, genBase) {\n            this.primitive = primitive;\n            this.size = size;\n            this.generatorBase = genBase;\n            this.expTable = new Array(this.size);\n            this.logTable = new Array(this.size);\n            var x = 1;\n            for (var i = 0; i < this.size; i++) {\n              this.expTable[i] = x;\n              x = x * 2;\n              if (x >= this.size) {\n                x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise\n              }\n            }\n            for (var i = 0; i < this.size - 1; i++) {\n              this.logTable[this.expTable[i]] = i;\n            }\n            this.zero = new GenericGFPoly_1.default(\n              this,\n              Uint8ClampedArray.from([0])\n            );\n            this.one = new GenericGFPoly_1.default(\n              this,\n              Uint8ClampedArray.from([1])\n            );\n          }\n          GenericGF.prototype.multiply = function (a, b) {\n            if (a === 0 || b === 0) {\n              return 0;\n            }\n            return this.expTable[\n              (this.logTable[a] + this.logTable[b]) % (this.size - 1)\n            ];\n          };\n          GenericGF.prototype.inverse = function (a) {\n            if (a === 0) {\n              throw new Error(\"Can't invert 0\");\n            }\n            return this.expTable[this.size - this.logTable[a] - 1];\n          };\n          GenericGF.prototype.buildMonomial = function (degree, coefficient) {\n            if (degree < 0) {\n              throw new Error(\"Invalid monomial degree less than 0\");\n            }\n            if (coefficient === 0) {\n              return this.zero;\n            }\n            var coefficients = new Uint8ClampedArray(degree + 1);\n            coefficients[0] = coefficient;\n            return new GenericGFPoly_1.default(this, coefficients);\n          };\n          GenericGF.prototype.log = function (a) {\n            if (a === 0) {\n              throw new Error(\"Can't take log(0)\");\n            }\n            return this.logTable[a];\n          };\n          GenericGF.prototype.exp = function (a) {\n            return this.expTable[a];\n          };\n          return GenericGF;\n        })();\n        exports.default = GenericGF;\n\n        /***/\n      },\n      /* 2 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var GenericGF_1 = __webpack_require__(1);\n        var GenericGFPoly = /** @class */ (function () {\n          function GenericGFPoly(field, coefficients) {\n            if (coefficients.length === 0) {\n              throw new Error(\"No coefficients.\");\n            }\n            this.field = field;\n            var coefficientsLength = coefficients.length;\n            if (coefficientsLength > 1 && coefficients[0] === 0) {\n              // Leading term must be non-zero for anything except the constant polynomial \"0\"\n              var firstNonZero = 1;\n              while (\n                firstNonZero < coefficientsLength &&\n                coefficients[firstNonZero] === 0\n              ) {\n                firstNonZero++;\n              }\n              if (firstNonZero === coefficientsLength) {\n                this.coefficients = field.zero.coefficients;\n              } else {\n                this.coefficients = new Uint8ClampedArray(\n                  coefficientsLength - firstNonZero\n                );\n                for (var i = 0; i < this.coefficients.length; i++) {\n                  this.coefficients[i] = coefficients[firstNonZero + i];\n                }\n              }\n            } else {\n              this.coefficients = coefficients;\n            }\n          }\n          GenericGFPoly.prototype.degree = function () {\n            return this.coefficients.length - 1;\n          };\n          GenericGFPoly.prototype.isZero = function () {\n            return this.coefficients[0] === 0;\n          };\n          GenericGFPoly.prototype.getCoefficient = function (degree) {\n            return this.coefficients[this.coefficients.length - 1 - degree];\n          };\n          GenericGFPoly.prototype.addOrSubtract = function (other) {\n            var _a;\n            if (this.isZero()) {\n              return other;\n            }\n            if (other.isZero()) {\n              return this;\n            }\n            var smallerCoefficients = this.coefficients;\n            var largerCoefficients = other.coefficients;\n            if (smallerCoefficients.length > largerCoefficients.length) {\n              (_a = [largerCoefficients, smallerCoefficients]),\n                (smallerCoefficients = _a[0]),\n                (largerCoefficients = _a[1]);\n            }\n            var sumDiff = new Uint8ClampedArray(largerCoefficients.length);\n            var lengthDiff =\n              largerCoefficients.length - smallerCoefficients.length;\n            for (var i = 0; i < lengthDiff; i++) {\n              sumDiff[i] = largerCoefficients[i];\n            }\n            for (var i = lengthDiff; i < largerCoefficients.length; i++) {\n              sumDiff[i] = GenericGF_1.addOrSubtractGF(\n                smallerCoefficients[i - lengthDiff],\n                largerCoefficients[i]\n              );\n            }\n            return new GenericGFPoly(this.field, sumDiff);\n          };\n          GenericGFPoly.prototype.multiply = function (scalar) {\n            if (scalar === 0) {\n              return this.field.zero;\n            }\n            if (scalar === 1) {\n              return this;\n            }\n            var size = this.coefficients.length;\n            var product = new Uint8ClampedArray(size);\n            for (var i = 0; i < size; i++) {\n              product[i] = this.field.multiply(this.coefficients[i], scalar);\n            }\n            return new GenericGFPoly(this.field, product);\n          };\n          GenericGFPoly.prototype.multiplyPoly = function (other) {\n            if (this.isZero() || other.isZero()) {\n              return this.field.zero;\n            }\n            var aCoefficients = this.coefficients;\n            var aLength = aCoefficients.length;\n            var bCoefficients = other.coefficients;\n            var bLength = bCoefficients.length;\n            var product = new Uint8ClampedArray(aLength + bLength - 1);\n            for (var i = 0; i < aLength; i++) {\n              var aCoeff = aCoefficients[i];\n              for (var j = 0; j < bLength; j++) {\n                product[i + j] = GenericGF_1.addOrSubtractGF(\n                  product[i + j],\n                  this.field.multiply(aCoeff, bCoefficients[j])\n                );\n              }\n            }\n            return new GenericGFPoly(this.field, product);\n          };\n          GenericGFPoly.prototype.multiplyByMonomial = function (\n            degree,\n            coefficient\n          ) {\n            if (degree < 0) {\n              throw new Error(\"Invalid degree less than 0\");\n            }\n            if (coefficient === 0) {\n              return this.field.zero;\n            }\n            var size = this.coefficients.length;\n            var product = new Uint8ClampedArray(size + degree);\n            for (var i = 0; i < size; i++) {\n              product[i] = this.field.multiply(\n                this.coefficients[i],\n                coefficient\n              );\n            }\n            return new GenericGFPoly(this.field, product);\n          };\n          GenericGFPoly.prototype.evaluateAt = function (a) {\n            var result = 0;\n            if (a === 0) {\n              // Just return the x^0 coefficient\n              return this.getCoefficient(0);\n            }\n            var size = this.coefficients.length;\n            if (a === 1) {\n              // Just the sum of the coefficients\n              this.coefficients.forEach(function (coefficient) {\n                result = GenericGF_1.addOrSubtractGF(result, coefficient);\n              });\n              return result;\n            }\n            result = this.coefficients[0];\n            for (var i = 1; i < size; i++) {\n              result = GenericGF_1.addOrSubtractGF(\n                this.field.multiply(a, result),\n                this.coefficients[i]\n              );\n            }\n            return result;\n          };\n          return GenericGFPoly;\n        })();\n        exports.default = GenericGFPoly;\n\n        /***/\n      },\n      /* 3 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var binarizer_1 = __webpack_require__(4);\n        var decoder_1 = __webpack_require__(5);\n        var extractor_1 = __webpack_require__(11);\n        var locator_1 = __webpack_require__(12);\n        function scan(matrix) {\n          var locations = locator_1.locate(matrix);\n          if (!locations) {\n            return null;\n          }\n          for (\n            var _i = 0, locations_1 = locations;\n            _i < locations_1.length;\n            _i++\n          ) {\n            var location_1 = locations_1[_i];\n            var extracted = extractor_1.extract(matrix, location_1);\n            var decoded = decoder_1.decode(extracted.matrix);\n            if (decoded) {\n              return {\n                binaryData: decoded.bytes,\n                data: decoded.text,\n                chunks: decoded.chunks,\n                location: {\n                  topRightCorner: extracted.mappingFunction(\n                    location_1.dimension,\n                    0\n                  ),\n                  topLeftCorner: extracted.mappingFunction(0, 0),\n                  bottomRightCorner: extracted.mappingFunction(\n                    location_1.dimension,\n                    location_1.dimension\n                  ),\n                  bottomLeftCorner: extracted.mappingFunction(\n                    0,\n                    location_1.dimension\n                  ),\n                  topRightFinderPattern: location_1.topRight,\n                  topLeftFinderPattern: location_1.topLeft,\n                  bottomLeftFinderPattern: location_1.bottomLeft,\n                  bottomRightAlignmentPattern: location_1.alignmentPattern,\n                },\n              };\n            }\n          }\n          return null;\n        }\n        var defaultOptions = {\n          inversionAttempts: \"attemptBoth\",\n        };\n        function jsQR(data, width, height, providedOptions) {\n          if (providedOptions === void 0) {\n            providedOptions = {};\n          }\n          var options = defaultOptions;\n          Object.keys(options || {}).forEach(function (opt) {\n            options[opt] = providedOptions[opt] || options[opt];\n          });\n          var shouldInvert =\n            options.inversionAttempts === \"attemptBoth\" ||\n            options.inversionAttempts === \"invertFirst\";\n          var tryInvertedFirst =\n            options.inversionAttempts === \"onlyInvert\" ||\n            options.inversionAttempts === \"invertFirst\";\n          var _a = binarizer_1.binarize(data, width, height, shouldInvert),\n            binarized = _a.binarized,\n            inverted = _a.inverted;\n          var result = scan(tryInvertedFirst ? inverted : binarized);\n          if (\n            !result &&\n            (options.inversionAttempts === \"attemptBoth\" ||\n              options.inversionAttempts === \"invertFirst\")\n          ) {\n            result = scan(tryInvertedFirst ? binarized : inverted);\n          }\n          return result;\n        }\n        jsQR.default = jsQR;\n        exports.default = jsQR;\n\n        /***/\n      },\n      /* 4 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var BitMatrix_1 = __webpack_require__(0);\n        var REGION_SIZE = 8;\n        var MIN_DYNAMIC_RANGE = 24;\n        function numBetween(value, min, max) {\n          return value < min ? min : value > max ? max : value;\n        }\n        // Like BitMatrix but accepts arbitry Uint8 values\n        var Matrix = /** @class */ (function () {\n          function Matrix(width, height) {\n            this.width = width;\n            this.data = new Uint8ClampedArray(width * height);\n          }\n          Matrix.prototype.get = function (x, y) {\n            return this.data[y * this.width + x];\n          };\n          Matrix.prototype.set = function (x, y, value) {\n            this.data[y * this.width + x] = value;\n          };\n          return Matrix;\n        })();\n        function binarize(data, width, height, returnInverted) {\n          if (data.length !== width * height * 4) {\n            throw new Error(\"Malformed data passed to binarizer.\");\n          }\n          // Convert image to greyscale\n          var greyscalePixels = new Matrix(width, height);\n          for (var x = 0; x < width; x++) {\n            for (var y = 0; y < height; y++) {\n              var r = data[(y * width + x) * 4 + 0];\n              var g = data[(y * width + x) * 4 + 1];\n              var b = data[(y * width + x) * 4 + 2];\n              greyscalePixels.set(x, y, 0.2126 * r + 0.7152 * g + 0.0722 * b);\n            }\n          }\n          var horizontalRegionCount = Math.ceil(width / REGION_SIZE);\n          var verticalRegionCount = Math.ceil(height / REGION_SIZE);\n          var blackPoints = new Matrix(\n            horizontalRegionCount,\n            verticalRegionCount\n          );\n          for (\n            var verticalRegion = 0;\n            verticalRegion < verticalRegionCount;\n            verticalRegion++\n          ) {\n            for (\n              var hortizontalRegion = 0;\n              hortizontalRegion < horizontalRegionCount;\n              hortizontalRegion++\n            ) {\n              var sum = 0;\n              var min = Infinity;\n              var max = 0;\n              for (var y = 0; y < REGION_SIZE; y++) {\n                for (var x = 0; x < REGION_SIZE; x++) {\n                  var pixelLumosity = greyscalePixels.get(\n                    hortizontalRegion * REGION_SIZE + x,\n                    verticalRegion * REGION_SIZE + y\n                  );\n                  sum += pixelLumosity;\n                  min = Math.min(min, pixelLumosity);\n                  max = Math.max(max, pixelLumosity);\n                }\n              }\n              var average = sum / Math.pow(REGION_SIZE, 2);\n              if (max - min <= MIN_DYNAMIC_RANGE) {\n                // If variation within the block is low, assume this is a block with only light or only\n                // dark pixels. In that case we do not want to use the average, as it would divide this\n                // low contrast area into black and white pixels, essentially creating data out of noise.\n                //\n                // Default the blackpoint for these blocks to be half the min - effectively white them out\n                average = min / 2;\n                if (verticalRegion > 0 && hortizontalRegion > 0) {\n                  // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n                  // the pixels in this block to the previously calculated black points. This is based on\n                  // the fact that dark barcode symbology is always surrounded by some amount of light\n                  // background for which reasonable black point estimates were made. The bp estimated at\n                  // the boundaries is used for the interior.\n                  // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n                  var averageNeighborBlackPoint =\n                    (blackPoints.get(hortizontalRegion, verticalRegion - 1) +\n                      2 *\n                        blackPoints.get(hortizontalRegion - 1, verticalRegion) +\n                      blackPoints.get(\n                        hortizontalRegion - 1,\n                        verticalRegion - 1\n                      )) /\n                    4;\n                  if (min < averageNeighborBlackPoint) {\n                    average = averageNeighborBlackPoint;\n                  }\n                }\n              }\n              blackPoints.set(hortizontalRegion, verticalRegion, average);\n            }\n          }\n          var binarized = BitMatrix_1.BitMatrix.createEmpty(width, height);\n          var inverted = null;\n          if (returnInverted) {\n            inverted = BitMatrix_1.BitMatrix.createEmpty(width, height);\n          }\n          for (\n            var verticalRegion = 0;\n            verticalRegion < verticalRegionCount;\n            verticalRegion++\n          ) {\n            for (\n              var hortizontalRegion = 0;\n              hortizontalRegion < horizontalRegionCount;\n              hortizontalRegion++\n            ) {\n              var left = numBetween(\n                hortizontalRegion,\n                2,\n                horizontalRegionCount - 3\n              );\n              var top_1 = numBetween(\n                verticalRegion,\n                2,\n                verticalRegionCount - 3\n              );\n              var sum = 0;\n              for (var xRegion = -2; xRegion <= 2; xRegion++) {\n                for (var yRegion = -2; yRegion <= 2; yRegion++) {\n                  sum += blackPoints.get(left + xRegion, top_1 + yRegion);\n                }\n              }\n              var threshold = sum / 25;\n              for (var xRegion = 0; xRegion < REGION_SIZE; xRegion++) {\n                for (var yRegion = 0; yRegion < REGION_SIZE; yRegion++) {\n                  var x = hortizontalRegion * REGION_SIZE + xRegion;\n                  var y = verticalRegion * REGION_SIZE + yRegion;\n                  var lum = greyscalePixels.get(x, y);\n                  binarized.set(x, y, lum <= threshold);\n                  if (returnInverted) {\n                    inverted.set(x, y, !(lum <= threshold));\n                  }\n                }\n              }\n            }\n          }\n          if (returnInverted) {\n            return { binarized: binarized, inverted: inverted };\n          }\n          return { binarized: binarized };\n        }\n        exports.binarize = binarize;\n\n        /***/\n      },\n      /* 5 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var BitMatrix_1 = __webpack_require__(0);\n        var decodeData_1 = __webpack_require__(6);\n        var reedsolomon_1 = __webpack_require__(9);\n        var version_1 = __webpack_require__(10);\n        // tslint:disable:no-bitwise\n        function numBitsDiffering(x, y) {\n          var z = x ^ y;\n          var bitCount = 0;\n          while (z) {\n            bitCount++;\n            z &= z - 1;\n          }\n          return bitCount;\n        }\n        function pushBit(bit, byte) {\n          return (byte << 1) | bit;\n        }\n        // tslint:enable:no-bitwise\n        var FORMAT_INFO_TABLE = [\n          {\n            bits: 0x5412,\n            formatInfo: { errorCorrectionLevel: 1, dataMask: 0 },\n          },\n          {\n            bits: 0x5125,\n            formatInfo: { errorCorrectionLevel: 1, dataMask: 1 },\n          },\n          {\n            bits: 0x5e7c,\n            formatInfo: { errorCorrectionLevel: 1, dataMask: 2 },\n          },\n          {\n            bits: 0x5b4b,\n            formatInfo: { errorCorrectionLevel: 1, dataMask: 3 },\n          },\n          {\n            bits: 0x45f9,\n            formatInfo: { errorCorrectionLevel: 1, dataMask: 4 },\n          },\n          {\n            bits: 0x40ce,\n            formatInfo: { errorCorrectionLevel: 1, dataMask: 5 },\n          },\n          {\n            bits: 0x4f97,\n            formatInfo: { errorCorrectionLevel: 1, dataMask: 6 },\n          },\n          {\n            bits: 0x4aa0,\n            formatInfo: { errorCorrectionLevel: 1, dataMask: 7 },\n          },\n          {\n            bits: 0x77c4,\n            formatInfo: { errorCorrectionLevel: 0, dataMask: 0 },\n          },\n          {\n            bits: 0x72f3,\n            formatInfo: { errorCorrectionLevel: 0, dataMask: 1 },\n          },\n          {\n            bits: 0x7daa,\n            formatInfo: { errorCorrectionLevel: 0, dataMask: 2 },\n          },\n          {\n            bits: 0x789d,\n            formatInfo: { errorCorrectionLevel: 0, dataMask: 3 },\n          },\n          {\n            bits: 0x662f,\n            formatInfo: { errorCorrectionLevel: 0, dataMask: 4 },\n          },\n          {\n            bits: 0x6318,\n            formatInfo: { errorCorrectionLevel: 0, dataMask: 5 },\n          },\n          {\n            bits: 0x6c41,\n            formatInfo: { errorCorrectionLevel: 0, dataMask: 6 },\n          },\n          {\n            bits: 0x6976,\n            formatInfo: { errorCorrectionLevel: 0, dataMask: 7 },\n          },\n          {\n            bits: 0x1689,\n            formatInfo: { errorCorrectionLevel: 3, dataMask: 0 },\n          },\n          {\n            bits: 0x13be,\n            formatInfo: { errorCorrectionLevel: 3, dataMask: 1 },\n          },\n          {\n            bits: 0x1ce7,\n            formatInfo: { errorCorrectionLevel: 3, dataMask: 2 },\n          },\n          {\n            bits: 0x19d0,\n            formatInfo: { errorCorrectionLevel: 3, dataMask: 3 },\n          },\n          {\n            bits: 0x0762,\n            formatInfo: { errorCorrectionLevel: 3, dataMask: 4 },\n          },\n          {\n            bits: 0x0255,\n            formatInfo: { errorCorrectionLevel: 3, dataMask: 5 },\n          },\n          {\n            bits: 0x0d0c,\n            formatInfo: { errorCorrectionLevel: 3, dataMask: 6 },\n          },\n          {\n            bits: 0x083b,\n            formatInfo: { errorCorrectionLevel: 3, dataMask: 7 },\n          },\n          {\n            bits: 0x355f,\n            formatInfo: { errorCorrectionLevel: 2, dataMask: 0 },\n          },\n          {\n            bits: 0x3068,\n            formatInfo: { errorCorrectionLevel: 2, dataMask: 1 },\n          },\n          {\n            bits: 0x3f31,\n            formatInfo: { errorCorrectionLevel: 2, dataMask: 2 },\n          },\n          {\n            bits: 0x3a06,\n            formatInfo: { errorCorrectionLevel: 2, dataMask: 3 },\n          },\n          {\n            bits: 0x24b4,\n            formatInfo: { errorCorrectionLevel: 2, dataMask: 4 },\n          },\n          {\n            bits: 0x2183,\n            formatInfo: { errorCorrectionLevel: 2, dataMask: 5 },\n          },\n          {\n            bits: 0x2eda,\n            formatInfo: { errorCorrectionLevel: 2, dataMask: 6 },\n          },\n          {\n            bits: 0x2bed,\n            formatInfo: { errorCorrectionLevel: 2, dataMask: 7 },\n          },\n        ];\n        var DATA_MASKS = [\n          function (p) {\n            return (p.y + p.x) % 2 === 0;\n          },\n          function (p) {\n            return p.y % 2 === 0;\n          },\n          function (p) {\n            return p.x % 3 === 0;\n          },\n          function (p) {\n            return (p.y + p.x) % 3 === 0;\n          },\n          function (p) {\n            return (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0;\n          },\n          function (p) {\n            return ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0;\n          },\n          function (p) {\n            return (((p.y * p.x) % 2) + ((p.y * p.x) % 3)) % 2 === 0;\n          },\n          function (p) {\n            return (((p.y + p.x) % 2) + ((p.y * p.x) % 3)) % 2 === 0;\n          },\n        ];\n        function buildFunctionPatternMask(version) {\n          var dimension = 17 + 4 * version.versionNumber;\n          var matrix = BitMatrix_1.BitMatrix.createEmpty(dimension, dimension);\n          matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format\n          matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format\n          matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format\n          // Alignment patterns\n          for (\n            var _i = 0, _a = version.alignmentPatternCenters;\n            _i < _a.length;\n            _i++\n          ) {\n            var x = _a[_i];\n            for (\n              var _b = 0, _c = version.alignmentPatternCenters;\n              _b < _c.length;\n              _b++\n            ) {\n              var y = _c[_b];\n              if (\n                !(\n                  (x === 6 && y === 6) ||\n                  (x === 6 && y === dimension - 7) ||\n                  (x === dimension - 7 && y === 6)\n                )\n              ) {\n                matrix.setRegion(x - 2, y - 2, 5, 5, true);\n              }\n            }\n          }\n          matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern\n          matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern\n          if (version.versionNumber > 6) {\n            matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right\n            matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left\n          }\n          return matrix;\n        }\n        function readCodewords(matrix, version, formatInfo) {\n          var dataMask = DATA_MASKS[formatInfo.dataMask];\n          var dimension = matrix.height;\n          var functionPatternMask = buildFunctionPatternMask(version);\n          var codewords = [];\n          var currentByte = 0;\n          var bitsRead = 0;\n          // Read columns in pairs, from right to left\n          var readingUp = true;\n          for (\n            var columnIndex = dimension - 1;\n            columnIndex > 0;\n            columnIndex -= 2\n          ) {\n            if (columnIndex === 6) {\n              // Skip whole column with vertical alignment pattern;\n              columnIndex--;\n            }\n            for (var i = 0; i < dimension; i++) {\n              var y = readingUp ? dimension - 1 - i : i;\n              for (var columnOffset = 0; columnOffset < 2; columnOffset++) {\n                var x = columnIndex - columnOffset;\n                if (!functionPatternMask.get(x, y)) {\n                  bitsRead++;\n                  var bit = matrix.get(x, y);\n                  if (dataMask({ y: y, x: x })) {\n                    bit = !bit;\n                  }\n                  currentByte = pushBit(bit, currentByte);\n                  if (bitsRead === 8) {\n                    // Whole bytes\n                    codewords.push(currentByte);\n                    bitsRead = 0;\n                    currentByte = 0;\n                  }\n                }\n              }\n            }\n            readingUp = !readingUp;\n          }\n          return codewords;\n        }\n        function readVersion(matrix) {\n          var dimension = matrix.height;\n          var provisionalVersion = Math.floor((dimension - 17) / 4);\n          if (provisionalVersion <= 6) {\n            // 6 and under dont have version info in the QR code\n            return version_1.VERSIONS[provisionalVersion - 1];\n          }\n          var topRightVersionBits = 0;\n          for (var y = 5; y >= 0; y--) {\n            for (var x = dimension - 9; x >= dimension - 11; x--) {\n              topRightVersionBits = pushBit(\n                matrix.get(x, y),\n                topRightVersionBits\n              );\n            }\n          }\n          var bottomLeftVersionBits = 0;\n          for (var x = 5; x >= 0; x--) {\n            for (var y = dimension - 9; y >= dimension - 11; y--) {\n              bottomLeftVersionBits = pushBit(\n                matrix.get(x, y),\n                bottomLeftVersionBits\n              );\n            }\n          }\n          var bestDifference = Infinity;\n          var bestVersion;\n          for (\n            var _i = 0, VERSIONS_1 = version_1.VERSIONS;\n            _i < VERSIONS_1.length;\n            _i++\n          ) {\n            var version = VERSIONS_1[_i];\n            if (\n              version.infoBits === topRightVersionBits ||\n              version.infoBits === bottomLeftVersionBits\n            ) {\n              return version;\n            }\n            var difference = numBitsDiffering(\n              topRightVersionBits,\n              version.infoBits\n            );\n            if (difference < bestDifference) {\n              bestVersion = version;\n              bestDifference = difference;\n            }\n            difference = numBitsDiffering(\n              bottomLeftVersionBits,\n              version.infoBits\n            );\n            if (difference < bestDifference) {\n              bestVersion = version;\n              bestDifference = difference;\n            }\n          }\n          // We can tolerate up to 3 bits of error since no two version info codewords will\n          // differ in less than 8 bits.\n          if (bestDifference <= 3) {\n            return bestVersion;\n          }\n        }\n        function readFormatInformation(matrix) {\n          var topLeftFormatInfoBits = 0;\n          for (var x = 0; x <= 8; x++) {\n            if (x !== 6) {\n              // Skip timing pattern bit\n              topLeftFormatInfoBits = pushBit(\n                matrix.get(x, 8),\n                topLeftFormatInfoBits\n              );\n            }\n          }\n          for (var y = 7; y >= 0; y--) {\n            if (y !== 6) {\n              // Skip timing pattern bit\n              topLeftFormatInfoBits = pushBit(\n                matrix.get(8, y),\n                topLeftFormatInfoBits\n              );\n            }\n          }\n          var dimension = matrix.height;\n          var topRightBottomRightFormatInfoBits = 0;\n          for (var y = dimension - 1; y >= dimension - 7; y--) {\n            // bottom left\n            topRightBottomRightFormatInfoBits = pushBit(\n              matrix.get(8, y),\n              topRightBottomRightFormatInfoBits\n            );\n          }\n          for (var x = dimension - 8; x < dimension; x++) {\n            // top right\n            topRightBottomRightFormatInfoBits = pushBit(\n              matrix.get(x, 8),\n              topRightBottomRightFormatInfoBits\n            );\n          }\n          var bestDifference = Infinity;\n          var bestFormatInfo = null;\n          for (\n            var _i = 0, FORMAT_INFO_TABLE_1 = FORMAT_INFO_TABLE;\n            _i < FORMAT_INFO_TABLE_1.length;\n            _i++\n          ) {\n            var _a = FORMAT_INFO_TABLE_1[_i],\n              bits = _a.bits,\n              formatInfo = _a.formatInfo;\n            if (\n              bits === topLeftFormatInfoBits ||\n              bits === topRightBottomRightFormatInfoBits\n            ) {\n              return formatInfo;\n            }\n            var difference = numBitsDiffering(topLeftFormatInfoBits, bits);\n            if (difference < bestDifference) {\n              bestFormatInfo = formatInfo;\n              bestDifference = difference;\n            }\n            if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) {\n              // also try the other option\n              difference = numBitsDiffering(\n                topRightBottomRightFormatInfoBits,\n                bits\n              );\n              if (difference < bestDifference) {\n                bestFormatInfo = formatInfo;\n                bestDifference = difference;\n              }\n            }\n          }\n          // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match\n          if (bestDifference <= 3) {\n            return bestFormatInfo;\n          }\n          return null;\n        }\n        function getDataBlocks(codewords, version, ecLevel) {\n          var ecInfo = version.errorCorrectionLevels[ecLevel];\n          var dataBlocks = [];\n          var totalCodewords = 0;\n          ecInfo.ecBlocks.forEach(function (block) {\n            for (var i = 0; i < block.numBlocks; i++) {\n              dataBlocks.push({\n                numDataCodewords: block.dataCodewordsPerBlock,\n                codewords: [],\n              });\n              totalCodewords +=\n                block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;\n            }\n          });\n          // In some cases the QR code will be malformed enough that we pull off more or less than we should.\n          // If we pull off less there's nothing we can do.\n          // If we pull off more we can safely truncate\n          if (codewords.length < totalCodewords) {\n            return null;\n          }\n          codewords = codewords.slice(0, totalCodewords);\n          var shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;\n          // Pull codewords to fill the blocks up to the minimum size\n          for (var i = 0; i < shortBlockSize; i++) {\n            for (\n              var _i = 0, dataBlocks_1 = dataBlocks;\n              _i < dataBlocks_1.length;\n              _i++\n            ) {\n              var dataBlock = dataBlocks_1[_i];\n              dataBlock.codewords.push(codewords.shift());\n            }\n          }\n          // If there are any large blocks, pull codewords to fill the last element of those\n          if (ecInfo.ecBlocks.length > 1) {\n            var smallBlockCount = ecInfo.ecBlocks[0].numBlocks;\n            var largeBlockCount = ecInfo.ecBlocks[1].numBlocks;\n            for (var i = 0; i < largeBlockCount; i++) {\n              dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());\n            }\n          }\n          // Add the rest of the codewords to the blocks. These are the error correction codewords.\n          while (codewords.length > 0) {\n            for (\n              var _a = 0, dataBlocks_2 = dataBlocks;\n              _a < dataBlocks_2.length;\n              _a++\n            ) {\n              var dataBlock = dataBlocks_2[_a];\n              dataBlock.codewords.push(codewords.shift());\n            }\n          }\n          return dataBlocks;\n        }\n        function decodeMatrix(matrix) {\n          var version = readVersion(matrix);\n          if (!version) {\n            return null;\n          }\n          var formatInfo = readFormatInformation(matrix);\n          if (!formatInfo) {\n            return null;\n          }\n          var codewords = readCodewords(matrix, version, formatInfo);\n          var dataBlocks = getDataBlocks(\n            codewords,\n            version,\n            formatInfo.errorCorrectionLevel\n          );\n          if (!dataBlocks) {\n            return null;\n          }\n          // Count total number of data bytes\n          var totalBytes = dataBlocks.reduce(function (a, b) {\n            return a + b.numDataCodewords;\n          }, 0);\n          var resultBytes = new Uint8ClampedArray(totalBytes);\n          var resultIndex = 0;\n          for (\n            var _i = 0, dataBlocks_3 = dataBlocks;\n            _i < dataBlocks_3.length;\n            _i++\n          ) {\n            var dataBlock = dataBlocks_3[_i];\n            var correctedBytes = reedsolomon_1.decode(\n              dataBlock.codewords,\n              dataBlock.codewords.length - dataBlock.numDataCodewords\n            );\n            if (!correctedBytes) {\n              return null;\n            }\n            for (var i = 0; i < dataBlock.numDataCodewords; i++) {\n              resultBytes[resultIndex++] = correctedBytes[i];\n            }\n          }\n          try {\n            return decodeData_1.decode(resultBytes, version.versionNumber);\n          } catch (_a) {\n            return null;\n          }\n        }\n        function decode(matrix) {\n          if (matrix == null) {\n            return null;\n          }\n          var result = decodeMatrix(matrix);\n          if (result) {\n            return result;\n          }\n          // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.\n          for (var x = 0; x < matrix.width; x++) {\n            for (var y = x + 1; y < matrix.height; y++) {\n              if (matrix.get(x, y) !== matrix.get(y, x)) {\n                matrix.set(x, y, !matrix.get(x, y));\n                matrix.set(y, x, !matrix.get(y, x));\n              }\n            }\n          }\n          return decodeMatrix(matrix);\n        }\n        exports.decode = decode;\n\n        /***/\n      },\n      /* 6 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        // tslint:disable:no-bitwise\n        var BitStream_1 = __webpack_require__(7);\n        var shiftJISTable_1 = __webpack_require__(8);\n        var Mode;\n        (function (Mode) {\n          Mode[\"Numeric\"] = \"numeric\";\n          Mode[\"Alphanumeric\"] = \"alphanumeric\";\n          Mode[\"Byte\"] = \"byte\";\n          Mode[\"Kanji\"] = \"kanji\";\n          Mode[\"ECI\"] = \"eci\";\n        })((Mode = exports.Mode || (exports.Mode = {})));\n        var ModeByte;\n        (function (ModeByte) {\n          ModeByte[(ModeByte[\"Terminator\"] = 0)] = \"Terminator\";\n          ModeByte[(ModeByte[\"Numeric\"] = 1)] = \"Numeric\";\n          ModeByte[(ModeByte[\"Alphanumeric\"] = 2)] = \"Alphanumeric\";\n          ModeByte[(ModeByte[\"Byte\"] = 4)] = \"Byte\";\n          ModeByte[(ModeByte[\"Kanji\"] = 8)] = \"Kanji\";\n          ModeByte[(ModeByte[\"ECI\"] = 7)] = \"ECI\";\n          // StructuredAppend = 0x3,\n          // FNC1FirstPosition = 0x5,\n          // FNC1SecondPosition = 0x9,\n        })(ModeByte || (ModeByte = {}));\n        function decodeNumeric(stream, size) {\n          var bytes = [];\n          var text = \"\";\n          var characterCountSize = [10, 12, 14][size];\n          var length = stream.readBits(characterCountSize);\n          // Read digits in groups of 3\n          while (length >= 3) {\n            var num = stream.readBits(10);\n            if (num >= 1000) {\n              throw new Error(\"Invalid numeric value above 999\");\n            }\n            var a = Math.floor(num / 100);\n            var b = Math.floor(num / 10) % 10;\n            var c = num % 10;\n            bytes.push(48 + a, 48 + b, 48 + c);\n            text += a.toString() + b.toString() + c.toString();\n            length -= 3;\n          }\n          // If the number of digits aren't a multiple of 3, the remaining digits are special cased.\n          if (length === 2) {\n            var num = stream.readBits(7);\n            if (num >= 100) {\n              throw new Error(\"Invalid numeric value above 99\");\n            }\n            var a = Math.floor(num / 10);\n            var b = num % 10;\n            bytes.push(48 + a, 48 + b);\n            text += a.toString() + b.toString();\n          } else if (length === 1) {\n            var num = stream.readBits(4);\n            if (num >= 10) {\n              throw new Error(\"Invalid numeric value above 9\");\n            }\n            bytes.push(48 + num);\n            text += num.toString();\n          }\n          return { bytes: bytes, text: text };\n        }\n        var AlphanumericCharacterCodes = [\n          \"0\",\n          \"1\",\n          \"2\",\n          \"3\",\n          \"4\",\n          \"5\",\n          \"6\",\n          \"7\",\n          \"8\",\n          \"9\",\n          \"A\",\n          \"B\",\n          \"C\",\n          \"D\",\n          \"E\",\n          \"F\",\n          \"G\",\n          \"H\",\n          \"I\",\n          \"J\",\n          \"K\",\n          \"L\",\n          \"M\",\n          \"N\",\n          \"O\",\n          \"P\",\n          \"Q\",\n          \"R\",\n          \"S\",\n          \"T\",\n          \"U\",\n          \"V\",\n          \"W\",\n          \"X\",\n          \"Y\",\n          \"Z\",\n          \" \",\n          \"$\",\n          \"%\",\n          \"*\",\n          \"+\",\n          \"-\",\n          \".\",\n          \"/\",\n          \":\",\n        ];\n        function decodeAlphanumeric(stream, size) {\n          var bytes = [];\n          var text = \"\";\n          var characterCountSize = [9, 11, 13][size];\n          var length = stream.readBits(characterCountSize);\n          while (length >= 2) {\n            var v = stream.readBits(11);\n            var a = Math.floor(v / 45);\n            var b = v % 45;\n            bytes.push(\n              AlphanumericCharacterCodes[a].charCodeAt(0),\n              AlphanumericCharacterCodes[b].charCodeAt(0)\n            );\n            text +=\n              AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];\n            length -= 2;\n          }\n          if (length === 1) {\n            var a = stream.readBits(6);\n            bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));\n            text += AlphanumericCharacterCodes[a];\n          }\n          return { bytes: bytes, text: text };\n        }\n        function decodeByte(stream, size) {\n          var bytes = [];\n          var text = \"\";\n          var characterCountSize = [8, 16, 16][size];\n          var length = stream.readBits(characterCountSize);\n          for (var i = 0; i < length; i++) {\n            var b = stream.readBits(8);\n            bytes.push(b);\n          }\n          try {\n            text += decodeURIComponent(\n              bytes\n                .map(function (b) {\n                  return \"%\" + (\"0\" + b.toString(16)).substr(-2);\n                })\n                .join(\"\")\n            );\n          } catch (_a) {\n            // failed to decode\n          }\n          return { bytes: bytes, text: text };\n        }\n        function decodeKanji(stream, size) {\n          var bytes = [];\n          var text = \"\";\n          var characterCountSize = [8, 10, 12][size];\n          var length = stream.readBits(characterCountSize);\n          for (var i = 0; i < length; i++) {\n            var k = stream.readBits(13);\n            var c = (Math.floor(k / 0xc0) << 8) | k % 0xc0;\n            if (c < 0x1f00) {\n              c += 0x8140;\n            } else {\n              c += 0xc140;\n            }\n            bytes.push(c >> 8, c & 0xff);\n            text += String.fromCharCode(shiftJISTable_1.shiftJISTable[c]);\n          }\n          return { bytes: bytes, text: text };\n        }\n        function decode(data, version) {\n          var _a, _b, _c, _d;\n          var stream = new BitStream_1.BitStream(data);\n          // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).\n          var size = version <= 9 ? 0 : version <= 26 ? 1 : 2;\n          var result = {\n            text: \"\",\n            bytes: [],\n            chunks: [],\n          };\n          while (stream.available() >= 4) {\n            var mode = stream.readBits(4);\n            if (mode === ModeByte.Terminator) {\n              return result;\n            } else if (mode === ModeByte.ECI) {\n              if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                  type: Mode.ECI,\n                  assignmentNumber: stream.readBits(7),\n                });\n              } else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                  type: Mode.ECI,\n                  assignmentNumber: stream.readBits(14),\n                });\n              } else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                  type: Mode.ECI,\n                  assignmentNumber: stream.readBits(21),\n                });\n              } else {\n                // ECI data seems corrupted\n                result.chunks.push({\n                  type: Mode.ECI,\n                  assignmentNumber: -1,\n                });\n              }\n            } else if (mode === ModeByte.Numeric) {\n              var numericResult = decodeNumeric(stream, size);\n              result.text += numericResult.text;\n              (_a = result.bytes).push.apply(_a, numericResult.bytes);\n              result.chunks.push({\n                type: Mode.Numeric,\n                text: numericResult.text,\n              });\n            } else if (mode === ModeByte.Alphanumeric) {\n              var alphanumericResult = decodeAlphanumeric(stream, size);\n              result.text += alphanumericResult.text;\n              (_b = result.bytes).push.apply(_b, alphanumericResult.bytes);\n              result.chunks.push({\n                type: Mode.Alphanumeric,\n                text: alphanumericResult.text,\n              });\n            } else if (mode === ModeByte.Byte) {\n              var byteResult = decodeByte(stream, size);\n              result.text += byteResult.text;\n              (_c = result.bytes).push.apply(_c, byteResult.bytes);\n              result.chunks.push({\n                type: Mode.Byte,\n                bytes: byteResult.bytes,\n                text: byteResult.text,\n              });\n            } else if (mode === ModeByte.Kanji) {\n              var kanjiResult = decodeKanji(stream, size);\n              result.text += kanjiResult.text;\n              (_d = result.bytes).push.apply(_d, kanjiResult.bytes);\n              result.chunks.push({\n                type: Mode.Kanji,\n                bytes: kanjiResult.bytes,\n                text: kanjiResult.text,\n              });\n            }\n          }\n          // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker\n          if (\n            stream.available() === 0 ||\n            stream.readBits(stream.available()) === 0\n          ) {\n            return result;\n          }\n        }\n        exports.decode = decode;\n\n        /***/\n      },\n      /* 7 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        // tslint:disable:no-bitwise\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var BitStream = /** @class */ (function () {\n          function BitStream(bytes) {\n            this.byteOffset = 0;\n            this.bitOffset = 0;\n            this.bytes = bytes;\n          }\n          BitStream.prototype.readBits = function (numBits) {\n            if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n              throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\n            }\n            var result = 0;\n            // First, read remainder from current byte\n            if (this.bitOffset > 0) {\n              var bitsLeft = 8 - this.bitOffset;\n              var toRead = numBits < bitsLeft ? numBits : bitsLeft;\n              var bitsToNotRead = bitsLeft - toRead;\n              var mask = (0xff >> (8 - toRead)) << bitsToNotRead;\n              result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\n              numBits -= toRead;\n              this.bitOffset += toRead;\n              if (this.bitOffset === 8) {\n                this.bitOffset = 0;\n                this.byteOffset++;\n              }\n            }\n            // Next read whole bytes\n            if (numBits > 0) {\n              while (numBits >= 8) {\n                result = (result << 8) | (this.bytes[this.byteOffset] & 0xff);\n                this.byteOffset++;\n                numBits -= 8;\n              }\n              // Finally read a partial byte\n              if (numBits > 0) {\n                var bitsToNotRead = 8 - numBits;\n                var mask = (0xff >> bitsToNotRead) << bitsToNotRead;\n                result =\n                  (result << numBits) |\n                  ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\n                this.bitOffset += numBits;\n              }\n            }\n            return result;\n          };\n          BitStream.prototype.available = function () {\n            return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n          };\n          return BitStream;\n        })();\n        exports.BitStream = BitStream;\n\n        /***/\n      },\n      /* 8 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        exports.shiftJISTable = {\n          0x20: 0x0020,\n          0x21: 0x0021,\n          0x22: 0x0022,\n          0x23: 0x0023,\n          0x24: 0x0024,\n          0x25: 0x0025,\n          0x26: 0x0026,\n          0x27: 0x0027,\n          0x28: 0x0028,\n          0x29: 0x0029,\n          0x2a: 0x002a,\n          0x2b: 0x002b,\n          0x2c: 0x002c,\n          0x2d: 0x002d,\n          0x2e: 0x002e,\n          0x2f: 0x002f,\n          0x30: 0x0030,\n          0x31: 0x0031,\n          0x32: 0x0032,\n          0x33: 0x0033,\n          0x34: 0x0034,\n          0x35: 0x0035,\n          0x36: 0x0036,\n          0x37: 0x0037,\n          0x38: 0x0038,\n          0x39: 0x0039,\n          0x3a: 0x003a,\n          0x3b: 0x003b,\n          0x3c: 0x003c,\n          0x3d: 0x003d,\n          0x3e: 0x003e,\n          0x3f: 0x003f,\n          0x40: 0x0040,\n          0x41: 0x0041,\n          0x42: 0x0042,\n          0x43: 0x0043,\n          0x44: 0x0044,\n          0x45: 0x0045,\n          0x46: 0x0046,\n          0x47: 0x0047,\n          0x48: 0x0048,\n          0x49: 0x0049,\n          0x4a: 0x004a,\n          0x4b: 0x004b,\n          0x4c: 0x004c,\n          0x4d: 0x004d,\n          0x4e: 0x004e,\n          0x4f: 0x004f,\n          0x50: 0x0050,\n          0x51: 0x0051,\n          0x52: 0x0052,\n          0x53: 0x0053,\n          0x54: 0x0054,\n          0x55: 0x0055,\n          0x56: 0x0056,\n          0x57: 0x0057,\n          0x58: 0x0058,\n          0x59: 0x0059,\n          0x5a: 0x005a,\n          0x5b: 0x005b,\n          0x5c: 0x00a5,\n          0x5d: 0x005d,\n          0x5e: 0x005e,\n          0x5f: 0x005f,\n          0x60: 0x0060,\n          0x61: 0x0061,\n          0x62: 0x0062,\n          0x63: 0x0063,\n          0x64: 0x0064,\n          0x65: 0x0065,\n          0x66: 0x0066,\n          0x67: 0x0067,\n          0x68: 0x0068,\n          0x69: 0x0069,\n          0x6a: 0x006a,\n          0x6b: 0x006b,\n          0x6c: 0x006c,\n          0x6d: 0x006d,\n          0x6e: 0x006e,\n          0x6f: 0x006f,\n          0x70: 0x0070,\n          0x71: 0x0071,\n          0x72: 0x0072,\n          0x73: 0x0073,\n          0x74: 0x0074,\n          0x75: 0x0075,\n          0x76: 0x0076,\n          0x77: 0x0077,\n          0x78: 0x0078,\n          0x79: 0x0079,\n          0x7a: 0x007a,\n          0x7b: 0x007b,\n          0x7c: 0x007c,\n          0x7d: 0x007d,\n          0x7e: 0x203e,\n          0x8140: 0x3000,\n          0x8141: 0x3001,\n          0x8142: 0x3002,\n          0x8143: 0xff0c,\n          0x8144: 0xff0e,\n          0x8145: 0x30fb,\n          0x8146: 0xff1a,\n          0x8147: 0xff1b,\n          0x8148: 0xff1f,\n          0x8149: 0xff01,\n          0x814a: 0x309b,\n          0x814b: 0x309c,\n          0x814c: 0x00b4,\n          0x814d: 0xff40,\n          0x814e: 0x00a8,\n          0x814f: 0xff3e,\n          0x8150: 0xffe3,\n          0x8151: 0xff3f,\n          0x8152: 0x30fd,\n          0x8153: 0x30fe,\n          0x8154: 0x309d,\n          0x8155: 0x309e,\n          0x8156: 0x3003,\n          0x8157: 0x4edd,\n          0x8158: 0x3005,\n          0x8159: 0x3006,\n          0x815a: 0x3007,\n          0x815b: 0x30fc,\n          0x815c: 0x2015,\n          0x815d: 0x2010,\n          0x815e: 0xff0f,\n          0x815f: 0x005c,\n          0x8160: 0x301c,\n          0x8161: 0x2016,\n          0x8162: 0xff5c,\n          0x8163: 0x2026,\n          0x8164: 0x2025,\n          0x8165: 0x2018,\n          0x8166: 0x2019,\n          0x8167: 0x201c,\n          0x8168: 0x201d,\n          0x8169: 0xff08,\n          0x816a: 0xff09,\n          0x816b: 0x3014,\n          0x816c: 0x3015,\n          0x816d: 0xff3b,\n          0x816e: 0xff3d,\n          0x816f: 0xff5b,\n          0x8170: 0xff5d,\n          0x8171: 0x3008,\n          0x8172: 0x3009,\n          0x8173: 0x300a,\n          0x8174: 0x300b,\n          0x8175: 0x300c,\n          0x8176: 0x300d,\n          0x8177: 0x300e,\n          0x8178: 0x300f,\n          0x8179: 0x3010,\n          0x817a: 0x3011,\n          0x817b: 0xff0b,\n          0x817c: 0x2212,\n          0x817d: 0x00b1,\n          0x817e: 0x00d7,\n          0x8180: 0x00f7,\n          0x8181: 0xff1d,\n          0x8182: 0x2260,\n          0x8183: 0xff1c,\n          0x8184: 0xff1e,\n          0x8185: 0x2266,\n          0x8186: 0x2267,\n          0x8187: 0x221e,\n          0x8188: 0x2234,\n          0x8189: 0x2642,\n          0x818a: 0x2640,\n          0x818b: 0x00b0,\n          0x818c: 0x2032,\n          0x818d: 0x2033,\n          0x818e: 0x2103,\n          0x818f: 0xffe5,\n          0x8190: 0xff04,\n          0x8191: 0x00a2,\n          0x8192: 0x00a3,\n          0x8193: 0xff05,\n          0x8194: 0xff03,\n          0x8195: 0xff06,\n          0x8196: 0xff0a,\n          0x8197: 0xff20,\n          0x8198: 0x00a7,\n          0x8199: 0x2606,\n          0x819a: 0x2605,\n          0x819b: 0x25cb,\n          0x819c: 0x25cf,\n          0x819d: 0x25ce,\n          0x819e: 0x25c7,\n          0x819f: 0x25c6,\n          0x81a0: 0x25a1,\n          0x81a1: 0x25a0,\n          0x81a2: 0x25b3,\n          0x81a3: 0x25b2,\n          0x81a4: 0x25bd,\n          0x81a5: 0x25bc,\n          0x81a6: 0x203b,\n          0x81a7: 0x3012,\n          0x81a8: 0x2192,\n          0x81a9: 0x2190,\n          0x81aa: 0x2191,\n          0x81ab: 0x2193,\n          0x81ac: 0x3013,\n          0x81b8: 0x2208,\n          0x81b9: 0x220b,\n          0x81ba: 0x2286,\n          0x81bb: 0x2287,\n          0x81bc: 0x2282,\n          0x81bd: 0x2283,\n          0x81be: 0x222a,\n          0x81bf: 0x2229,\n          0x81c8: 0x2227,\n          0x81c9: 0x2228,\n          0x81ca: 0x00ac,\n          0x81cb: 0x21d2,\n          0x81cc: 0x21d4,\n          0x81cd: 0x2200,\n          0x81ce: 0x2203,\n          0x81da: 0x2220,\n          0x81db: 0x22a5,\n          0x81dc: 0x2312,\n          0x81dd: 0x2202,\n          0x81de: 0x2207,\n          0x81df: 0x2261,\n          0x81e0: 0x2252,\n          0x81e1: 0x226a,\n          0x81e2: 0x226b,\n          0x81e3: 0x221a,\n          0x81e4: 0x223d,\n          0x81e5: 0x221d,\n          0x81e6: 0x2235,\n          0x81e7: 0x222b,\n          0x81e8: 0x222c,\n          0x81f0: 0x212b,\n          0x81f1: 0x2030,\n          0x81f2: 0x266f,\n          0x81f3: 0x266d,\n          0x81f4: 0x266a,\n          0x81f5: 0x2020,\n          0x81f6: 0x2021,\n          0x81f7: 0x00b6,\n          0x81fc: 0x25ef,\n          0x824f: 0xff10,\n          0x8250: 0xff11,\n          0x8251: 0xff12,\n          0x8252: 0xff13,\n          0x8253: 0xff14,\n          0x8254: 0xff15,\n          0x8255: 0xff16,\n          0x8256: 0xff17,\n          0x8257: 0xff18,\n          0x8258: 0xff19,\n          0x8260: 0xff21,\n          0x8261: 0xff22,\n          0x8262: 0xff23,\n          0x8263: 0xff24,\n          0x8264: 0xff25,\n          0x8265: 0xff26,\n          0x8266: 0xff27,\n          0x8267: 0xff28,\n          0x8268: 0xff29,\n          0x8269: 0xff2a,\n          0x826a: 0xff2b,\n          0x826b: 0xff2c,\n          0x826c: 0xff2d,\n          0x826d: 0xff2e,\n          0x826e: 0xff2f,\n          0x826f: 0xff30,\n          0x8270: 0xff31,\n          0x8271: 0xff32,\n          0x8272: 0xff33,\n          0x8273: 0xff34,\n          0x8274: 0xff35,\n          0x8275: 0xff36,\n          0x8276: 0xff37,\n          0x8277: 0xff38,\n          0x8278: 0xff39,\n          0x8279: 0xff3a,\n          0x8281: 0xff41,\n          0x8282: 0xff42,\n          0x8283: 0xff43,\n          0x8284: 0xff44,\n          0x8285: 0xff45,\n          0x8286: 0xff46,\n          0x8287: 0xff47,\n          0x8288: 0xff48,\n          0x8289: 0xff49,\n          0x828a: 0xff4a,\n          0x828b: 0xff4b,\n          0x828c: 0xff4c,\n          0x828d: 0xff4d,\n          0x828e: 0xff4e,\n          0x828f: 0xff4f,\n          0x8290: 0xff50,\n          0x8291: 0xff51,\n          0x8292: 0xff52,\n          0x8293: 0xff53,\n          0x8294: 0xff54,\n          0x8295: 0xff55,\n          0x8296: 0xff56,\n          0x8297: 0xff57,\n          0x8298: 0xff58,\n          0x8299: 0xff59,\n          0x829a: 0xff5a,\n          0x829f: 0x3041,\n          0x82a0: 0x3042,\n          0x82a1: 0x3043,\n          0x82a2: 0x3044,\n          0x82a3: 0x3045,\n          0x82a4: 0x3046,\n          0x82a5: 0x3047,\n          0x82a6: 0x3048,\n          0x82a7: 0x3049,\n          0x82a8: 0x304a,\n          0x82a9: 0x304b,\n          0x82aa: 0x304c,\n          0x82ab: 0x304d,\n          0x82ac: 0x304e,\n          0x82ad: 0x304f,\n          0x82ae: 0x3050,\n          0x82af: 0x3051,\n          0x82b0: 0x3052,\n          0x82b1: 0x3053,\n          0x82b2: 0x3054,\n          0x82b3: 0x3055,\n          0x82b4: 0x3056,\n          0x82b5: 0x3057,\n          0x82b6: 0x3058,\n          0x82b7: 0x3059,\n          0x82b8: 0x305a,\n          0x82b9: 0x305b,\n          0x82ba: 0x305c,\n          0x82bb: 0x305d,\n          0x82bc: 0x305e,\n          0x82bd: 0x305f,\n          0x82be: 0x3060,\n          0x82bf: 0x3061,\n          0x82c0: 0x3062,\n          0x82c1: 0x3063,\n          0x82c2: 0x3064,\n          0x82c3: 0x3065,\n          0x82c4: 0x3066,\n          0x82c5: 0x3067,\n          0x82c6: 0x3068,\n          0x82c7: 0x3069,\n          0x82c8: 0x306a,\n          0x82c9: 0x306b,\n          0x82ca: 0x306c,\n          0x82cb: 0x306d,\n          0x82cc: 0x306e,\n          0x82cd: 0x306f,\n          0x82ce: 0x3070,\n          0x82cf: 0x3071,\n          0x82d0: 0x3072,\n          0x82d1: 0x3073,\n          0x82d2: 0x3074,\n          0x82d3: 0x3075,\n          0x82d4: 0x3076,\n          0x82d5: 0x3077,\n          0x82d6: 0x3078,\n          0x82d7: 0x3079,\n          0x82d8: 0x307a,\n          0x82d9: 0x307b,\n          0x82da: 0x307c,\n          0x82db: 0x307d,\n          0x82dc: 0x307e,\n          0x82dd: 0x307f,\n          0x82de: 0x3080,\n          0x82df: 0x3081,\n          0x82e0: 0x3082,\n          0x82e1: 0x3083,\n          0x82e2: 0x3084,\n          0x82e3: 0x3085,\n          0x82e4: 0x3086,\n          0x82e5: 0x3087,\n          0x82e6: 0x3088,\n          0x82e7: 0x3089,\n          0x82e8: 0x308a,\n          0x82e9: 0x308b,\n          0x82ea: 0x308c,\n          0x82eb: 0x308d,\n          0x82ec: 0x308e,\n          0x82ed: 0x308f,\n          0x82ee: 0x3090,\n          0x82ef: 0x3091,\n          0x82f0: 0x3092,\n          0x82f1: 0x3093,\n          0x8340: 0x30a1,\n          0x8341: 0x30a2,\n          0x8342: 0x30a3,\n          0x8343: 0x30a4,\n          0x8344: 0x30a5,\n          0x8345: 0x30a6,\n          0x8346: 0x30a7,\n          0x8347: 0x30a8,\n          0x8348: 0x30a9,\n          0x8349: 0x30aa,\n          0x834a: 0x30ab,\n          0x834b: 0x30ac,\n          0x834c: 0x30ad,\n          0x834d: 0x30ae,\n          0x834e: 0x30af,\n          0x834f: 0x30b0,\n          0x8350: 0x30b1,\n          0x8351: 0x30b2,\n          0x8352: 0x30b3,\n          0x8353: 0x30b4,\n          0x8354: 0x30b5,\n          0x8355: 0x30b6,\n          0x8356: 0x30b7,\n          0x8357: 0x30b8,\n          0x8358: 0x30b9,\n          0x8359: 0x30ba,\n          0x835a: 0x30bb,\n          0x835b: 0x30bc,\n          0x835c: 0x30bd,\n          0x835d: 0x30be,\n          0x835e: 0x30bf,\n          0x835f: 0x30c0,\n          0x8360: 0x30c1,\n          0x8361: 0x30c2,\n          0x8362: 0x30c3,\n          0x8363: 0x30c4,\n          0x8364: 0x30c5,\n          0x8365: 0x30c6,\n          0x8366: 0x30c7,\n          0x8367: 0x30c8,\n          0x8368: 0x30c9,\n          0x8369: 0x30ca,\n          0x836a: 0x30cb,\n          0x836b: 0x30cc,\n          0x836c: 0x30cd,\n          0x836d: 0x30ce,\n          0x836e: 0x30cf,\n          0x836f: 0x30d0,\n          0x8370: 0x30d1,\n          0x8371: 0x30d2,\n          0x8372: 0x30d3,\n          0x8373: 0x30d4,\n          0x8374: 0x30d5,\n          0x8375: 0x30d6,\n          0x8376: 0x30d7,\n          0x8377: 0x30d8,\n          0x8378: 0x30d9,\n          0x8379: 0x30da,\n          0x837a: 0x30db,\n          0x837b: 0x30dc,\n          0x837c: 0x30dd,\n          0x837d: 0x30de,\n          0x837e: 0x30df,\n          0x8380: 0x30e0,\n          0x8381: 0x30e1,\n          0x8382: 0x30e2,\n          0x8383: 0x30e3,\n          0x8384: 0x30e4,\n          0x8385: 0x30e5,\n          0x8386: 0x30e6,\n          0x8387: 0x30e7,\n          0x8388: 0x30e8,\n          0x8389: 0x30e9,\n          0x838a: 0x30ea,\n          0x838b: 0x30eb,\n          0x838c: 0x30ec,\n          0x838d: 0x30ed,\n          0x838e: 0x30ee,\n          0x838f: 0x30ef,\n          0x8390: 0x30f0,\n          0x8391: 0x30f1,\n          0x8392: 0x30f2,\n          0x8393: 0x30f3,\n          0x8394: 0x30f4,\n          0x8395: 0x30f5,\n          0x8396: 0x30f6,\n          0x839f: 0x0391,\n          0x83a0: 0x0392,\n          0x83a1: 0x0393,\n          0x83a2: 0x0394,\n          0x83a3: 0x0395,\n          0x83a4: 0x0396,\n          0x83a5: 0x0397,\n          0x83a6: 0x0398,\n          0x83a7: 0x0399,\n          0x83a8: 0x039a,\n          0x83a9: 0x039b,\n          0x83aa: 0x039c,\n          0x83ab: 0x039d,\n          0x83ac: 0x039e,\n          0x83ad: 0x039f,\n          0x83ae: 0x03a0,\n          0x83af: 0x03a1,\n          0x83b0: 0x03a3,\n          0x83b1: 0x03a4,\n          0x83b2: 0x03a5,\n          0x83b3: 0x03a6,\n          0x83b4: 0x03a7,\n          0x83b5: 0x03a8,\n          0x83b6: 0x03a9,\n          0x83bf: 0x03b1,\n          0x83c0: 0x03b2,\n          0x83c1: 0x03b3,\n          0x83c2: 0x03b4,\n          0x83c3: 0x03b5,\n          0x83c4: 0x03b6,\n          0x83c5: 0x03b7,\n          0x83c6: 0x03b8,\n          0x83c7: 0x03b9,\n          0x83c8: 0x03ba,\n          0x83c9: 0x03bb,\n          0x83ca: 0x03bc,\n          0x83cb: 0x03bd,\n          0x83cc: 0x03be,\n          0x83cd: 0x03bf,\n          0x83ce: 0x03c0,\n          0x83cf: 0x03c1,\n          0x83d0: 0x03c3,\n          0x83d1: 0x03c4,\n          0x83d2: 0x03c5,\n          0x83d3: 0x03c6,\n          0x83d4: 0x03c7,\n          0x83d5: 0x03c8,\n          0x83d6: 0x03c9,\n          0x8440: 0x0410,\n          0x8441: 0x0411,\n          0x8442: 0x0412,\n          0x8443: 0x0413,\n          0x8444: 0x0414,\n          0x8445: 0x0415,\n          0x8446: 0x0401,\n          0x8447: 0x0416,\n          0x8448: 0x0417,\n          0x8449: 0x0418,\n          0x844a: 0x0419,\n          0x844b: 0x041a,\n          0x844c: 0x041b,\n          0x844d: 0x041c,\n          0x844e: 0x041d,\n          0x844f: 0x041e,\n          0x8450: 0x041f,\n          0x8451: 0x0420,\n          0x8452: 0x0421,\n          0x8453: 0x0422,\n          0x8454: 0x0423,\n          0x8455: 0x0424,\n          0x8456: 0x0425,\n          0x8457: 0x0426,\n          0x8458: 0x0427,\n          0x8459: 0x0428,\n          0x845a: 0x0429,\n          0x845b: 0x042a,\n          0x845c: 0x042b,\n          0x845d: 0x042c,\n          0x845e: 0x042d,\n          0x845f: 0x042e,\n          0x8460: 0x042f,\n          0x8470: 0x0430,\n          0x8471: 0x0431,\n          0x8472: 0x0432,\n          0x8473: 0x0433,\n          0x8474: 0x0434,\n          0x8475: 0x0435,\n          0x8476: 0x0451,\n          0x8477: 0x0436,\n          0x8478: 0x0437,\n          0x8479: 0x0438,\n          0x847a: 0x0439,\n          0x847b: 0x043a,\n          0x847c: 0x043b,\n          0x847d: 0x043c,\n          0x847e: 0x043d,\n          0x8480: 0x043e,\n          0x8481: 0x043f,\n          0x8482: 0x0440,\n          0x8483: 0x0441,\n          0x8484: 0x0442,\n          0x8485: 0x0443,\n          0x8486: 0x0444,\n          0x8487: 0x0445,\n          0x8488: 0x0446,\n          0x8489: 0x0447,\n          0x848a: 0x0448,\n          0x848b: 0x0449,\n          0x848c: 0x044a,\n          0x848d: 0x044b,\n          0x848e: 0x044c,\n          0x848f: 0x044d,\n          0x8490: 0x044e,\n          0x8491: 0x044f,\n          0x849f: 0x2500,\n          0x84a0: 0x2502,\n          0x84a1: 0x250c,\n          0x84a2: 0x2510,\n          0x84a3: 0x2518,\n          0x84a4: 0x2514,\n          0x84a5: 0x251c,\n          0x84a6: 0x252c,\n          0x84a7: 0x2524,\n          0x84a8: 0x2534,\n          0x84a9: 0x253c,\n          0x84aa: 0x2501,\n          0x84ab: 0x2503,\n          0x84ac: 0x250f,\n          0x84ad: 0x2513,\n          0x84ae: 0x251b,\n          0x84af: 0x2517,\n          0x84b0: 0x2523,\n          0x84b1: 0x2533,\n          0x84b2: 0x252b,\n          0x84b3: 0x253b,\n          0x84b4: 0x254b,\n          0x84b5: 0x2520,\n          0x84b6: 0x252f,\n          0x84b7: 0x2528,\n          0x84b8: 0x2537,\n          0x84b9: 0x253f,\n          0x84ba: 0x251d,\n          0x84bb: 0x2530,\n          0x84bc: 0x2525,\n          0x84bd: 0x2538,\n          0x84be: 0x2542,\n          0x889f: 0x4e9c,\n          0x88a0: 0x5516,\n          0x88a1: 0x5a03,\n          0x88a2: 0x963f,\n          0x88a3: 0x54c0,\n          0x88a4: 0x611b,\n          0x88a5: 0x6328,\n          0x88a6: 0x59f6,\n          0x88a7: 0x9022,\n          0x88a8: 0x8475,\n          0x88a9: 0x831c,\n          0x88aa: 0x7a50,\n          0x88ab: 0x60aa,\n          0x88ac: 0x63e1,\n          0x88ad: 0x6e25,\n          0x88ae: 0x65ed,\n          0x88af: 0x8466,\n          0x88b0: 0x82a6,\n          0x88b1: 0x9bf5,\n          0x88b2: 0x6893,\n          0x88b3: 0x5727,\n          0x88b4: 0x65a1,\n          0x88b5: 0x6271,\n          0x88b6: 0x5b9b,\n          0x88b7: 0x59d0,\n          0x88b8: 0x867b,\n          0x88b9: 0x98f4,\n          0x88ba: 0x7d62,\n          0x88bb: 0x7dbe,\n          0x88bc: 0x9b8e,\n          0x88bd: 0x6216,\n          0x88be: 0x7c9f,\n          0x88bf: 0x88b7,\n          0x88c0: 0x5b89,\n          0x88c1: 0x5eb5,\n          0x88c2: 0x6309,\n          0x88c3: 0x6697,\n          0x88c4: 0x6848,\n          0x88c5: 0x95c7,\n          0x88c6: 0x978d,\n          0x88c7: 0x674f,\n          0x88c8: 0x4ee5,\n          0x88c9: 0x4f0a,\n          0x88ca: 0x4f4d,\n          0x88cb: 0x4f9d,\n          0x88cc: 0x5049,\n          0x88cd: 0x56f2,\n          0x88ce: 0x5937,\n          0x88cf: 0x59d4,\n          0x88d0: 0x5a01,\n          0x88d1: 0x5c09,\n          0x88d2: 0x60df,\n          0x88d3: 0x610f,\n          0x88d4: 0x6170,\n          0x88d5: 0x6613,\n          0x88d6: 0x6905,\n          0x88d7: 0x70ba,\n          0x88d8: 0x754f,\n          0x88d9: 0x7570,\n          0x88da: 0x79fb,\n          0x88db: 0x7dad,\n          0x88dc: 0x7def,\n          0x88dd: 0x80c3,\n          0x88de: 0x840e,\n          0x88df: 0x8863,\n          0x88e0: 0x8b02,\n          0x88e1: 0x9055,\n          0x88e2: 0x907a,\n          0x88e3: 0x533b,\n          0x88e4: 0x4e95,\n          0x88e5: 0x4ea5,\n          0x88e6: 0x57df,\n          0x88e7: 0x80b2,\n          0x88e8: 0x90c1,\n          0x88e9: 0x78ef,\n          0x88ea: 0x4e00,\n          0x88eb: 0x58f1,\n          0x88ec: 0x6ea2,\n          0x88ed: 0x9038,\n          0x88ee: 0x7a32,\n          0x88ef: 0x8328,\n          0x88f0: 0x828b,\n          0x88f1: 0x9c2f,\n          0x88f2: 0x5141,\n          0x88f3: 0x5370,\n          0x88f4: 0x54bd,\n          0x88f5: 0x54e1,\n          0x88f6: 0x56e0,\n          0x88f7: 0x59fb,\n          0x88f8: 0x5f15,\n          0x88f9: 0x98f2,\n          0x88fa: 0x6deb,\n          0x88fb: 0x80e4,\n          0x88fc: 0x852d,\n          0x8940: 0x9662,\n          0x8941: 0x9670,\n          0x8942: 0x96a0,\n          0x8943: 0x97fb,\n          0x8944: 0x540b,\n          0x8945: 0x53f3,\n          0x8946: 0x5b87,\n          0x8947: 0x70cf,\n          0x8948: 0x7fbd,\n          0x8949: 0x8fc2,\n          0x894a: 0x96e8,\n          0x894b: 0x536f,\n          0x894c: 0x9d5c,\n          0x894d: 0x7aba,\n          0x894e: 0x4e11,\n          0x894f: 0x7893,\n          0x8950: 0x81fc,\n          0x8951: 0x6e26,\n          0x8952: 0x5618,\n          0x8953: 0x5504,\n          0x8954: 0x6b1d,\n          0x8955: 0x851a,\n          0x8956: 0x9c3b,\n          0x8957: 0x59e5,\n          0x8958: 0x53a9,\n          0x8959: 0x6d66,\n          0x895a: 0x74dc,\n          0x895b: 0x958f,\n          0x895c: 0x5642,\n          0x895d: 0x4e91,\n          0x895e: 0x904b,\n          0x895f: 0x96f2,\n          0x8960: 0x834f,\n          0x8961: 0x990c,\n          0x8962: 0x53e1,\n          0x8963: 0x55b6,\n          0x8964: 0x5b30,\n          0x8965: 0x5f71,\n          0x8966: 0x6620,\n          0x8967: 0x66f3,\n          0x8968: 0x6804,\n          0x8969: 0x6c38,\n          0x896a: 0x6cf3,\n          0x896b: 0x6d29,\n          0x896c: 0x745b,\n          0x896d: 0x76c8,\n          0x896e: 0x7a4e,\n          0x896f: 0x9834,\n          0x8970: 0x82f1,\n          0x8971: 0x885b,\n          0x8972: 0x8a60,\n          0x8973: 0x92ed,\n          0x8974: 0x6db2,\n          0x8975: 0x75ab,\n          0x8976: 0x76ca,\n          0x8977: 0x99c5,\n          0x8978: 0x60a6,\n          0x8979: 0x8b01,\n          0x897a: 0x8d8a,\n          0x897b: 0x95b2,\n          0x897c: 0x698e,\n          0x897d: 0x53ad,\n          0x897e: 0x5186,\n          0x8980: 0x5712,\n          0x8981: 0x5830,\n          0x8982: 0x5944,\n          0x8983: 0x5bb4,\n          0x8984: 0x5ef6,\n          0x8985: 0x6028,\n          0x8986: 0x63a9,\n          0x8987: 0x63f4,\n          0x8988: 0x6cbf,\n          0x8989: 0x6f14,\n          0x898a: 0x708e,\n          0x898b: 0x7114,\n          0x898c: 0x7159,\n          0x898d: 0x71d5,\n          0x898e: 0x733f,\n          0x898f: 0x7e01,\n          0x8990: 0x8276,\n          0x8991: 0x82d1,\n          0x8992: 0x8597,\n          0x8993: 0x9060,\n          0x8994: 0x925b,\n          0x8995: 0x9d1b,\n          0x8996: 0x5869,\n          0x8997: 0x65bc,\n          0x8998: 0x6c5a,\n          0x8999: 0x7525,\n          0x899a: 0x51f9,\n          0x899b: 0x592e,\n          0x899c: 0x5965,\n          0x899d: 0x5f80,\n          0x899e: 0x5fdc,\n          0x899f: 0x62bc,\n          0x89a0: 0x65fa,\n          0x89a1: 0x6a2a,\n          0x89a2: 0x6b27,\n          0x89a3: 0x6bb4,\n          0x89a4: 0x738b,\n          0x89a5: 0x7fc1,\n          0x89a6: 0x8956,\n          0x89a7: 0x9d2c,\n          0x89a8: 0x9d0e,\n          0x89a9: 0x9ec4,\n          0x89aa: 0x5ca1,\n          0x89ab: 0x6c96,\n          0x89ac: 0x837b,\n          0x89ad: 0x5104,\n          0x89ae: 0x5c4b,\n          0x89af: 0x61b6,\n          0x89b0: 0x81c6,\n          0x89b1: 0x6876,\n          0x89b2: 0x7261,\n          0x89b3: 0x4e59,\n          0x89b4: 0x4ffa,\n          0x89b5: 0x5378,\n          0x89b6: 0x6069,\n          0x89b7: 0x6e29,\n          0x89b8: 0x7a4f,\n          0x89b9: 0x97f3,\n          0x89ba: 0x4e0b,\n          0x89bb: 0x5316,\n          0x89bc: 0x4eee,\n          0x89bd: 0x4f55,\n          0x89be: 0x4f3d,\n          0x89bf: 0x4fa1,\n          0x89c0: 0x4f73,\n          0x89c1: 0x52a0,\n          0x89c2: 0x53ef,\n          0x89c3: 0x5609,\n          0x89c4: 0x590f,\n          0x89c5: 0x5ac1,\n          0x89c6: 0x5bb6,\n          0x89c7: 0x5be1,\n          0x89c8: 0x79d1,\n          0x89c9: 0x6687,\n          0x89ca: 0x679c,\n          0x89cb: 0x67b6,\n          0x89cc: 0x6b4c,\n          0x89cd: 0x6cb3,\n          0x89ce: 0x706b,\n          0x89cf: 0x73c2,\n          0x89d0: 0x798d,\n          0x89d1: 0x79be,\n          0x89d2: 0x7a3c,\n          0x89d3: 0x7b87,\n          0x89d4: 0x82b1,\n          0x89d5: 0x82db,\n          0x89d6: 0x8304,\n          0x89d7: 0x8377,\n          0x89d8: 0x83ef,\n          0x89d9: 0x83d3,\n          0x89da: 0x8766,\n          0x89db: 0x8ab2,\n          0x89dc: 0x5629,\n          0x89dd: 0x8ca8,\n          0x89de: 0x8fe6,\n          0x89df: 0x904e,\n          0x89e0: 0x971e,\n          0x89e1: 0x868a,\n          0x89e2: 0x4fc4,\n          0x89e3: 0x5ce8,\n          0x89e4: 0x6211,\n          0x89e5: 0x7259,\n          0x89e6: 0x753b,\n          0x89e7: 0x81e5,\n          0x89e8: 0x82bd,\n          0x89e9: 0x86fe,\n          0x89ea: 0x8cc0,\n          0x89eb: 0x96c5,\n          0x89ec: 0x9913,\n          0x89ed: 0x99d5,\n          0x89ee: 0x4ecb,\n          0x89ef: 0x4f1a,\n          0x89f0: 0x89e3,\n          0x89f1: 0x56de,\n          0x89f2: 0x584a,\n          0x89f3: 0x58ca,\n          0x89f4: 0x5efb,\n          0x89f5: 0x5feb,\n          0x89f6: 0x602a,\n          0x89f7: 0x6094,\n          0x89f8: 0x6062,\n          0x89f9: 0x61d0,\n          0x89fa: 0x6212,\n          0x89fb: 0x62d0,\n          0x89fc: 0x6539,\n          0x8a40: 0x9b41,\n          0x8a41: 0x6666,\n          0x8a42: 0x68b0,\n          0x8a43: 0x6d77,\n          0x8a44: 0x7070,\n          0x8a45: 0x754c,\n          0x8a46: 0x7686,\n          0x8a47: 0x7d75,\n          0x8a48: 0x82a5,\n          0x8a49: 0x87f9,\n          0x8a4a: 0x958b,\n          0x8a4b: 0x968e,\n          0x8a4c: 0x8c9d,\n          0x8a4d: 0x51f1,\n          0x8a4e: 0x52be,\n          0x8a4f: 0x5916,\n          0x8a50: 0x54b3,\n          0x8a51: 0x5bb3,\n          0x8a52: 0x5d16,\n          0x8a53: 0x6168,\n          0x8a54: 0x6982,\n          0x8a55: 0x6daf,\n          0x8a56: 0x788d,\n          0x8a57: 0x84cb,\n          0x8a58: 0x8857,\n          0x8a59: 0x8a72,\n          0x8a5a: 0x93a7,\n          0x8a5b: 0x9ab8,\n          0x8a5c: 0x6d6c,\n          0x8a5d: 0x99a8,\n          0x8a5e: 0x86d9,\n          0x8a5f: 0x57a3,\n          0x8a60: 0x67ff,\n          0x8a61: 0x86ce,\n          0x8a62: 0x920e,\n          0x8a63: 0x5283,\n          0x8a64: 0x5687,\n          0x8a65: 0x5404,\n          0x8a66: 0x5ed3,\n          0x8a67: 0x62e1,\n          0x8a68: 0x64b9,\n          0x8a69: 0x683c,\n          0x8a6a: 0x6838,\n          0x8a6b: 0x6bbb,\n          0x8a6c: 0x7372,\n          0x8a6d: 0x78ba,\n          0x8a6e: 0x7a6b,\n          0x8a6f: 0x899a,\n          0x8a70: 0x89d2,\n          0x8a71: 0x8d6b,\n          0x8a72: 0x8f03,\n          0x8a73: 0x90ed,\n          0x8a74: 0x95a3,\n          0x8a75: 0x9694,\n          0x8a76: 0x9769,\n          0x8a77: 0x5b66,\n          0x8a78: 0x5cb3,\n          0x8a79: 0x697d,\n          0x8a7a: 0x984d,\n          0x8a7b: 0x984e,\n          0x8a7c: 0x639b,\n          0x8a7d: 0x7b20,\n          0x8a7e: 0x6a2b,\n          0x8a80: 0x6a7f,\n          0x8a81: 0x68b6,\n          0x8a82: 0x9c0d,\n          0x8a83: 0x6f5f,\n          0x8a84: 0x5272,\n          0x8a85: 0x559d,\n          0x8a86: 0x6070,\n          0x8a87: 0x62ec,\n          0x8a88: 0x6d3b,\n          0x8a89: 0x6e07,\n          0x8a8a: 0x6ed1,\n          0x8a8b: 0x845b,\n          0x8a8c: 0x8910,\n          0x8a8d: 0x8f44,\n          0x8a8e: 0x4e14,\n          0x8a8f: 0x9c39,\n          0x8a90: 0x53f6,\n          0x8a91: 0x691b,\n          0x8a92: 0x6a3a,\n          0x8a93: 0x9784,\n          0x8a94: 0x682a,\n          0x8a95: 0x515c,\n          0x8a96: 0x7ac3,\n          0x8a97: 0x84b2,\n          0x8a98: 0x91dc,\n          0x8a99: 0x938c,\n          0x8a9a: 0x565b,\n          0x8a9b: 0x9d28,\n          0x8a9c: 0x6822,\n          0x8a9d: 0x8305,\n          0x8a9e: 0x8431,\n          0x8a9f: 0x7ca5,\n          0x8aa0: 0x5208,\n          0x8aa1: 0x82c5,\n          0x8aa2: 0x74e6,\n          0x8aa3: 0x4e7e,\n          0x8aa4: 0x4f83,\n          0x8aa5: 0x51a0,\n          0x8aa6: 0x5bd2,\n          0x8aa7: 0x520a,\n          0x8aa8: 0x52d8,\n          0x8aa9: 0x52e7,\n          0x8aaa: 0x5dfb,\n          0x8aab: 0x559a,\n          0x8aac: 0x582a,\n          0x8aad: 0x59e6,\n          0x8aae: 0x5b8c,\n          0x8aaf: 0x5b98,\n          0x8ab0: 0x5bdb,\n          0x8ab1: 0x5e72,\n          0x8ab2: 0x5e79,\n          0x8ab3: 0x60a3,\n          0x8ab4: 0x611f,\n          0x8ab5: 0x6163,\n          0x8ab6: 0x61be,\n          0x8ab7: 0x63db,\n          0x8ab8: 0x6562,\n          0x8ab9: 0x67d1,\n          0x8aba: 0x6853,\n          0x8abb: 0x68fa,\n          0x8abc: 0x6b3e,\n          0x8abd: 0x6b53,\n          0x8abe: 0x6c57,\n          0x8abf: 0x6f22,\n          0x8ac0: 0x6f97,\n          0x8ac1: 0x6f45,\n          0x8ac2: 0x74b0,\n          0x8ac3: 0x7518,\n          0x8ac4: 0x76e3,\n          0x8ac5: 0x770b,\n          0x8ac6: 0x7aff,\n          0x8ac7: 0x7ba1,\n          0x8ac8: 0x7c21,\n          0x8ac9: 0x7de9,\n          0x8aca: 0x7f36,\n          0x8acb: 0x7ff0,\n          0x8acc: 0x809d,\n          0x8acd: 0x8266,\n          0x8ace: 0x839e,\n          0x8acf: 0x89b3,\n          0x8ad0: 0x8acc,\n          0x8ad1: 0x8cab,\n          0x8ad2: 0x9084,\n          0x8ad3: 0x9451,\n          0x8ad4: 0x9593,\n          0x8ad5: 0x9591,\n          0x8ad6: 0x95a2,\n          0x8ad7: 0x9665,\n          0x8ad8: 0x97d3,\n          0x8ad9: 0x9928,\n          0x8ada: 0x8218,\n          0x8adb: 0x4e38,\n          0x8adc: 0x542b,\n          0x8add: 0x5cb8,\n          0x8ade: 0x5dcc,\n          0x8adf: 0x73a9,\n          0x8ae0: 0x764c,\n          0x8ae1: 0x773c,\n          0x8ae2: 0x5ca9,\n          0x8ae3: 0x7feb,\n          0x8ae4: 0x8d0b,\n          0x8ae5: 0x96c1,\n          0x8ae6: 0x9811,\n          0x8ae7: 0x9854,\n          0x8ae8: 0x9858,\n          0x8ae9: 0x4f01,\n          0x8aea: 0x4f0e,\n          0x8aeb: 0x5371,\n          0x8aec: 0x559c,\n          0x8aed: 0x5668,\n          0x8aee: 0x57fa,\n          0x8aef: 0x5947,\n          0x8af0: 0x5b09,\n          0x8af1: 0x5bc4,\n          0x8af2: 0x5c90,\n          0x8af3: 0x5e0c,\n          0x8af4: 0x5e7e,\n          0x8af5: 0x5fcc,\n          0x8af6: 0x63ee,\n          0x8af7: 0x673a,\n          0x8af8: 0x65d7,\n          0x8af9: 0x65e2,\n          0x8afa: 0x671f,\n          0x8afb: 0x68cb,\n          0x8afc: 0x68c4,\n          0x8b40: 0x6a5f,\n          0x8b41: 0x5e30,\n          0x8b42: 0x6bc5,\n          0x8b43: 0x6c17,\n          0x8b44: 0x6c7d,\n          0x8b45: 0x757f,\n          0x8b46: 0x7948,\n          0x8b47: 0x5b63,\n          0x8b48: 0x7a00,\n          0x8b49: 0x7d00,\n          0x8b4a: 0x5fbd,\n          0x8b4b: 0x898f,\n          0x8b4c: 0x8a18,\n          0x8b4d: 0x8cb4,\n          0x8b4e: 0x8d77,\n          0x8b4f: 0x8ecc,\n          0x8b50: 0x8f1d,\n          0x8b51: 0x98e2,\n          0x8b52: 0x9a0e,\n          0x8b53: 0x9b3c,\n          0x8b54: 0x4e80,\n          0x8b55: 0x507d,\n          0x8b56: 0x5100,\n          0x8b57: 0x5993,\n          0x8b58: 0x5b9c,\n          0x8b59: 0x622f,\n          0x8b5a: 0x6280,\n          0x8b5b: 0x64ec,\n          0x8b5c: 0x6b3a,\n          0x8b5d: 0x72a0,\n          0x8b5e: 0x7591,\n          0x8b5f: 0x7947,\n          0x8b60: 0x7fa9,\n          0x8b61: 0x87fb,\n          0x8b62: 0x8abc,\n          0x8b63: 0x8b70,\n          0x8b64: 0x63ac,\n          0x8b65: 0x83ca,\n          0x8b66: 0x97a0,\n          0x8b67: 0x5409,\n          0x8b68: 0x5403,\n          0x8b69: 0x55ab,\n          0x8b6a: 0x6854,\n          0x8b6b: 0x6a58,\n          0x8b6c: 0x8a70,\n          0x8b6d: 0x7827,\n          0x8b6e: 0x6775,\n          0x8b6f: 0x9ecd,\n          0x8b70: 0x5374,\n          0x8b71: 0x5ba2,\n          0x8b72: 0x811a,\n          0x8b73: 0x8650,\n          0x8b74: 0x9006,\n          0x8b75: 0x4e18,\n          0x8b76: 0x4e45,\n          0x8b77: 0x4ec7,\n          0x8b78: 0x4f11,\n          0x8b79: 0x53ca,\n          0x8b7a: 0x5438,\n          0x8b7b: 0x5bae,\n          0x8b7c: 0x5f13,\n          0x8b7d: 0x6025,\n          0x8b7e: 0x6551,\n          0x8b80: 0x673d,\n          0x8b81: 0x6c42,\n          0x8b82: 0x6c72,\n          0x8b83: 0x6ce3,\n          0x8b84: 0x7078,\n          0x8b85: 0x7403,\n          0x8b86: 0x7a76,\n          0x8b87: 0x7aae,\n          0x8b88: 0x7b08,\n          0x8b89: 0x7d1a,\n          0x8b8a: 0x7cfe,\n          0x8b8b: 0x7d66,\n          0x8b8c: 0x65e7,\n          0x8b8d: 0x725b,\n          0x8b8e: 0x53bb,\n          0x8b8f: 0x5c45,\n          0x8b90: 0x5de8,\n          0x8b91: 0x62d2,\n          0x8b92: 0x62e0,\n          0x8b93: 0x6319,\n          0x8b94: 0x6e20,\n          0x8b95: 0x865a,\n          0x8b96: 0x8a31,\n          0x8b97: 0x8ddd,\n          0x8b98: 0x92f8,\n          0x8b99: 0x6f01,\n          0x8b9a: 0x79a6,\n          0x8b9b: 0x9b5a,\n          0x8b9c: 0x4ea8,\n          0x8b9d: 0x4eab,\n          0x8b9e: 0x4eac,\n          0x8b9f: 0x4f9b,\n          0x8ba0: 0x4fa0,\n          0x8ba1: 0x50d1,\n          0x8ba2: 0x5147,\n          0x8ba3: 0x7af6,\n          0x8ba4: 0x5171,\n          0x8ba5: 0x51f6,\n          0x8ba6: 0x5354,\n          0x8ba7: 0x5321,\n          0x8ba8: 0x537f,\n          0x8ba9: 0x53eb,\n          0x8baa: 0x55ac,\n          0x8bab: 0x5883,\n          0x8bac: 0x5ce1,\n          0x8bad: 0x5f37,\n          0x8bae: 0x5f4a,\n          0x8baf: 0x602f,\n          0x8bb0: 0x6050,\n          0x8bb1: 0x606d,\n          0x8bb2: 0x631f,\n          0x8bb3: 0x6559,\n          0x8bb4: 0x6a4b,\n          0x8bb5: 0x6cc1,\n          0x8bb6: 0x72c2,\n          0x8bb7: 0x72ed,\n          0x8bb8: 0x77ef,\n          0x8bb9: 0x80f8,\n          0x8bba: 0x8105,\n          0x8bbb: 0x8208,\n          0x8bbc: 0x854e,\n          0x8bbd: 0x90f7,\n          0x8bbe: 0x93e1,\n          0x8bbf: 0x97ff,\n          0x8bc0: 0x9957,\n          0x8bc1: 0x9a5a,\n          0x8bc2: 0x4ef0,\n          0x8bc3: 0x51dd,\n          0x8bc4: 0x5c2d,\n          0x8bc5: 0x6681,\n          0x8bc6: 0x696d,\n          0x8bc7: 0x5c40,\n          0x8bc8: 0x66f2,\n          0x8bc9: 0x6975,\n          0x8bca: 0x7389,\n          0x8bcb: 0x6850,\n          0x8bcc: 0x7c81,\n          0x8bcd: 0x50c5,\n          0x8bce: 0x52e4,\n          0x8bcf: 0x5747,\n          0x8bd0: 0x5dfe,\n          0x8bd1: 0x9326,\n          0x8bd2: 0x65a4,\n          0x8bd3: 0x6b23,\n          0x8bd4: 0x6b3d,\n          0x8bd5: 0x7434,\n          0x8bd6: 0x7981,\n          0x8bd7: 0x79bd,\n          0x8bd8: 0x7b4b,\n          0x8bd9: 0x7dca,\n          0x8bda: 0x82b9,\n          0x8bdb: 0x83cc,\n          0x8bdc: 0x887f,\n          0x8bdd: 0x895f,\n          0x8bde: 0x8b39,\n          0x8bdf: 0x8fd1,\n          0x8be0: 0x91d1,\n          0x8be1: 0x541f,\n          0x8be2: 0x9280,\n          0x8be3: 0x4e5d,\n          0x8be4: 0x5036,\n          0x8be5: 0x53e5,\n          0x8be6: 0x533a,\n          0x8be7: 0x72d7,\n          0x8be8: 0x7396,\n          0x8be9: 0x77e9,\n          0x8bea: 0x82e6,\n          0x8beb: 0x8eaf,\n          0x8bec: 0x99c6,\n          0x8bed: 0x99c8,\n          0x8bee: 0x99d2,\n          0x8bef: 0x5177,\n          0x8bf0: 0x611a,\n          0x8bf1: 0x865e,\n          0x8bf2: 0x55b0,\n          0x8bf3: 0x7a7a,\n          0x8bf4: 0x5076,\n          0x8bf5: 0x5bd3,\n          0x8bf6: 0x9047,\n          0x8bf7: 0x9685,\n          0x8bf8: 0x4e32,\n          0x8bf9: 0x6adb,\n          0x8bfa: 0x91e7,\n          0x8bfb: 0x5c51,\n          0x8bfc: 0x5c48,\n          0x8c40: 0x6398,\n          0x8c41: 0x7a9f,\n          0x8c42: 0x6c93,\n          0x8c43: 0x9774,\n          0x8c44: 0x8f61,\n          0x8c45: 0x7aaa,\n          0x8c46: 0x718a,\n          0x8c47: 0x9688,\n          0x8c48: 0x7c82,\n          0x8c49: 0x6817,\n          0x8c4a: 0x7e70,\n          0x8c4b: 0x6851,\n          0x8c4c: 0x936c,\n          0x8c4d: 0x52f2,\n          0x8c4e: 0x541b,\n          0x8c4f: 0x85ab,\n          0x8c50: 0x8a13,\n          0x8c51: 0x7fa4,\n          0x8c52: 0x8ecd,\n          0x8c53: 0x90e1,\n          0x8c54: 0x5366,\n          0x8c55: 0x8888,\n          0x8c56: 0x7941,\n          0x8c57: 0x4fc2,\n          0x8c58: 0x50be,\n          0x8c59: 0x5211,\n          0x8c5a: 0x5144,\n          0x8c5b: 0x5553,\n          0x8c5c: 0x572d,\n          0x8c5d: 0x73ea,\n          0x8c5e: 0x578b,\n          0x8c5f: 0x5951,\n          0x8c60: 0x5f62,\n          0x8c61: 0x5f84,\n          0x8c62: 0x6075,\n          0x8c63: 0x6176,\n          0x8c64: 0x6167,\n          0x8c65: 0x61a9,\n          0x8c66: 0x63b2,\n          0x8c67: 0x643a,\n          0x8c68: 0x656c,\n          0x8c69: 0x666f,\n          0x8c6a: 0x6842,\n          0x8c6b: 0x6e13,\n          0x8c6c: 0x7566,\n          0x8c6d: 0x7a3d,\n          0x8c6e: 0x7cfb,\n          0x8c6f: 0x7d4c,\n          0x8c70: 0x7d99,\n          0x8c71: 0x7e4b,\n          0x8c72: 0x7f6b,\n          0x8c73: 0x830e,\n          0x8c74: 0x834a,\n          0x8c75: 0x86cd,\n          0x8c76: 0x8a08,\n          0x8c77: 0x8a63,\n          0x8c78: 0x8b66,\n          0x8c79: 0x8efd,\n          0x8c7a: 0x981a,\n          0x8c7b: 0x9d8f,\n          0x8c7c: 0x82b8,\n          0x8c7d: 0x8fce,\n          0x8c7e: 0x9be8,\n          0x8c80: 0x5287,\n          0x8c81: 0x621f,\n          0x8c82: 0x6483,\n          0x8c83: 0x6fc0,\n          0x8c84: 0x9699,\n          0x8c85: 0x6841,\n          0x8c86: 0x5091,\n          0x8c87: 0x6b20,\n          0x8c88: 0x6c7a,\n          0x8c89: 0x6f54,\n          0x8c8a: 0x7a74,\n          0x8c8b: 0x7d50,\n          0x8c8c: 0x8840,\n          0x8c8d: 0x8a23,\n          0x8c8e: 0x6708,\n          0x8c8f: 0x4ef6,\n          0x8c90: 0x5039,\n          0x8c91: 0x5026,\n          0x8c92: 0x5065,\n          0x8c93: 0x517c,\n          0x8c94: 0x5238,\n          0x8c95: 0x5263,\n          0x8c96: 0x55a7,\n          0x8c97: 0x570f,\n          0x8c98: 0x5805,\n          0x8c99: 0x5acc,\n          0x8c9a: 0x5efa,\n          0x8c9b: 0x61b2,\n          0x8c9c: 0x61f8,\n          0x8c9d: 0x62f3,\n          0x8c9e: 0x6372,\n          0x8c9f: 0x691c,\n          0x8ca0: 0x6a29,\n          0x8ca1: 0x727d,\n          0x8ca2: 0x72ac,\n          0x8ca3: 0x732e,\n          0x8ca4: 0x7814,\n          0x8ca5: 0x786f,\n          0x8ca6: 0x7d79,\n          0x8ca7: 0x770c,\n          0x8ca8: 0x80a9,\n          0x8ca9: 0x898b,\n          0x8caa: 0x8b19,\n          0x8cab: 0x8ce2,\n          0x8cac: 0x8ed2,\n          0x8cad: 0x9063,\n          0x8cae: 0x9375,\n          0x8caf: 0x967a,\n          0x8cb0: 0x9855,\n          0x8cb1: 0x9a13,\n          0x8cb2: 0x9e78,\n          0x8cb3: 0x5143,\n          0x8cb4: 0x539f,\n          0x8cb5: 0x53b3,\n          0x8cb6: 0x5e7b,\n          0x8cb7: 0x5f26,\n          0x8cb8: 0x6e1b,\n          0x8cb9: 0x6e90,\n          0x8cba: 0x7384,\n          0x8cbb: 0x73fe,\n          0x8cbc: 0x7d43,\n          0x8cbd: 0x8237,\n          0x8cbe: 0x8a00,\n          0x8cbf: 0x8afa,\n          0x8cc0: 0x9650,\n          0x8cc1: 0x4e4e,\n          0x8cc2: 0x500b,\n          0x8cc3: 0x53e4,\n          0x8cc4: 0x547c,\n          0x8cc5: 0x56fa,\n          0x8cc6: 0x59d1,\n          0x8cc7: 0x5b64,\n          0x8cc8: 0x5df1,\n          0x8cc9: 0x5eab,\n          0x8cca: 0x5f27,\n          0x8ccb: 0x6238,\n          0x8ccc: 0x6545,\n          0x8ccd: 0x67af,\n          0x8cce: 0x6e56,\n          0x8ccf: 0x72d0,\n          0x8cd0: 0x7cca,\n          0x8cd1: 0x88b4,\n          0x8cd2: 0x80a1,\n          0x8cd3: 0x80e1,\n          0x8cd4: 0x83f0,\n          0x8cd5: 0x864e,\n          0x8cd6: 0x8a87,\n          0x8cd7: 0x8de8,\n          0x8cd8: 0x9237,\n          0x8cd9: 0x96c7,\n          0x8cda: 0x9867,\n          0x8cdb: 0x9f13,\n          0x8cdc: 0x4e94,\n          0x8cdd: 0x4e92,\n          0x8cde: 0x4f0d,\n          0x8cdf: 0x5348,\n          0x8ce0: 0x5449,\n          0x8ce1: 0x543e,\n          0x8ce2: 0x5a2f,\n          0x8ce3: 0x5f8c,\n          0x8ce4: 0x5fa1,\n          0x8ce5: 0x609f,\n          0x8ce6: 0x68a7,\n          0x8ce7: 0x6a8e,\n          0x8ce8: 0x745a,\n          0x8ce9: 0x7881,\n          0x8cea: 0x8a9e,\n          0x8ceb: 0x8aa4,\n          0x8cec: 0x8b77,\n          0x8ced: 0x9190,\n          0x8cee: 0x4e5e,\n          0x8cef: 0x9bc9,\n          0x8cf0: 0x4ea4,\n          0x8cf1: 0x4f7c,\n          0x8cf2: 0x4faf,\n          0x8cf3: 0x5019,\n          0x8cf4: 0x5016,\n          0x8cf5: 0x5149,\n          0x8cf6: 0x516c,\n          0x8cf7: 0x529f,\n          0x8cf8: 0x52b9,\n          0x8cf9: 0x52fe,\n          0x8cfa: 0x539a,\n          0x8cfb: 0x53e3,\n          0x8cfc: 0x5411,\n          0x8d40: 0x540e,\n          0x8d41: 0x5589,\n          0x8d42: 0x5751,\n          0x8d43: 0x57a2,\n          0x8d44: 0x597d,\n          0x8d45: 0x5b54,\n          0x8d46: 0x5b5d,\n          0x8d47: 0x5b8f,\n          0x8d48: 0x5de5,\n          0x8d49: 0x5de7,\n          0x8d4a: 0x5df7,\n          0x8d4b: 0x5e78,\n          0x8d4c: 0x5e83,\n          0x8d4d: 0x5e9a,\n          0x8d4e: 0x5eb7,\n          0x8d4f: 0x5f18,\n          0x8d50: 0x6052,\n          0x8d51: 0x614c,\n          0x8d52: 0x6297,\n          0x8d53: 0x62d8,\n          0x8d54: 0x63a7,\n          0x8d55: 0x653b,\n          0x8d56: 0x6602,\n          0x8d57: 0x6643,\n          0x8d58: 0x66f4,\n          0x8d59: 0x676d,\n          0x8d5a: 0x6821,\n          0x8d5b: 0x6897,\n          0x8d5c: 0x69cb,\n          0x8d5d: 0x6c5f,\n          0x8d5e: 0x6d2a,\n          0x8d5f: 0x6d69,\n          0x8d60: 0x6e2f,\n          0x8d61: 0x6e9d,\n          0x8d62: 0x7532,\n          0x8d63: 0x7687,\n          0x8d64: 0x786c,\n          0x8d65: 0x7a3f,\n          0x8d66: 0x7ce0,\n          0x8d67: 0x7d05,\n          0x8d68: 0x7d18,\n          0x8d69: 0x7d5e,\n          0x8d6a: 0x7db1,\n          0x8d6b: 0x8015,\n          0x8d6c: 0x8003,\n          0x8d6d: 0x80af,\n          0x8d6e: 0x80b1,\n          0x8d6f: 0x8154,\n          0x8d70: 0x818f,\n          0x8d71: 0x822a,\n          0x8d72: 0x8352,\n          0x8d73: 0x884c,\n          0x8d74: 0x8861,\n          0x8d75: 0x8b1b,\n          0x8d76: 0x8ca2,\n          0x8d77: 0x8cfc,\n          0x8d78: 0x90ca,\n          0x8d79: 0x9175,\n          0x8d7a: 0x9271,\n          0x8d7b: 0x783f,\n          0x8d7c: 0x92fc,\n          0x8d7d: 0x95a4,\n          0x8d7e: 0x964d,\n          0x8d80: 0x9805,\n          0x8d81: 0x9999,\n          0x8d82: 0x9ad8,\n          0x8d83: 0x9d3b,\n          0x8d84: 0x525b,\n          0x8d85: 0x52ab,\n          0x8d86: 0x53f7,\n          0x8d87: 0x5408,\n          0x8d88: 0x58d5,\n          0x8d89: 0x62f7,\n          0x8d8a: 0x6fe0,\n          0x8d8b: 0x8c6a,\n          0x8d8c: 0x8f5f,\n          0x8d8d: 0x9eb9,\n          0x8d8e: 0x514b,\n          0x8d8f: 0x523b,\n          0x8d90: 0x544a,\n          0x8d91: 0x56fd,\n          0x8d92: 0x7a40,\n          0x8d93: 0x9177,\n          0x8d94: 0x9d60,\n          0x8d95: 0x9ed2,\n          0x8d96: 0x7344,\n          0x8d97: 0x6f09,\n          0x8d98: 0x8170,\n          0x8d99: 0x7511,\n          0x8d9a: 0x5ffd,\n          0x8d9b: 0x60da,\n          0x8d9c: 0x9aa8,\n          0x8d9d: 0x72db,\n          0x8d9e: 0x8fbc,\n          0x8d9f: 0x6b64,\n          0x8da0: 0x9803,\n          0x8da1: 0x4eca,\n          0x8da2: 0x56f0,\n          0x8da3: 0x5764,\n          0x8da4: 0x58be,\n          0x8da5: 0x5a5a,\n          0x8da6: 0x6068,\n          0x8da7: 0x61c7,\n          0x8da8: 0x660f,\n          0x8da9: 0x6606,\n          0x8daa: 0x6839,\n          0x8dab: 0x68b1,\n          0x8dac: 0x6df7,\n          0x8dad: 0x75d5,\n          0x8dae: 0x7d3a,\n          0x8daf: 0x826e,\n          0x8db0: 0x9b42,\n          0x8db1: 0x4e9b,\n          0x8db2: 0x4f50,\n          0x8db3: 0x53c9,\n          0x8db4: 0x5506,\n          0x8db5: 0x5d6f,\n          0x8db6: 0x5de6,\n          0x8db7: 0x5dee,\n          0x8db8: 0x67fb,\n          0x8db9: 0x6c99,\n          0x8dba: 0x7473,\n          0x8dbb: 0x7802,\n          0x8dbc: 0x8a50,\n          0x8dbd: 0x9396,\n          0x8dbe: 0x88df,\n          0x8dbf: 0x5750,\n          0x8dc0: 0x5ea7,\n          0x8dc1: 0x632b,\n          0x8dc2: 0x50b5,\n          0x8dc3: 0x50ac,\n          0x8dc4: 0x518d,\n          0x8dc5: 0x6700,\n          0x8dc6: 0x54c9,\n          0x8dc7: 0x585e,\n          0x8dc8: 0x59bb,\n          0x8dc9: 0x5bb0,\n          0x8dca: 0x5f69,\n          0x8dcb: 0x624d,\n          0x8dcc: 0x63a1,\n          0x8dcd: 0x683d,\n          0x8dce: 0x6b73,\n          0x8dcf: 0x6e08,\n          0x8dd0: 0x707d,\n          0x8dd1: 0x91c7,\n          0x8dd2: 0x7280,\n          0x8dd3: 0x7815,\n          0x8dd4: 0x7826,\n          0x8dd5: 0x796d,\n          0x8dd6: 0x658e,\n          0x8dd7: 0x7d30,\n          0x8dd8: 0x83dc,\n          0x8dd9: 0x88c1,\n          0x8dda: 0x8f09,\n          0x8ddb: 0x969b,\n          0x8ddc: 0x5264,\n          0x8ddd: 0x5728,\n          0x8dde: 0x6750,\n          0x8ddf: 0x7f6a,\n          0x8de0: 0x8ca1,\n          0x8de1: 0x51b4,\n          0x8de2: 0x5742,\n          0x8de3: 0x962a,\n          0x8de4: 0x583a,\n          0x8de5: 0x698a,\n          0x8de6: 0x80b4,\n          0x8de7: 0x54b2,\n          0x8de8: 0x5d0e,\n          0x8de9: 0x57fc,\n          0x8dea: 0x7895,\n          0x8deb: 0x9dfa,\n          0x8dec: 0x4f5c,\n          0x8ded: 0x524a,\n          0x8dee: 0x548b,\n          0x8def: 0x643e,\n          0x8df0: 0x6628,\n          0x8df1: 0x6714,\n          0x8df2: 0x67f5,\n          0x8df3: 0x7a84,\n          0x8df4: 0x7b56,\n          0x8df5: 0x7d22,\n          0x8df6: 0x932f,\n          0x8df7: 0x685c,\n          0x8df8: 0x9bad,\n          0x8df9: 0x7b39,\n          0x8dfa: 0x5319,\n          0x8dfb: 0x518a,\n          0x8dfc: 0x5237,\n          0x8e40: 0x5bdf,\n          0x8e41: 0x62f6,\n          0x8e42: 0x64ae,\n          0x8e43: 0x64e6,\n          0x8e44: 0x672d,\n          0x8e45: 0x6bba,\n          0x8e46: 0x85a9,\n          0x8e47: 0x96d1,\n          0x8e48: 0x7690,\n          0x8e49: 0x9bd6,\n          0x8e4a: 0x634c,\n          0x8e4b: 0x9306,\n          0x8e4c: 0x9bab,\n          0x8e4d: 0x76bf,\n          0x8e4e: 0x6652,\n          0x8e4f: 0x4e09,\n          0x8e50: 0x5098,\n          0x8e51: 0x53c2,\n          0x8e52: 0x5c71,\n          0x8e53: 0x60e8,\n          0x8e54: 0x6492,\n          0x8e55: 0x6563,\n          0x8e56: 0x685f,\n          0x8e57: 0x71e6,\n          0x8e58: 0x73ca,\n          0x8e59: 0x7523,\n          0x8e5a: 0x7b97,\n          0x8e5b: 0x7e82,\n          0x8e5c: 0x8695,\n          0x8e5d: 0x8b83,\n          0x8e5e: 0x8cdb,\n          0x8e5f: 0x9178,\n          0x8e60: 0x9910,\n          0x8e61: 0x65ac,\n          0x8e62: 0x66ab,\n          0x8e63: 0x6b8b,\n          0x8e64: 0x4ed5,\n          0x8e65: 0x4ed4,\n          0x8e66: 0x4f3a,\n          0x8e67: 0x4f7f,\n          0x8e68: 0x523a,\n          0x8e69: 0x53f8,\n          0x8e6a: 0x53f2,\n          0x8e6b: 0x55e3,\n          0x8e6c: 0x56db,\n          0x8e6d: 0x58eb,\n          0x8e6e: 0x59cb,\n          0x8e6f: 0x59c9,\n          0x8e70: 0x59ff,\n          0x8e71: 0x5b50,\n          0x8e72: 0x5c4d,\n          0x8e73: 0x5e02,\n          0x8e74: 0x5e2b,\n          0x8e75: 0x5fd7,\n          0x8e76: 0x601d,\n          0x8e77: 0x6307,\n          0x8e78: 0x652f,\n          0x8e79: 0x5b5c,\n          0x8e7a: 0x65af,\n          0x8e7b: 0x65bd,\n          0x8e7c: 0x65e8,\n          0x8e7d: 0x679d,\n          0x8e7e: 0x6b62,\n          0x8e80: 0x6b7b,\n          0x8e81: 0x6c0f,\n          0x8e82: 0x7345,\n          0x8e83: 0x7949,\n          0x8e84: 0x79c1,\n          0x8e85: 0x7cf8,\n          0x8e86: 0x7d19,\n          0x8e87: 0x7d2b,\n          0x8e88: 0x80a2,\n          0x8e89: 0x8102,\n          0x8e8a: 0x81f3,\n          0x8e8b: 0x8996,\n          0x8e8c: 0x8a5e,\n          0x8e8d: 0x8a69,\n          0x8e8e: 0x8a66,\n          0x8e8f: 0x8a8c,\n          0x8e90: 0x8aee,\n          0x8e91: 0x8cc7,\n          0x8e92: 0x8cdc,\n          0x8e93: 0x96cc,\n          0x8e94: 0x98fc,\n          0x8e95: 0x6b6f,\n          0x8e96: 0x4e8b,\n          0x8e97: 0x4f3c,\n          0x8e98: 0x4f8d,\n          0x8e99: 0x5150,\n          0x8e9a: 0x5b57,\n          0x8e9b: 0x5bfa,\n          0x8e9c: 0x6148,\n          0x8e9d: 0x6301,\n          0x8e9e: 0x6642,\n          0x8e9f: 0x6b21,\n          0x8ea0: 0x6ecb,\n          0x8ea1: 0x6cbb,\n          0x8ea2: 0x723e,\n          0x8ea3: 0x74bd,\n          0x8ea4: 0x75d4,\n          0x8ea5: 0x78c1,\n          0x8ea6: 0x793a,\n          0x8ea7: 0x800c,\n          0x8ea8: 0x8033,\n          0x8ea9: 0x81ea,\n          0x8eaa: 0x8494,\n          0x8eab: 0x8f9e,\n          0x8eac: 0x6c50,\n          0x8ead: 0x9e7f,\n          0x8eae: 0x5f0f,\n          0x8eaf: 0x8b58,\n          0x8eb0: 0x9d2b,\n          0x8eb1: 0x7afa,\n          0x8eb2: 0x8ef8,\n          0x8eb3: 0x5b8d,\n          0x8eb4: 0x96eb,\n          0x8eb5: 0x4e03,\n          0x8eb6: 0x53f1,\n          0x8eb7: 0x57f7,\n          0x8eb8: 0x5931,\n          0x8eb9: 0x5ac9,\n          0x8eba: 0x5ba4,\n          0x8ebb: 0x6089,\n          0x8ebc: 0x6e7f,\n          0x8ebd: 0x6f06,\n          0x8ebe: 0x75be,\n          0x8ebf: 0x8cea,\n          0x8ec0: 0x5b9f,\n          0x8ec1: 0x8500,\n          0x8ec2: 0x7be0,\n          0x8ec3: 0x5072,\n          0x8ec4: 0x67f4,\n          0x8ec5: 0x829d,\n          0x8ec6: 0x5c61,\n          0x8ec7: 0x854a,\n          0x8ec8: 0x7e1e,\n          0x8ec9: 0x820e,\n          0x8eca: 0x5199,\n          0x8ecb: 0x5c04,\n          0x8ecc: 0x6368,\n          0x8ecd: 0x8d66,\n          0x8ece: 0x659c,\n          0x8ecf: 0x716e,\n          0x8ed0: 0x793e,\n          0x8ed1: 0x7d17,\n          0x8ed2: 0x8005,\n          0x8ed3: 0x8b1d,\n          0x8ed4: 0x8eca,\n          0x8ed5: 0x906e,\n          0x8ed6: 0x86c7,\n          0x8ed7: 0x90aa,\n          0x8ed8: 0x501f,\n          0x8ed9: 0x52fa,\n          0x8eda: 0x5c3a,\n          0x8edb: 0x6753,\n          0x8edc: 0x707c,\n          0x8edd: 0x7235,\n          0x8ede: 0x914c,\n          0x8edf: 0x91c8,\n          0x8ee0: 0x932b,\n          0x8ee1: 0x82e5,\n          0x8ee2: 0x5bc2,\n          0x8ee3: 0x5f31,\n          0x8ee4: 0x60f9,\n          0x8ee5: 0x4e3b,\n          0x8ee6: 0x53d6,\n          0x8ee7: 0x5b88,\n          0x8ee8: 0x624b,\n          0x8ee9: 0x6731,\n          0x8eea: 0x6b8a,\n          0x8eeb: 0x72e9,\n          0x8eec: 0x73e0,\n          0x8eed: 0x7a2e,\n          0x8eee: 0x816b,\n          0x8eef: 0x8da3,\n          0x8ef0: 0x9152,\n          0x8ef1: 0x9996,\n          0x8ef2: 0x5112,\n          0x8ef3: 0x53d7,\n          0x8ef4: 0x546a,\n          0x8ef5: 0x5bff,\n          0x8ef6: 0x6388,\n          0x8ef7: 0x6a39,\n          0x8ef8: 0x7dac,\n          0x8ef9: 0x9700,\n          0x8efa: 0x56da,\n          0x8efb: 0x53ce,\n          0x8efc: 0x5468,\n          0x8f40: 0x5b97,\n          0x8f41: 0x5c31,\n          0x8f42: 0x5dde,\n          0x8f43: 0x4fee,\n          0x8f44: 0x6101,\n          0x8f45: 0x62fe,\n          0x8f46: 0x6d32,\n          0x8f47: 0x79c0,\n          0x8f48: 0x79cb,\n          0x8f49: 0x7d42,\n          0x8f4a: 0x7e4d,\n          0x8f4b: 0x7fd2,\n          0x8f4c: 0x81ed,\n          0x8f4d: 0x821f,\n          0x8f4e: 0x8490,\n          0x8f4f: 0x8846,\n          0x8f50: 0x8972,\n          0x8f51: 0x8b90,\n          0x8f52: 0x8e74,\n          0x8f53: 0x8f2f,\n          0x8f54: 0x9031,\n          0x8f55: 0x914b,\n          0x8f56: 0x916c,\n          0x8f57: 0x96c6,\n          0x8f58: 0x919c,\n          0x8f59: 0x4ec0,\n          0x8f5a: 0x4f4f,\n          0x8f5b: 0x5145,\n          0x8f5c: 0x5341,\n          0x8f5d: 0x5f93,\n          0x8f5e: 0x620e,\n          0x8f5f: 0x67d4,\n          0x8f60: 0x6c41,\n          0x8f61: 0x6e0b,\n          0x8f62: 0x7363,\n          0x8f63: 0x7e26,\n          0x8f64: 0x91cd,\n          0x8f65: 0x9283,\n          0x8f66: 0x53d4,\n          0x8f67: 0x5919,\n          0x8f68: 0x5bbf,\n          0x8f69: 0x6dd1,\n          0x8f6a: 0x795d,\n          0x8f6b: 0x7e2e,\n          0x8f6c: 0x7c9b,\n          0x8f6d: 0x587e,\n          0x8f6e: 0x719f,\n          0x8f6f: 0x51fa,\n          0x8f70: 0x8853,\n          0x8f71: 0x8ff0,\n          0x8f72: 0x4fca,\n          0x8f73: 0x5cfb,\n          0x8f74: 0x6625,\n          0x8f75: 0x77ac,\n          0x8f76: 0x7ae3,\n          0x8f77: 0x821c,\n          0x8f78: 0x99ff,\n          0x8f79: 0x51c6,\n          0x8f7a: 0x5faa,\n          0x8f7b: 0x65ec,\n          0x8f7c: 0x696f,\n          0x8f7d: 0x6b89,\n          0x8f7e: 0x6df3,\n          0x8f80: 0x6e96,\n          0x8f81: 0x6f64,\n          0x8f82: 0x76fe,\n          0x8f83: 0x7d14,\n          0x8f84: 0x5de1,\n          0x8f85: 0x9075,\n          0x8f86: 0x9187,\n          0x8f87: 0x9806,\n          0x8f88: 0x51e6,\n          0x8f89: 0x521d,\n          0x8f8a: 0x6240,\n          0x8f8b: 0x6691,\n          0x8f8c: 0x66d9,\n          0x8f8d: 0x6e1a,\n          0x8f8e: 0x5eb6,\n          0x8f8f: 0x7dd2,\n          0x8f90: 0x7f72,\n          0x8f91: 0x66f8,\n          0x8f92: 0x85af,\n          0x8f93: 0x85f7,\n          0x8f94: 0x8af8,\n          0x8f95: 0x52a9,\n          0x8f96: 0x53d9,\n          0x8f97: 0x5973,\n          0x8f98: 0x5e8f,\n          0x8f99: 0x5f90,\n          0x8f9a: 0x6055,\n          0x8f9b: 0x92e4,\n          0x8f9c: 0x9664,\n          0x8f9d: 0x50b7,\n          0x8f9e: 0x511f,\n          0x8f9f: 0x52dd,\n          0x8fa0: 0x5320,\n          0x8fa1: 0x5347,\n          0x8fa2: 0x53ec,\n          0x8fa3: 0x54e8,\n          0x8fa4: 0x5546,\n          0x8fa5: 0x5531,\n          0x8fa6: 0x5617,\n          0x8fa7: 0x5968,\n          0x8fa8: 0x59be,\n          0x8fa9: 0x5a3c,\n          0x8faa: 0x5bb5,\n          0x8fab: 0x5c06,\n          0x8fac: 0x5c0f,\n          0x8fad: 0x5c11,\n          0x8fae: 0x5c1a,\n          0x8faf: 0x5e84,\n          0x8fb0: 0x5e8a,\n          0x8fb1: 0x5ee0,\n          0x8fb2: 0x5f70,\n          0x8fb3: 0x627f,\n          0x8fb4: 0x6284,\n          0x8fb5: 0x62db,\n          0x8fb6: 0x638c,\n          0x8fb7: 0x6377,\n          0x8fb8: 0x6607,\n          0x8fb9: 0x660c,\n          0x8fba: 0x662d,\n          0x8fbb: 0x6676,\n          0x8fbc: 0x677e,\n          0x8fbd: 0x68a2,\n          0x8fbe: 0x6a1f,\n          0x8fbf: 0x6a35,\n          0x8fc0: 0x6cbc,\n          0x8fc1: 0x6d88,\n          0x8fc2: 0x6e09,\n          0x8fc3: 0x6e58,\n          0x8fc4: 0x713c,\n          0x8fc5: 0x7126,\n          0x8fc6: 0x7167,\n          0x8fc7: 0x75c7,\n          0x8fc8: 0x7701,\n          0x8fc9: 0x785d,\n          0x8fca: 0x7901,\n          0x8fcb: 0x7965,\n          0x8fcc: 0x79f0,\n          0x8fcd: 0x7ae0,\n          0x8fce: 0x7b11,\n          0x8fcf: 0x7ca7,\n          0x8fd0: 0x7d39,\n          0x8fd1: 0x8096,\n          0x8fd2: 0x83d6,\n          0x8fd3: 0x848b,\n          0x8fd4: 0x8549,\n          0x8fd5: 0x885d,\n          0x8fd6: 0x88f3,\n          0x8fd7: 0x8a1f,\n          0x8fd8: 0x8a3c,\n          0x8fd9: 0x8a54,\n          0x8fda: 0x8a73,\n          0x8fdb: 0x8c61,\n          0x8fdc: 0x8cde,\n          0x8fdd: 0x91a4,\n          0x8fde: 0x9266,\n          0x8fdf: 0x937e,\n          0x8fe0: 0x9418,\n          0x8fe1: 0x969c,\n          0x8fe2: 0x9798,\n          0x8fe3: 0x4e0a,\n          0x8fe4: 0x4e08,\n          0x8fe5: 0x4e1e,\n          0x8fe6: 0x4e57,\n          0x8fe7: 0x5197,\n          0x8fe8: 0x5270,\n          0x8fe9: 0x57ce,\n          0x8fea: 0x5834,\n          0x8feb: 0x58cc,\n          0x8fec: 0x5b22,\n          0x8fed: 0x5e38,\n          0x8fee: 0x60c5,\n          0x8fef: 0x64fe,\n          0x8ff0: 0x6761,\n          0x8ff1: 0x6756,\n          0x8ff2: 0x6d44,\n          0x8ff3: 0x72b6,\n          0x8ff4: 0x7573,\n          0x8ff5: 0x7a63,\n          0x8ff6: 0x84b8,\n          0x8ff7: 0x8b72,\n          0x8ff8: 0x91b8,\n          0x8ff9: 0x9320,\n          0x8ffa: 0x5631,\n          0x8ffb: 0x57f4,\n          0x8ffc: 0x98fe,\n          0x9040: 0x62ed,\n          0x9041: 0x690d,\n          0x9042: 0x6b96,\n          0x9043: 0x71ed,\n          0x9044: 0x7e54,\n          0x9045: 0x8077,\n          0x9046: 0x8272,\n          0x9047: 0x89e6,\n          0x9048: 0x98df,\n          0x9049: 0x8755,\n          0x904a: 0x8fb1,\n          0x904b: 0x5c3b,\n          0x904c: 0x4f38,\n          0x904d: 0x4fe1,\n          0x904e: 0x4fb5,\n          0x904f: 0x5507,\n          0x9050: 0x5a20,\n          0x9051: 0x5bdd,\n          0x9052: 0x5be9,\n          0x9053: 0x5fc3,\n          0x9054: 0x614e,\n          0x9055: 0x632f,\n          0x9056: 0x65b0,\n          0x9057: 0x664b,\n          0x9058: 0x68ee,\n          0x9059: 0x699b,\n          0x905a: 0x6d78,\n          0x905b: 0x6df1,\n          0x905c: 0x7533,\n          0x905d: 0x75b9,\n          0x905e: 0x771f,\n          0x905f: 0x795e,\n          0x9060: 0x79e6,\n          0x9061: 0x7d33,\n          0x9062: 0x81e3,\n          0x9063: 0x82af,\n          0x9064: 0x85aa,\n          0x9065: 0x89aa,\n          0x9066: 0x8a3a,\n          0x9067: 0x8eab,\n          0x9068: 0x8f9b,\n          0x9069: 0x9032,\n          0x906a: 0x91dd,\n          0x906b: 0x9707,\n          0x906c: 0x4eba,\n          0x906d: 0x4ec1,\n          0x906e: 0x5203,\n          0x906f: 0x5875,\n          0x9070: 0x58ec,\n          0x9071: 0x5c0b,\n          0x9072: 0x751a,\n          0x9073: 0x5c3d,\n          0x9074: 0x814e,\n          0x9075: 0x8a0a,\n          0x9076: 0x8fc5,\n          0x9077: 0x9663,\n          0x9078: 0x976d,\n          0x9079: 0x7b25,\n          0x907a: 0x8acf,\n          0x907b: 0x9808,\n          0x907c: 0x9162,\n          0x907d: 0x56f3,\n          0x907e: 0x53a8,\n          0x9080: 0x9017,\n          0x9081: 0x5439,\n          0x9082: 0x5782,\n          0x9083: 0x5e25,\n          0x9084: 0x63a8,\n          0x9085: 0x6c34,\n          0x9086: 0x708a,\n          0x9087: 0x7761,\n          0x9088: 0x7c8b,\n          0x9089: 0x7fe0,\n          0x908a: 0x8870,\n          0x908b: 0x9042,\n          0x908c: 0x9154,\n          0x908d: 0x9310,\n          0x908e: 0x9318,\n          0x908f: 0x968f,\n          0x9090: 0x745e,\n          0x9091: 0x9ac4,\n          0x9092: 0x5d07,\n          0x9093: 0x5d69,\n          0x9094: 0x6570,\n          0x9095: 0x67a2,\n          0x9096: 0x8da8,\n          0x9097: 0x96db,\n          0x9098: 0x636e,\n          0x9099: 0x6749,\n          0x909a: 0x6919,\n          0x909b: 0x83c5,\n          0x909c: 0x9817,\n          0x909d: 0x96c0,\n          0x909e: 0x88fe,\n          0x909f: 0x6f84,\n          0x90a0: 0x647a,\n          0x90a1: 0x5bf8,\n          0x90a2: 0x4e16,\n          0x90a3: 0x702c,\n          0x90a4: 0x755d,\n          0x90a5: 0x662f,\n          0x90a6: 0x51c4,\n          0x90a7: 0x5236,\n          0x90a8: 0x52e2,\n          0x90a9: 0x59d3,\n          0x90aa: 0x5f81,\n          0x90ab: 0x6027,\n          0x90ac: 0x6210,\n          0x90ad: 0x653f,\n          0x90ae: 0x6574,\n          0x90af: 0x661f,\n          0x90b0: 0x6674,\n          0x90b1: 0x68f2,\n          0x90b2: 0x6816,\n          0x90b3: 0x6b63,\n          0x90b4: 0x6e05,\n          0x90b5: 0x7272,\n          0x90b6: 0x751f,\n          0x90b7: 0x76db,\n          0x90b8: 0x7cbe,\n          0x90b9: 0x8056,\n          0x90ba: 0x58f0,\n          0x90bb: 0x88fd,\n          0x90bc: 0x897f,\n          0x90bd: 0x8aa0,\n          0x90be: 0x8a93,\n          0x90bf: 0x8acb,\n          0x90c0: 0x901d,\n          0x90c1: 0x9192,\n          0x90c2: 0x9752,\n          0x90c3: 0x9759,\n          0x90c4: 0x6589,\n          0x90c5: 0x7a0e,\n          0x90c6: 0x8106,\n          0x90c7: 0x96bb,\n          0x90c8: 0x5e2d,\n          0x90c9: 0x60dc,\n          0x90ca: 0x621a,\n          0x90cb: 0x65a5,\n          0x90cc: 0x6614,\n          0x90cd: 0x6790,\n          0x90ce: 0x77f3,\n          0x90cf: 0x7a4d,\n          0x90d0: 0x7c4d,\n          0x90d1: 0x7e3e,\n          0x90d2: 0x810a,\n          0x90d3: 0x8cac,\n          0x90d4: 0x8d64,\n          0x90d5: 0x8de1,\n          0x90d6: 0x8e5f,\n          0x90d7: 0x78a9,\n          0x90d8: 0x5207,\n          0x90d9: 0x62d9,\n          0x90da: 0x63a5,\n          0x90db: 0x6442,\n          0x90dc: 0x6298,\n          0x90dd: 0x8a2d,\n          0x90de: 0x7a83,\n          0x90df: 0x7bc0,\n          0x90e0: 0x8aac,\n          0x90e1: 0x96ea,\n          0x90e2: 0x7d76,\n          0x90e3: 0x820c,\n          0x90e4: 0x8749,\n          0x90e5: 0x4ed9,\n          0x90e6: 0x5148,\n          0x90e7: 0x5343,\n          0x90e8: 0x5360,\n          0x90e9: 0x5ba3,\n          0x90ea: 0x5c02,\n          0x90eb: 0x5c16,\n          0x90ec: 0x5ddd,\n          0x90ed: 0x6226,\n          0x90ee: 0x6247,\n          0x90ef: 0x64b0,\n          0x90f0: 0x6813,\n          0x90f1: 0x6834,\n          0x90f2: 0x6cc9,\n          0x90f3: 0x6d45,\n          0x90f4: 0x6d17,\n          0x90f5: 0x67d3,\n          0x90f6: 0x6f5c,\n          0x90f7: 0x714e,\n          0x90f8: 0x717d,\n          0x90f9: 0x65cb,\n          0x90fa: 0x7a7f,\n          0x90fb: 0x7bad,\n          0x90fc: 0x7dda,\n          0x9140: 0x7e4a,\n          0x9141: 0x7fa8,\n          0x9142: 0x817a,\n          0x9143: 0x821b,\n          0x9144: 0x8239,\n          0x9145: 0x85a6,\n          0x9146: 0x8a6e,\n          0x9147: 0x8cce,\n          0x9148: 0x8df5,\n          0x9149: 0x9078,\n          0x914a: 0x9077,\n          0x914b: 0x92ad,\n          0x914c: 0x9291,\n          0x914d: 0x9583,\n          0x914e: 0x9bae,\n          0x914f: 0x524d,\n          0x9150: 0x5584,\n          0x9151: 0x6f38,\n          0x9152: 0x7136,\n          0x9153: 0x5168,\n          0x9154: 0x7985,\n          0x9155: 0x7e55,\n          0x9156: 0x81b3,\n          0x9157: 0x7cce,\n          0x9158: 0x564c,\n          0x9159: 0x5851,\n          0x915a: 0x5ca8,\n          0x915b: 0x63aa,\n          0x915c: 0x66fe,\n          0x915d: 0x66fd,\n          0x915e: 0x695a,\n          0x915f: 0x72d9,\n          0x9160: 0x758f,\n          0x9161: 0x758e,\n          0x9162: 0x790e,\n          0x9163: 0x7956,\n          0x9164: 0x79df,\n          0x9165: 0x7c97,\n          0x9166: 0x7d20,\n          0x9167: 0x7d44,\n          0x9168: 0x8607,\n          0x9169: 0x8a34,\n          0x916a: 0x963b,\n          0x916b: 0x9061,\n          0x916c: 0x9f20,\n          0x916d: 0x50e7,\n          0x916e: 0x5275,\n          0x916f: 0x53cc,\n          0x9170: 0x53e2,\n          0x9171: 0x5009,\n          0x9172: 0x55aa,\n          0x9173: 0x58ee,\n          0x9174: 0x594f,\n          0x9175: 0x723d,\n          0x9176: 0x5b8b,\n          0x9177: 0x5c64,\n          0x9178: 0x531d,\n          0x9179: 0x60e3,\n          0x917a: 0x60f3,\n          0x917b: 0x635c,\n          0x917c: 0x6383,\n          0x917d: 0x633f,\n          0x917e: 0x63bb,\n          0x9180: 0x64cd,\n          0x9181: 0x65e9,\n          0x9182: 0x66f9,\n          0x9183: 0x5de3,\n          0x9184: 0x69cd,\n          0x9185: 0x69fd,\n          0x9186: 0x6f15,\n          0x9187: 0x71e5,\n          0x9188: 0x4e89,\n          0x9189: 0x75e9,\n          0x918a: 0x76f8,\n          0x918b: 0x7a93,\n          0x918c: 0x7cdf,\n          0x918d: 0x7dcf,\n          0x918e: 0x7d9c,\n          0x918f: 0x8061,\n          0x9190: 0x8349,\n          0x9191: 0x8358,\n          0x9192: 0x846c,\n          0x9193: 0x84bc,\n          0x9194: 0x85fb,\n          0x9195: 0x88c5,\n          0x9196: 0x8d70,\n          0x9197: 0x9001,\n          0x9198: 0x906d,\n          0x9199: 0x9397,\n          0x919a: 0x971c,\n          0x919b: 0x9a12,\n          0x919c: 0x50cf,\n          0x919d: 0x5897,\n          0x919e: 0x618e,\n          0x919f: 0x81d3,\n          0x91a0: 0x8535,\n          0x91a1: 0x8d08,\n          0x91a2: 0x9020,\n          0x91a3: 0x4fc3,\n          0x91a4: 0x5074,\n          0x91a5: 0x5247,\n          0x91a6: 0x5373,\n          0x91a7: 0x606f,\n          0x91a8: 0x6349,\n          0x91a9: 0x675f,\n          0x91aa: 0x6e2c,\n          0x91ab: 0x8db3,\n          0x91ac: 0x901f,\n          0x91ad: 0x4fd7,\n          0x91ae: 0x5c5e,\n          0x91af: 0x8cca,\n          0x91b0: 0x65cf,\n          0x91b1: 0x7d9a,\n          0x91b2: 0x5352,\n          0x91b3: 0x8896,\n          0x91b4: 0x5176,\n          0x91b5: 0x63c3,\n          0x91b6: 0x5b58,\n          0x91b7: 0x5b6b,\n          0x91b8: 0x5c0a,\n          0x91b9: 0x640d,\n          0x91ba: 0x6751,\n          0x91bb: 0x905c,\n          0x91bc: 0x4ed6,\n          0x91bd: 0x591a,\n          0x91be: 0x592a,\n          0x91bf: 0x6c70,\n          0x91c0: 0x8a51,\n          0x91c1: 0x553e,\n          0x91c2: 0x5815,\n          0x91c3: 0x59a5,\n          0x91c4: 0x60f0,\n          0x91c5: 0x6253,\n          0x91c6: 0x67c1,\n          0x91c7: 0x8235,\n          0x91c8: 0x6955,\n          0x91c9: 0x9640,\n          0x91ca: 0x99c4,\n          0x91cb: 0x9a28,\n          0x91cc: 0x4f53,\n          0x91cd: 0x5806,\n          0x91ce: 0x5bfe,\n          0x91cf: 0x8010,\n          0x91d0: 0x5cb1,\n          0x91d1: 0x5e2f,\n          0x91d2: 0x5f85,\n          0x91d3: 0x6020,\n          0x91d4: 0x614b,\n          0x91d5: 0x6234,\n          0x91d6: 0x66ff,\n          0x91d7: 0x6cf0,\n          0x91d8: 0x6ede,\n          0x91d9: 0x80ce,\n          0x91da: 0x817f,\n          0x91db: 0x82d4,\n          0x91dc: 0x888b,\n          0x91dd: 0x8cb8,\n          0x91de: 0x9000,\n          0x91df: 0x902e,\n          0x91e0: 0x968a,\n          0x91e1: 0x9edb,\n          0x91e2: 0x9bdb,\n          0x91e3: 0x4ee3,\n          0x91e4: 0x53f0,\n          0x91e5: 0x5927,\n          0x91e6: 0x7b2c,\n          0x91e7: 0x918d,\n          0x91e8: 0x984c,\n          0x91e9: 0x9df9,\n          0x91ea: 0x6edd,\n          0x91eb: 0x7027,\n          0x91ec: 0x5353,\n          0x91ed: 0x5544,\n          0x91ee: 0x5b85,\n          0x91ef: 0x6258,\n          0x91f0: 0x629e,\n          0x91f1: 0x62d3,\n          0x91f2: 0x6ca2,\n          0x91f3: 0x6fef,\n          0x91f4: 0x7422,\n          0x91f5: 0x8a17,\n          0x91f6: 0x9438,\n          0x91f7: 0x6fc1,\n          0x91f8: 0x8afe,\n          0x91f9: 0x8338,\n          0x91fa: 0x51e7,\n          0x91fb: 0x86f8,\n          0x91fc: 0x53ea,\n          0x9240: 0x53e9,\n          0x9241: 0x4f46,\n          0x9242: 0x9054,\n          0x9243: 0x8fb0,\n          0x9244: 0x596a,\n          0x9245: 0x8131,\n          0x9246: 0x5dfd,\n          0x9247: 0x7aea,\n          0x9248: 0x8fbf,\n          0x9249: 0x68da,\n          0x924a: 0x8c37,\n          0x924b: 0x72f8,\n          0x924c: 0x9c48,\n          0x924d: 0x6a3d,\n          0x924e: 0x8ab0,\n          0x924f: 0x4e39,\n          0x9250: 0x5358,\n          0x9251: 0x5606,\n          0x9252: 0x5766,\n          0x9253: 0x62c5,\n          0x9254: 0x63a2,\n          0x9255: 0x65e6,\n          0x9256: 0x6b4e,\n          0x9257: 0x6de1,\n          0x9258: 0x6e5b,\n          0x9259: 0x70ad,\n          0x925a: 0x77ed,\n          0x925b: 0x7aef,\n          0x925c: 0x7baa,\n          0x925d: 0x7dbb,\n          0x925e: 0x803d,\n          0x925f: 0x80c6,\n          0x9260: 0x86cb,\n          0x9261: 0x8a95,\n          0x9262: 0x935b,\n          0x9263: 0x56e3,\n          0x9264: 0x58c7,\n          0x9265: 0x5f3e,\n          0x9266: 0x65ad,\n          0x9267: 0x6696,\n          0x9268: 0x6a80,\n          0x9269: 0x6bb5,\n          0x926a: 0x7537,\n          0x926b: 0x8ac7,\n          0x926c: 0x5024,\n          0x926d: 0x77e5,\n          0x926e: 0x5730,\n          0x926f: 0x5f1b,\n          0x9270: 0x6065,\n          0x9271: 0x667a,\n          0x9272: 0x6c60,\n          0x9273: 0x75f4,\n          0x9274: 0x7a1a,\n          0x9275: 0x7f6e,\n          0x9276: 0x81f4,\n          0x9277: 0x8718,\n          0x9278: 0x9045,\n          0x9279: 0x99b3,\n          0x927a: 0x7bc9,\n          0x927b: 0x755c,\n          0x927c: 0x7af9,\n          0x927d: 0x7b51,\n          0x927e: 0x84c4,\n          0x9280: 0x9010,\n          0x9281: 0x79e9,\n          0x9282: 0x7a92,\n          0x9283: 0x8336,\n          0x9284: 0x5ae1,\n          0x9285: 0x7740,\n          0x9286: 0x4e2d,\n          0x9287: 0x4ef2,\n          0x9288: 0x5b99,\n          0x9289: 0x5fe0,\n          0x928a: 0x62bd,\n          0x928b: 0x663c,\n          0x928c: 0x67f1,\n          0x928d: 0x6ce8,\n          0x928e: 0x866b,\n          0x928f: 0x8877,\n          0x9290: 0x8a3b,\n          0x9291: 0x914e,\n          0x9292: 0x92f3,\n          0x9293: 0x99d0,\n          0x9294: 0x6a17,\n          0x9295: 0x7026,\n          0x9296: 0x732a,\n          0x9297: 0x82e7,\n          0x9298: 0x8457,\n          0x9299: 0x8caf,\n          0x929a: 0x4e01,\n          0x929b: 0x5146,\n          0x929c: 0x51cb,\n          0x929d: 0x558b,\n          0x929e: 0x5bf5,\n          0x929f: 0x5e16,\n          0x92a0: 0x5e33,\n          0x92a1: 0x5e81,\n          0x92a2: 0x5f14,\n          0x92a3: 0x5f35,\n          0x92a4: 0x5f6b,\n          0x92a5: 0x5fb4,\n          0x92a6: 0x61f2,\n          0x92a7: 0x6311,\n          0x92a8: 0x66a2,\n          0x92a9: 0x671d,\n          0x92aa: 0x6f6e,\n          0x92ab: 0x7252,\n          0x92ac: 0x753a,\n          0x92ad: 0x773a,\n          0x92ae: 0x8074,\n          0x92af: 0x8139,\n          0x92b0: 0x8178,\n          0x92b1: 0x8776,\n          0x92b2: 0x8abf,\n          0x92b3: 0x8adc,\n          0x92b4: 0x8d85,\n          0x92b5: 0x8df3,\n          0x92b6: 0x929a,\n          0x92b7: 0x9577,\n          0x92b8: 0x9802,\n          0x92b9: 0x9ce5,\n          0x92ba: 0x52c5,\n          0x92bb: 0x6357,\n          0x92bc: 0x76f4,\n          0x92bd: 0x6715,\n          0x92be: 0x6c88,\n          0x92bf: 0x73cd,\n          0x92c0: 0x8cc3,\n          0x92c1: 0x93ae,\n          0x92c2: 0x9673,\n          0x92c3: 0x6d25,\n          0x92c4: 0x589c,\n          0x92c5: 0x690e,\n          0x92c6: 0x69cc,\n          0x92c7: 0x8ffd,\n          0x92c8: 0x939a,\n          0x92c9: 0x75db,\n          0x92ca: 0x901a,\n          0x92cb: 0x585a,\n          0x92cc: 0x6802,\n          0x92cd: 0x63b4,\n          0x92ce: 0x69fb,\n          0x92cf: 0x4f43,\n          0x92d0: 0x6f2c,\n          0x92d1: 0x67d8,\n          0x92d2: 0x8fbb,\n          0x92d3: 0x8526,\n          0x92d4: 0x7db4,\n          0x92d5: 0x9354,\n          0x92d6: 0x693f,\n          0x92d7: 0x6f70,\n          0x92d8: 0x576a,\n          0x92d9: 0x58f7,\n          0x92da: 0x5b2c,\n          0x92db: 0x7d2c,\n          0x92dc: 0x722a,\n          0x92dd: 0x540a,\n          0x92de: 0x91e3,\n          0x92df: 0x9db4,\n          0x92e0: 0x4ead,\n          0x92e1: 0x4f4e,\n          0x92e2: 0x505c,\n          0x92e3: 0x5075,\n          0x92e4: 0x5243,\n          0x92e5: 0x8c9e,\n          0x92e6: 0x5448,\n          0x92e7: 0x5824,\n          0x92e8: 0x5b9a,\n          0x92e9: 0x5e1d,\n          0x92ea: 0x5e95,\n          0x92eb: 0x5ead,\n          0x92ec: 0x5ef7,\n          0x92ed: 0x5f1f,\n          0x92ee: 0x608c,\n          0x92ef: 0x62b5,\n          0x92f0: 0x633a,\n          0x92f1: 0x63d0,\n          0x92f2: 0x68af,\n          0x92f3: 0x6c40,\n          0x92f4: 0x7887,\n          0x92f5: 0x798e,\n          0x92f6: 0x7a0b,\n          0x92f7: 0x7de0,\n          0x92f8: 0x8247,\n          0x92f9: 0x8a02,\n          0x92fa: 0x8ae6,\n          0x92fb: 0x8e44,\n          0x92fc: 0x9013,\n          0x9340: 0x90b8,\n          0x9341: 0x912d,\n          0x9342: 0x91d8,\n          0x9343: 0x9f0e,\n          0x9344: 0x6ce5,\n          0x9345: 0x6458,\n          0x9346: 0x64e2,\n          0x9347: 0x6575,\n          0x9348: 0x6ef4,\n          0x9349: 0x7684,\n          0x934a: 0x7b1b,\n          0x934b: 0x9069,\n          0x934c: 0x93d1,\n          0x934d: 0x6eba,\n          0x934e: 0x54f2,\n          0x934f: 0x5fb9,\n          0x9350: 0x64a4,\n          0x9351: 0x8f4d,\n          0x9352: 0x8fed,\n          0x9353: 0x9244,\n          0x9354: 0x5178,\n          0x9355: 0x586b,\n          0x9356: 0x5929,\n          0x9357: 0x5c55,\n          0x9358: 0x5e97,\n          0x9359: 0x6dfb,\n          0x935a: 0x7e8f,\n          0x935b: 0x751c,\n          0x935c: 0x8cbc,\n          0x935d: 0x8ee2,\n          0x935e: 0x985b,\n          0x935f: 0x70b9,\n          0x9360: 0x4f1d,\n          0x9361: 0x6bbf,\n          0x9362: 0x6fb1,\n          0x9363: 0x7530,\n          0x9364: 0x96fb,\n          0x9365: 0x514e,\n          0x9366: 0x5410,\n          0x9367: 0x5835,\n          0x9368: 0x5857,\n          0x9369: 0x59ac,\n          0x936a: 0x5c60,\n          0x936b: 0x5f92,\n          0x936c: 0x6597,\n          0x936d: 0x675c,\n          0x936e: 0x6e21,\n          0x936f: 0x767b,\n          0x9370: 0x83df,\n          0x9371: 0x8ced,\n          0x9372: 0x9014,\n          0x9373: 0x90fd,\n          0x9374: 0x934d,\n          0x9375: 0x7825,\n          0x9376: 0x783a,\n          0x9377: 0x52aa,\n          0x9378: 0x5ea6,\n          0x9379: 0x571f,\n          0x937a: 0x5974,\n          0x937b: 0x6012,\n          0x937c: 0x5012,\n          0x937d: 0x515a,\n          0x937e: 0x51ac,\n          0x9380: 0x51cd,\n          0x9381: 0x5200,\n          0x9382: 0x5510,\n          0x9383: 0x5854,\n          0x9384: 0x5858,\n          0x9385: 0x5957,\n          0x9386: 0x5b95,\n          0x9387: 0x5cf6,\n          0x9388: 0x5d8b,\n          0x9389: 0x60bc,\n          0x938a: 0x6295,\n          0x938b: 0x642d,\n          0x938c: 0x6771,\n          0x938d: 0x6843,\n          0x938e: 0x68bc,\n          0x938f: 0x68df,\n          0x9390: 0x76d7,\n          0x9391: 0x6dd8,\n          0x9392: 0x6e6f,\n          0x9393: 0x6d9b,\n          0x9394: 0x706f,\n          0x9395: 0x71c8,\n          0x9396: 0x5f53,\n          0x9397: 0x75d8,\n          0x9398: 0x7977,\n          0x9399: 0x7b49,\n          0x939a: 0x7b54,\n          0x939b: 0x7b52,\n          0x939c: 0x7cd6,\n          0x939d: 0x7d71,\n          0x939e: 0x5230,\n          0x939f: 0x8463,\n          0x93a0: 0x8569,\n          0x93a1: 0x85e4,\n          0x93a2: 0x8a0e,\n          0x93a3: 0x8b04,\n          0x93a4: 0x8c46,\n          0x93a5: 0x8e0f,\n          0x93a6: 0x9003,\n          0x93a7: 0x900f,\n          0x93a8: 0x9419,\n          0x93a9: 0x9676,\n          0x93aa: 0x982d,\n          0x93ab: 0x9a30,\n          0x93ac: 0x95d8,\n          0x93ad: 0x50cd,\n          0x93ae: 0x52d5,\n          0x93af: 0x540c,\n          0x93b0: 0x5802,\n          0x93b1: 0x5c0e,\n          0x93b2: 0x61a7,\n          0x93b3: 0x649e,\n          0x93b4: 0x6d1e,\n          0x93b5: 0x77b3,\n          0x93b6: 0x7ae5,\n          0x93b7: 0x80f4,\n          0x93b8: 0x8404,\n          0x93b9: 0x9053,\n          0x93ba: 0x9285,\n          0x93bb: 0x5ce0,\n          0x93bc: 0x9d07,\n          0x93bd: 0x533f,\n          0x93be: 0x5f97,\n          0x93bf: 0x5fb3,\n          0x93c0: 0x6d9c,\n          0x93c1: 0x7279,\n          0x93c2: 0x7763,\n          0x93c3: 0x79bf,\n          0x93c4: 0x7be4,\n          0x93c5: 0x6bd2,\n          0x93c6: 0x72ec,\n          0x93c7: 0x8aad,\n          0x93c8: 0x6803,\n          0x93c9: 0x6a61,\n          0x93ca: 0x51f8,\n          0x93cb: 0x7a81,\n          0x93cc: 0x6934,\n          0x93cd: 0x5c4a,\n          0x93ce: 0x9cf6,\n          0x93cf: 0x82eb,\n          0x93d0: 0x5bc5,\n          0x93d1: 0x9149,\n          0x93d2: 0x701e,\n          0x93d3: 0x5678,\n          0x93d4: 0x5c6f,\n          0x93d5: 0x60c7,\n          0x93d6: 0x6566,\n          0x93d7: 0x6c8c,\n          0x93d8: 0x8c5a,\n          0x93d9: 0x9041,\n          0x93da: 0x9813,\n          0x93db: 0x5451,\n          0x93dc: 0x66c7,\n          0x93dd: 0x920d,\n          0x93de: 0x5948,\n          0x93df: 0x90a3,\n          0x93e0: 0x5185,\n          0x93e1: 0x4e4d,\n          0x93e2: 0x51ea,\n          0x93e3: 0x8599,\n          0x93e4: 0x8b0e,\n          0x93e5: 0x7058,\n          0x93e6: 0x637a,\n          0x93e7: 0x934b,\n          0x93e8: 0x6962,\n          0x93e9: 0x99b4,\n          0x93ea: 0x7e04,\n          0x93eb: 0x7577,\n          0x93ec: 0x5357,\n          0x93ed: 0x6960,\n          0x93ee: 0x8edf,\n          0x93ef: 0x96e3,\n          0x93f0: 0x6c5d,\n          0x93f1: 0x4e8c,\n          0x93f2: 0x5c3c,\n          0x93f3: 0x5f10,\n          0x93f4: 0x8fe9,\n          0x93f5: 0x5302,\n          0x93f6: 0x8cd1,\n          0x93f7: 0x8089,\n          0x93f8: 0x8679,\n          0x93f9: 0x5eff,\n          0x93fa: 0x65e5,\n          0x93fb: 0x4e73,\n          0x93fc: 0x5165,\n          0x9440: 0x5982,\n          0x9441: 0x5c3f,\n          0x9442: 0x97ee,\n          0x9443: 0x4efb,\n          0x9444: 0x598a,\n          0x9445: 0x5fcd,\n          0x9446: 0x8a8d,\n          0x9447: 0x6fe1,\n          0x9448: 0x79b0,\n          0x9449: 0x7962,\n          0x944a: 0x5be7,\n          0x944b: 0x8471,\n          0x944c: 0x732b,\n          0x944d: 0x71b1,\n          0x944e: 0x5e74,\n          0x944f: 0x5ff5,\n          0x9450: 0x637b,\n          0x9451: 0x649a,\n          0x9452: 0x71c3,\n          0x9453: 0x7c98,\n          0x9454: 0x4e43,\n          0x9455: 0x5efc,\n          0x9456: 0x4e4b,\n          0x9457: 0x57dc,\n          0x9458: 0x56a2,\n          0x9459: 0x60a9,\n          0x945a: 0x6fc3,\n          0x945b: 0x7d0d,\n          0x945c: 0x80fd,\n          0x945d: 0x8133,\n          0x945e: 0x81bf,\n          0x945f: 0x8fb2,\n          0x9460: 0x8997,\n          0x9461: 0x86a4,\n          0x9462: 0x5df4,\n          0x9463: 0x628a,\n          0x9464: 0x64ad,\n          0x9465: 0x8987,\n          0x9466: 0x6777,\n          0x9467: 0x6ce2,\n          0x9468: 0x6d3e,\n          0x9469: 0x7436,\n          0x946a: 0x7834,\n          0x946b: 0x5a46,\n          0x946c: 0x7f75,\n          0x946d: 0x82ad,\n          0x946e: 0x99ac,\n          0x946f: 0x4ff3,\n          0x9470: 0x5ec3,\n          0x9471: 0x62dd,\n          0x9472: 0x6392,\n          0x9473: 0x6557,\n          0x9474: 0x676f,\n          0x9475: 0x76c3,\n          0x9476: 0x724c,\n          0x9477: 0x80cc,\n          0x9478: 0x80ba,\n          0x9479: 0x8f29,\n          0x947a: 0x914d,\n          0x947b: 0x500d,\n          0x947c: 0x57f9,\n          0x947d: 0x5a92,\n          0x947e: 0x6885,\n          0x9480: 0x6973,\n          0x9481: 0x7164,\n          0x9482: 0x72fd,\n          0x9483: 0x8cb7,\n          0x9484: 0x58f2,\n          0x9485: 0x8ce0,\n          0x9486: 0x966a,\n          0x9487: 0x9019,\n          0x9488: 0x877f,\n          0x9489: 0x79e4,\n          0x948a: 0x77e7,\n          0x948b: 0x8429,\n          0x948c: 0x4f2f,\n          0x948d: 0x5265,\n          0x948e: 0x535a,\n          0x948f: 0x62cd,\n          0x9490: 0x67cf,\n          0x9491: 0x6cca,\n          0x9492: 0x767d,\n          0x9493: 0x7b94,\n          0x9494: 0x7c95,\n          0x9495: 0x8236,\n          0x9496: 0x8584,\n          0x9497: 0x8feb,\n          0x9498: 0x66dd,\n          0x9499: 0x6f20,\n          0x949a: 0x7206,\n          0x949b: 0x7e1b,\n          0x949c: 0x83ab,\n          0x949d: 0x99c1,\n          0x949e: 0x9ea6,\n          0x949f: 0x51fd,\n          0x94a0: 0x7bb1,\n          0x94a1: 0x7872,\n          0x94a2: 0x7bb8,\n          0x94a3: 0x8087,\n          0x94a4: 0x7b48,\n          0x94a5: 0x6ae8,\n          0x94a6: 0x5e61,\n          0x94a7: 0x808c,\n          0x94a8: 0x7551,\n          0x94a9: 0x7560,\n          0x94aa: 0x516b,\n          0x94ab: 0x9262,\n          0x94ac: 0x6e8c,\n          0x94ad: 0x767a,\n          0x94ae: 0x9197,\n          0x94af: 0x9aea,\n          0x94b0: 0x4f10,\n          0x94b1: 0x7f70,\n          0x94b2: 0x629c,\n          0x94b3: 0x7b4f,\n          0x94b4: 0x95a5,\n          0x94b5: 0x9ce9,\n          0x94b6: 0x567a,\n          0x94b7: 0x5859,\n          0x94b8: 0x86e4,\n          0x94b9: 0x96bc,\n          0x94ba: 0x4f34,\n          0x94bb: 0x5224,\n          0x94bc: 0x534a,\n          0x94bd: 0x53cd,\n          0x94be: 0x53db,\n          0x94bf: 0x5e06,\n          0x94c0: 0x642c,\n          0x94c1: 0x6591,\n          0x94c2: 0x677f,\n          0x94c3: 0x6c3e,\n          0x94c4: 0x6c4e,\n          0x94c5: 0x7248,\n          0x94c6: 0x72af,\n          0x94c7: 0x73ed,\n          0x94c8: 0x7554,\n          0x94c9: 0x7e41,\n          0x94ca: 0x822c,\n          0x94cb: 0x85e9,\n          0x94cc: 0x8ca9,\n          0x94cd: 0x7bc4,\n          0x94ce: 0x91c6,\n          0x94cf: 0x7169,\n          0x94d0: 0x9812,\n          0x94d1: 0x98ef,\n          0x94d2: 0x633d,\n          0x94d3: 0x6669,\n          0x94d4: 0x756a,\n          0x94d5: 0x76e4,\n          0x94d6: 0x78d0,\n          0x94d7: 0x8543,\n          0x94d8: 0x86ee,\n          0x94d9: 0x532a,\n          0x94da: 0x5351,\n          0x94db: 0x5426,\n          0x94dc: 0x5983,\n          0x94dd: 0x5e87,\n          0x94de: 0x5f7c,\n          0x94df: 0x60b2,\n          0x94e0: 0x6249,\n          0x94e1: 0x6279,\n          0x94e2: 0x62ab,\n          0x94e3: 0x6590,\n          0x94e4: 0x6bd4,\n          0x94e5: 0x6ccc,\n          0x94e6: 0x75b2,\n          0x94e7: 0x76ae,\n          0x94e8: 0x7891,\n          0x94e9: 0x79d8,\n          0x94ea: 0x7dcb,\n          0x94eb: 0x7f77,\n          0x94ec: 0x80a5,\n          0x94ed: 0x88ab,\n          0x94ee: 0x8ab9,\n          0x94ef: 0x8cbb,\n          0x94f0: 0x907f,\n          0x94f1: 0x975e,\n          0x94f2: 0x98db,\n          0x94f3: 0x6a0b,\n          0x94f4: 0x7c38,\n          0x94f5: 0x5099,\n          0x94f6: 0x5c3e,\n          0x94f7: 0x5fae,\n          0x94f8: 0x6787,\n          0x94f9: 0x6bd8,\n          0x94fa: 0x7435,\n          0x94fb: 0x7709,\n          0x94fc: 0x7f8e,\n          0x9540: 0x9f3b,\n          0x9541: 0x67ca,\n          0x9542: 0x7a17,\n          0x9543: 0x5339,\n          0x9544: 0x758b,\n          0x9545: 0x9aed,\n          0x9546: 0x5f66,\n          0x9547: 0x819d,\n          0x9548: 0x83f1,\n          0x9549: 0x8098,\n          0x954a: 0x5f3c,\n          0x954b: 0x5fc5,\n          0x954c: 0x7562,\n          0x954d: 0x7b46,\n          0x954e: 0x903c,\n          0x954f: 0x6867,\n          0x9550: 0x59eb,\n          0x9551: 0x5a9b,\n          0x9552: 0x7d10,\n          0x9553: 0x767e,\n          0x9554: 0x8b2c,\n          0x9555: 0x4ff5,\n          0x9556: 0x5f6a,\n          0x9557: 0x6a19,\n          0x9558: 0x6c37,\n          0x9559: 0x6f02,\n          0x955a: 0x74e2,\n          0x955b: 0x7968,\n          0x955c: 0x8868,\n          0x955d: 0x8a55,\n          0x955e: 0x8c79,\n          0x955f: 0x5edf,\n          0x9560: 0x63cf,\n          0x9561: 0x75c5,\n          0x9562: 0x79d2,\n          0x9563: 0x82d7,\n          0x9564: 0x9328,\n          0x9565: 0x92f2,\n          0x9566: 0x849c,\n          0x9567: 0x86ed,\n          0x9568: 0x9c2d,\n          0x9569: 0x54c1,\n          0x956a: 0x5f6c,\n          0x956b: 0x658c,\n          0x956c: 0x6d5c,\n          0x956d: 0x7015,\n          0x956e: 0x8ca7,\n          0x956f: 0x8cd3,\n          0x9570: 0x983b,\n          0x9571: 0x654f,\n          0x9572: 0x74f6,\n          0x9573: 0x4e0d,\n          0x9574: 0x4ed8,\n          0x9575: 0x57e0,\n          0x9576: 0x592b,\n          0x9577: 0x5a66,\n          0x9578: 0x5bcc,\n          0x9579: 0x51a8,\n          0x957a: 0x5e03,\n          0x957b: 0x5e9c,\n          0x957c: 0x6016,\n          0x957d: 0x6276,\n          0x957e: 0x6577,\n          0x9580: 0x65a7,\n          0x9581: 0x666e,\n          0x9582: 0x6d6e,\n          0x9583: 0x7236,\n          0x9584: 0x7b26,\n          0x9585: 0x8150,\n          0x9586: 0x819a,\n          0x9587: 0x8299,\n          0x9588: 0x8b5c,\n          0x9589: 0x8ca0,\n          0x958a: 0x8ce6,\n          0x958b: 0x8d74,\n          0x958c: 0x961c,\n          0x958d: 0x9644,\n          0x958e: 0x4fae,\n          0x958f: 0x64ab,\n          0x9590: 0x6b66,\n          0x9591: 0x821e,\n          0x9592: 0x8461,\n          0x9593: 0x856a,\n          0x9594: 0x90e8,\n          0x9595: 0x5c01,\n          0x9596: 0x6953,\n          0x9597: 0x98a8,\n          0x9598: 0x847a,\n          0x9599: 0x8557,\n          0x959a: 0x4f0f,\n          0x959b: 0x526f,\n          0x959c: 0x5fa9,\n          0x959d: 0x5e45,\n          0x959e: 0x670d,\n          0x959f: 0x798f,\n          0x95a0: 0x8179,\n          0x95a1: 0x8907,\n          0x95a2: 0x8986,\n          0x95a3: 0x6df5,\n          0x95a4: 0x5f17,\n          0x95a5: 0x6255,\n          0x95a6: 0x6cb8,\n          0x95a7: 0x4ecf,\n          0x95a8: 0x7269,\n          0x95a9: 0x9b92,\n          0x95aa: 0x5206,\n          0x95ab: 0x543b,\n          0x95ac: 0x5674,\n          0x95ad: 0x58b3,\n          0x95ae: 0x61a4,\n          0x95af: 0x626e,\n          0x95b0: 0x711a,\n          0x95b1: 0x596e,\n          0x95b2: 0x7c89,\n          0x95b3: 0x7cde,\n          0x95b4: 0x7d1b,\n          0x95b5: 0x96f0,\n          0x95b6: 0x6587,\n          0x95b7: 0x805e,\n          0x95b8: 0x4e19,\n          0x95b9: 0x4f75,\n          0x95ba: 0x5175,\n          0x95bb: 0x5840,\n          0x95bc: 0x5e63,\n          0x95bd: 0x5e73,\n          0x95be: 0x5f0a,\n          0x95bf: 0x67c4,\n          0x95c0: 0x4e26,\n          0x95c1: 0x853d,\n          0x95c2: 0x9589,\n          0x95c3: 0x965b,\n          0x95c4: 0x7c73,\n          0x95c5: 0x9801,\n          0x95c6: 0x50fb,\n          0x95c7: 0x58c1,\n          0x95c8: 0x7656,\n          0x95c9: 0x78a7,\n          0x95ca: 0x5225,\n          0x95cb: 0x77a5,\n          0x95cc: 0x8511,\n          0x95cd: 0x7b86,\n          0x95ce: 0x504f,\n          0x95cf: 0x5909,\n          0x95d0: 0x7247,\n          0x95d1: 0x7bc7,\n          0x95d2: 0x7de8,\n          0x95d3: 0x8fba,\n          0x95d4: 0x8fd4,\n          0x95d5: 0x904d,\n          0x95d6: 0x4fbf,\n          0x95d7: 0x52c9,\n          0x95d8: 0x5a29,\n          0x95d9: 0x5f01,\n          0x95da: 0x97ad,\n          0x95db: 0x4fdd,\n          0x95dc: 0x8217,\n          0x95dd: 0x92ea,\n          0x95de: 0x5703,\n          0x95df: 0x6355,\n          0x95e0: 0x6b69,\n          0x95e1: 0x752b,\n          0x95e2: 0x88dc,\n          0x95e3: 0x8f14,\n          0x95e4: 0x7a42,\n          0x95e5: 0x52df,\n          0x95e6: 0x5893,\n          0x95e7: 0x6155,\n          0x95e8: 0x620a,\n          0x95e9: 0x66ae,\n          0x95ea: 0x6bcd,\n          0x95eb: 0x7c3f,\n          0x95ec: 0x83e9,\n          0x95ed: 0x5023,\n          0x95ee: 0x4ff8,\n          0x95ef: 0x5305,\n          0x95f0: 0x5446,\n          0x95f1: 0x5831,\n          0x95f2: 0x5949,\n          0x95f3: 0x5b9d,\n          0x95f4: 0x5cf0,\n          0x95f5: 0x5cef,\n          0x95f6: 0x5d29,\n          0x95f7: 0x5e96,\n          0x95f8: 0x62b1,\n          0x95f9: 0x6367,\n          0x95fa: 0x653e,\n          0x95fb: 0x65b9,\n          0x95fc: 0x670b,\n          0x9640: 0x6cd5,\n          0x9641: 0x6ce1,\n          0x9642: 0x70f9,\n          0x9643: 0x7832,\n          0x9644: 0x7e2b,\n          0x9645: 0x80de,\n          0x9646: 0x82b3,\n          0x9647: 0x840c,\n          0x9648: 0x84ec,\n          0x9649: 0x8702,\n          0x964a: 0x8912,\n          0x964b: 0x8a2a,\n          0x964c: 0x8c4a,\n          0x964d: 0x90a6,\n          0x964e: 0x92d2,\n          0x964f: 0x98fd,\n          0x9650: 0x9cf3,\n          0x9651: 0x9d6c,\n          0x9652: 0x4e4f,\n          0x9653: 0x4ea1,\n          0x9654: 0x508d,\n          0x9655: 0x5256,\n          0x9656: 0x574a,\n          0x9657: 0x59a8,\n          0x9658: 0x5e3d,\n          0x9659: 0x5fd8,\n          0x965a: 0x5fd9,\n          0x965b: 0x623f,\n          0x965c: 0x66b4,\n          0x965d: 0x671b,\n          0x965e: 0x67d0,\n          0x965f: 0x68d2,\n          0x9660: 0x5192,\n          0x9661: 0x7d21,\n          0x9662: 0x80aa,\n          0x9663: 0x81a8,\n          0x9664: 0x8b00,\n          0x9665: 0x8c8c,\n          0x9666: 0x8cbf,\n          0x9667: 0x927e,\n          0x9668: 0x9632,\n          0x9669: 0x5420,\n          0x966a: 0x982c,\n          0x966b: 0x5317,\n          0x966c: 0x50d5,\n          0x966d: 0x535c,\n          0x966e: 0x58a8,\n          0x966f: 0x64b2,\n          0x9670: 0x6734,\n          0x9671: 0x7267,\n          0x9672: 0x7766,\n          0x9673: 0x7a46,\n          0x9674: 0x91e6,\n          0x9675: 0x52c3,\n          0x9676: 0x6ca1,\n          0x9677: 0x6b86,\n          0x9678: 0x5800,\n          0x9679: 0x5e4c,\n          0x967a: 0x5954,\n          0x967b: 0x672c,\n          0x967c: 0x7ffb,\n          0x967d: 0x51e1,\n          0x967e: 0x76c6,\n          0x9680: 0x6469,\n          0x9681: 0x78e8,\n          0x9682: 0x9b54,\n          0x9683: 0x9ebb,\n          0x9684: 0x57cb,\n          0x9685: 0x59b9,\n          0x9686: 0x6627,\n          0x9687: 0x679a,\n          0x9688: 0x6bce,\n          0x9689: 0x54e9,\n          0x968a: 0x69d9,\n          0x968b: 0x5e55,\n          0x968c: 0x819c,\n          0x968d: 0x6795,\n          0x968e: 0x9baa,\n          0x968f: 0x67fe,\n          0x9690: 0x9c52,\n          0x9691: 0x685d,\n          0x9692: 0x4ea6,\n          0x9693: 0x4fe3,\n          0x9694: 0x53c8,\n          0x9695: 0x62b9,\n          0x9696: 0x672b,\n          0x9697: 0x6cab,\n          0x9698: 0x8fc4,\n          0x9699: 0x4fad,\n          0x969a: 0x7e6d,\n          0x969b: 0x9ebf,\n          0x969c: 0x4e07,\n          0x969d: 0x6162,\n          0x969e: 0x6e80,\n          0x969f: 0x6f2b,\n          0x96a0: 0x8513,\n          0x96a1: 0x5473,\n          0x96a2: 0x672a,\n          0x96a3: 0x9b45,\n          0x96a4: 0x5df3,\n          0x96a5: 0x7b95,\n          0x96a6: 0x5cac,\n          0x96a7: 0x5bc6,\n          0x96a8: 0x871c,\n          0x96a9: 0x6e4a,\n          0x96aa: 0x84d1,\n          0x96ab: 0x7a14,\n          0x96ac: 0x8108,\n          0x96ad: 0x5999,\n          0x96ae: 0x7c8d,\n          0x96af: 0x6c11,\n          0x96b0: 0x7720,\n          0x96b1: 0x52d9,\n          0x96b2: 0x5922,\n          0x96b3: 0x7121,\n          0x96b4: 0x725f,\n          0x96b5: 0x77db,\n          0x96b6: 0x9727,\n          0x96b7: 0x9d61,\n          0x96b8: 0x690b,\n          0x96b9: 0x5a7f,\n          0x96ba: 0x5a18,\n          0x96bb: 0x51a5,\n          0x96bc: 0x540d,\n          0x96bd: 0x547d,\n          0x96be: 0x660e,\n          0x96bf: 0x76df,\n          0x96c0: 0x8ff7,\n          0x96c1: 0x9298,\n          0x96c2: 0x9cf4,\n          0x96c3: 0x59ea,\n          0x96c4: 0x725d,\n          0x96c5: 0x6ec5,\n          0x96c6: 0x514d,\n          0x96c7: 0x68c9,\n          0x96c8: 0x7dbf,\n          0x96c9: 0x7dec,\n          0x96ca: 0x9762,\n          0x96cb: 0x9eba,\n          0x96cc: 0x6478,\n          0x96cd: 0x6a21,\n          0x96ce: 0x8302,\n          0x96cf: 0x5984,\n          0x96d0: 0x5b5f,\n          0x96d1: 0x6bdb,\n          0x96d2: 0x731b,\n          0x96d3: 0x76f2,\n          0x96d4: 0x7db2,\n          0x96d5: 0x8017,\n          0x96d6: 0x8499,\n          0x96d7: 0x5132,\n          0x96d8: 0x6728,\n          0x96d9: 0x9ed9,\n          0x96da: 0x76ee,\n          0x96db: 0x6762,\n          0x96dc: 0x52ff,\n          0x96dd: 0x9905,\n          0x96de: 0x5c24,\n          0x96df: 0x623b,\n          0x96e0: 0x7c7e,\n          0x96e1: 0x8cb0,\n          0x96e2: 0x554f,\n          0x96e3: 0x60b6,\n          0x96e4: 0x7d0b,\n          0x96e5: 0x9580,\n          0x96e6: 0x5301,\n          0x96e7: 0x4e5f,\n          0x96e8: 0x51b6,\n          0x96e9: 0x591c,\n          0x96ea: 0x723a,\n          0x96eb: 0x8036,\n          0x96ec: 0x91ce,\n          0x96ed: 0x5f25,\n          0x96ee: 0x77e2,\n          0x96ef: 0x5384,\n          0x96f0: 0x5f79,\n          0x96f1: 0x7d04,\n          0x96f2: 0x85ac,\n          0x96f3: 0x8a33,\n          0x96f4: 0x8e8d,\n          0x96f5: 0x9756,\n          0x96f6: 0x67f3,\n          0x96f7: 0x85ae,\n          0x96f8: 0x9453,\n          0x96f9: 0x6109,\n          0x96fa: 0x6108,\n          0x96fb: 0x6cb9,\n          0x96fc: 0x7652,\n          0x9740: 0x8aed,\n          0x9741: 0x8f38,\n          0x9742: 0x552f,\n          0x9743: 0x4f51,\n          0x9744: 0x512a,\n          0x9745: 0x52c7,\n          0x9746: 0x53cb,\n          0x9747: 0x5ba5,\n          0x9748: 0x5e7d,\n          0x9749: 0x60a0,\n          0x974a: 0x6182,\n          0x974b: 0x63d6,\n          0x974c: 0x6709,\n          0x974d: 0x67da,\n          0x974e: 0x6e67,\n          0x974f: 0x6d8c,\n          0x9750: 0x7336,\n          0x9751: 0x7337,\n          0x9752: 0x7531,\n          0x9753: 0x7950,\n          0x9754: 0x88d5,\n          0x9755: 0x8a98,\n          0x9756: 0x904a,\n          0x9757: 0x9091,\n          0x9758: 0x90f5,\n          0x9759: 0x96c4,\n          0x975a: 0x878d,\n          0x975b: 0x5915,\n          0x975c: 0x4e88,\n          0x975d: 0x4f59,\n          0x975e: 0x4e0e,\n          0x975f: 0x8a89,\n          0x9760: 0x8f3f,\n          0x9761: 0x9810,\n          0x9762: 0x50ad,\n          0x9763: 0x5e7c,\n          0x9764: 0x5996,\n          0x9765: 0x5bb9,\n          0x9766: 0x5eb8,\n          0x9767: 0x63da,\n          0x9768: 0x63fa,\n          0x9769: 0x64c1,\n          0x976a: 0x66dc,\n          0x976b: 0x694a,\n          0x976c: 0x69d8,\n          0x976d: 0x6d0b,\n          0x976e: 0x6eb6,\n          0x976f: 0x7194,\n          0x9770: 0x7528,\n          0x9771: 0x7aaf,\n          0x9772: 0x7f8a,\n          0x9773: 0x8000,\n          0x9774: 0x8449,\n          0x9775: 0x84c9,\n          0x9776: 0x8981,\n          0x9777: 0x8b21,\n          0x9778: 0x8e0a,\n          0x9779: 0x9065,\n          0x977a: 0x967d,\n          0x977b: 0x990a,\n          0x977c: 0x617e,\n          0x977d: 0x6291,\n          0x977e: 0x6b32,\n          0x9780: 0x6c83,\n          0x9781: 0x6d74,\n          0x9782: 0x7fcc,\n          0x9783: 0x7ffc,\n          0x9784: 0x6dc0,\n          0x9785: 0x7f85,\n          0x9786: 0x87ba,\n          0x9787: 0x88f8,\n          0x9788: 0x6765,\n          0x9789: 0x83b1,\n          0x978a: 0x983c,\n          0x978b: 0x96f7,\n          0x978c: 0x6d1b,\n          0x978d: 0x7d61,\n          0x978e: 0x843d,\n          0x978f: 0x916a,\n          0x9790: 0x4e71,\n          0x9791: 0x5375,\n          0x9792: 0x5d50,\n          0x9793: 0x6b04,\n          0x9794: 0x6feb,\n          0x9795: 0x85cd,\n          0x9796: 0x862d,\n          0x9797: 0x89a7,\n          0x9798: 0x5229,\n          0x9799: 0x540f,\n          0x979a: 0x5c65,\n          0x979b: 0x674e,\n          0x979c: 0x68a8,\n          0x979d: 0x7406,\n          0x979e: 0x7483,\n          0x979f: 0x75e2,\n          0x97a0: 0x88cf,\n          0x97a1: 0x88e1,\n          0x97a2: 0x91cc,\n          0x97a3: 0x96e2,\n          0x97a4: 0x9678,\n          0x97a5: 0x5f8b,\n          0x97a6: 0x7387,\n          0x97a7: 0x7acb,\n          0x97a8: 0x844e,\n          0x97a9: 0x63a0,\n          0x97aa: 0x7565,\n          0x97ab: 0x5289,\n          0x97ac: 0x6d41,\n          0x97ad: 0x6e9c,\n          0x97ae: 0x7409,\n          0x97af: 0x7559,\n          0x97b0: 0x786b,\n          0x97b1: 0x7c92,\n          0x97b2: 0x9686,\n          0x97b3: 0x7adc,\n          0x97b4: 0x9f8d,\n          0x97b5: 0x4fb6,\n          0x97b6: 0x616e,\n          0x97b7: 0x65c5,\n          0x97b8: 0x865c,\n          0x97b9: 0x4e86,\n          0x97ba: 0x4eae,\n          0x97bb: 0x50da,\n          0x97bc: 0x4e21,\n          0x97bd: 0x51cc,\n          0x97be: 0x5bee,\n          0x97bf: 0x6599,\n          0x97c0: 0x6881,\n          0x97c1: 0x6dbc,\n          0x97c2: 0x731f,\n          0x97c3: 0x7642,\n          0x97c4: 0x77ad,\n          0x97c5: 0x7a1c,\n          0x97c6: 0x7ce7,\n          0x97c7: 0x826f,\n          0x97c8: 0x8ad2,\n          0x97c9: 0x907c,\n          0x97ca: 0x91cf,\n          0x97cb: 0x9675,\n          0x97cc: 0x9818,\n          0x97cd: 0x529b,\n          0x97ce: 0x7dd1,\n          0x97cf: 0x502b,\n          0x97d0: 0x5398,\n          0x97d1: 0x6797,\n          0x97d2: 0x6dcb,\n          0x97d3: 0x71d0,\n          0x97d4: 0x7433,\n          0x97d5: 0x81e8,\n          0x97d6: 0x8f2a,\n          0x97d7: 0x96a3,\n          0x97d8: 0x9c57,\n          0x97d9: 0x9e9f,\n          0x97da: 0x7460,\n          0x97db: 0x5841,\n          0x97dc: 0x6d99,\n          0x97dd: 0x7d2f,\n          0x97de: 0x985e,\n          0x97df: 0x4ee4,\n          0x97e0: 0x4f36,\n          0x97e1: 0x4f8b,\n          0x97e2: 0x51b7,\n          0x97e3: 0x52b1,\n          0x97e4: 0x5dba,\n          0x97e5: 0x601c,\n          0x97e6: 0x73b2,\n          0x97e7: 0x793c,\n          0x97e8: 0x82d3,\n          0x97e9: 0x9234,\n          0x97ea: 0x96b7,\n          0x97eb: 0x96f6,\n          0x97ec: 0x970a,\n          0x97ed: 0x9e97,\n          0x97ee: 0x9f62,\n          0x97ef: 0x66a6,\n          0x97f0: 0x6b74,\n          0x97f1: 0x5217,\n          0x97f2: 0x52a3,\n          0x97f3: 0x70c8,\n          0x97f4: 0x88c2,\n          0x97f5: 0x5ec9,\n          0x97f6: 0x604b,\n          0x97f7: 0x6190,\n          0x97f8: 0x6f23,\n          0x97f9: 0x7149,\n          0x97fa: 0x7c3e,\n          0x97fb: 0x7df4,\n          0x97fc: 0x806f,\n          0x9840: 0x84ee,\n          0x9841: 0x9023,\n          0x9842: 0x932c,\n          0x9843: 0x5442,\n          0x9844: 0x9b6f,\n          0x9845: 0x6ad3,\n          0x9846: 0x7089,\n          0x9847: 0x8cc2,\n          0x9848: 0x8def,\n          0x9849: 0x9732,\n          0x984a: 0x52b4,\n          0x984b: 0x5a41,\n          0x984c: 0x5eca,\n          0x984d: 0x5f04,\n          0x984e: 0x6717,\n          0x984f: 0x697c,\n          0x9850: 0x6994,\n          0x9851: 0x6d6a,\n          0x9852: 0x6f0f,\n          0x9853: 0x7262,\n          0x9854: 0x72fc,\n          0x9855: 0x7bed,\n          0x9856: 0x8001,\n          0x9857: 0x807e,\n          0x9858: 0x874b,\n          0x9859: 0x90ce,\n          0x985a: 0x516d,\n          0x985b: 0x9e93,\n          0x985c: 0x7984,\n          0x985d: 0x808b,\n          0x985e: 0x9332,\n          0x985f: 0x8ad6,\n          0x9860: 0x502d,\n          0x9861: 0x548c,\n          0x9862: 0x8a71,\n          0x9863: 0x6b6a,\n          0x9864: 0x8cc4,\n          0x9865: 0x8107,\n          0x9866: 0x60d1,\n          0x9867: 0x67a0,\n          0x9868: 0x9df2,\n          0x9869: 0x4e99,\n          0x986a: 0x4e98,\n          0x986b: 0x9c10,\n          0x986c: 0x8a6b,\n          0x986d: 0x85c1,\n          0x986e: 0x8568,\n          0x986f: 0x6900,\n          0x9870: 0x6e7e,\n          0x9871: 0x7897,\n          0x9872: 0x8155,\n          0x989f: 0x5f0c,\n          0x98a0: 0x4e10,\n          0x98a1: 0x4e15,\n          0x98a2: 0x4e2a,\n          0x98a3: 0x4e31,\n          0x98a4: 0x4e36,\n          0x98a5: 0x4e3c,\n          0x98a6: 0x4e3f,\n          0x98a7: 0x4e42,\n          0x98a8: 0x4e56,\n          0x98a9: 0x4e58,\n          0x98aa: 0x4e82,\n          0x98ab: 0x4e85,\n          0x98ac: 0x8c6b,\n          0x98ad: 0x4e8a,\n          0x98ae: 0x8212,\n          0x98af: 0x5f0d,\n          0x98b0: 0x4e8e,\n          0x98b1: 0x4e9e,\n          0x98b2: 0x4e9f,\n          0x98b3: 0x4ea0,\n          0x98b4: 0x4ea2,\n          0x98b5: 0x4eb0,\n          0x98b6: 0x4eb3,\n          0x98b7: 0x4eb6,\n          0x98b8: 0x4ece,\n          0x98b9: 0x4ecd,\n          0x98ba: 0x4ec4,\n          0x98bb: 0x4ec6,\n          0x98bc: 0x4ec2,\n          0x98bd: 0x4ed7,\n          0x98be: 0x4ede,\n          0x98bf: 0x4eed,\n          0x98c0: 0x4edf,\n          0x98c1: 0x4ef7,\n          0x98c2: 0x4f09,\n          0x98c3: 0x4f5a,\n          0x98c4: 0x4f30,\n          0x98c5: 0x4f5b,\n          0x98c6: 0x4f5d,\n          0x98c7: 0x4f57,\n          0x98c8: 0x4f47,\n          0x98c9: 0x4f76,\n          0x98ca: 0x4f88,\n          0x98cb: 0x4f8f,\n          0x98cc: 0x4f98,\n          0x98cd: 0x4f7b,\n          0x98ce: 0x4f69,\n          0x98cf: 0x4f70,\n          0x98d0: 0x4f91,\n          0x98d1: 0x4f6f,\n          0x98d2: 0x4f86,\n          0x98d3: 0x4f96,\n          0x98d4: 0x5118,\n          0x98d5: 0x4fd4,\n          0x98d6: 0x4fdf,\n          0x98d7: 0x4fce,\n          0x98d8: 0x4fd8,\n          0x98d9: 0x4fdb,\n          0x98da: 0x4fd1,\n          0x98db: 0x4fda,\n          0x98dc: 0x4fd0,\n          0x98dd: 0x4fe4,\n          0x98de: 0x4fe5,\n          0x98df: 0x501a,\n          0x98e0: 0x5028,\n          0x98e1: 0x5014,\n          0x98e2: 0x502a,\n          0x98e3: 0x5025,\n          0x98e4: 0x5005,\n          0x98e5: 0x4f1c,\n          0x98e6: 0x4ff6,\n          0x98e7: 0x5021,\n          0x98e8: 0x5029,\n          0x98e9: 0x502c,\n          0x98ea: 0x4ffe,\n          0x98eb: 0x4fef,\n          0x98ec: 0x5011,\n          0x98ed: 0x5006,\n          0x98ee: 0x5043,\n          0x98ef: 0x5047,\n          0x98f0: 0x6703,\n          0x98f1: 0x5055,\n          0x98f2: 0x5050,\n          0x98f3: 0x5048,\n          0x98f4: 0x505a,\n          0x98f5: 0x5056,\n          0x98f6: 0x506c,\n          0x98f7: 0x5078,\n          0x98f8: 0x5080,\n          0x98f9: 0x509a,\n          0x98fa: 0x5085,\n          0x98fb: 0x50b4,\n          0x98fc: 0x50b2,\n          0x9940: 0x50c9,\n          0x9941: 0x50ca,\n          0x9942: 0x50b3,\n          0x9943: 0x50c2,\n          0x9944: 0x50d6,\n          0x9945: 0x50de,\n          0x9946: 0x50e5,\n          0x9947: 0x50ed,\n          0x9948: 0x50e3,\n          0x9949: 0x50ee,\n          0x994a: 0x50f9,\n          0x994b: 0x50f5,\n          0x994c: 0x5109,\n          0x994d: 0x5101,\n          0x994e: 0x5102,\n          0x994f: 0x5116,\n          0x9950: 0x5115,\n          0x9951: 0x5114,\n          0x9952: 0x511a,\n          0x9953: 0x5121,\n          0x9954: 0x513a,\n          0x9955: 0x5137,\n          0x9956: 0x513c,\n          0x9957: 0x513b,\n          0x9958: 0x513f,\n          0x9959: 0x5140,\n          0x995a: 0x5152,\n          0x995b: 0x514c,\n          0x995c: 0x5154,\n          0x995d: 0x5162,\n          0x995e: 0x7af8,\n          0x995f: 0x5169,\n          0x9960: 0x516a,\n          0x9961: 0x516e,\n          0x9962: 0x5180,\n          0x9963: 0x5182,\n          0x9964: 0x56d8,\n          0x9965: 0x518c,\n          0x9966: 0x5189,\n          0x9967: 0x518f,\n          0x9968: 0x5191,\n          0x9969: 0x5193,\n          0x996a: 0x5195,\n          0x996b: 0x5196,\n          0x996c: 0x51a4,\n          0x996d: 0x51a6,\n          0x996e: 0x51a2,\n          0x996f: 0x51a9,\n          0x9970: 0x51aa,\n          0x9971: 0x51ab,\n          0x9972: 0x51b3,\n          0x9973: 0x51b1,\n          0x9974: 0x51b2,\n          0x9975: 0x51b0,\n          0x9976: 0x51b5,\n          0x9977: 0x51bd,\n          0x9978: 0x51c5,\n          0x9979: 0x51c9,\n          0x997a: 0x51db,\n          0x997b: 0x51e0,\n          0x997c: 0x8655,\n          0x997d: 0x51e9,\n          0x997e: 0x51ed,\n          0x9980: 0x51f0,\n          0x9981: 0x51f5,\n          0x9982: 0x51fe,\n          0x9983: 0x5204,\n          0x9984: 0x520b,\n          0x9985: 0x5214,\n          0x9986: 0x520e,\n          0x9987: 0x5227,\n          0x9988: 0x522a,\n          0x9989: 0x522e,\n          0x998a: 0x5233,\n          0x998b: 0x5239,\n          0x998c: 0x524f,\n          0x998d: 0x5244,\n          0x998e: 0x524b,\n          0x998f: 0x524c,\n          0x9990: 0x525e,\n          0x9991: 0x5254,\n          0x9992: 0x526a,\n          0x9993: 0x5274,\n          0x9994: 0x5269,\n          0x9995: 0x5273,\n          0x9996: 0x527f,\n          0x9997: 0x527d,\n          0x9998: 0x528d,\n          0x9999: 0x5294,\n          0x999a: 0x5292,\n          0x999b: 0x5271,\n          0x999c: 0x5288,\n          0x999d: 0x5291,\n          0x999e: 0x8fa8,\n          0x999f: 0x8fa7,\n          0x99a0: 0x52ac,\n          0x99a1: 0x52ad,\n          0x99a2: 0x52bc,\n          0x99a3: 0x52b5,\n          0x99a4: 0x52c1,\n          0x99a5: 0x52cd,\n          0x99a6: 0x52d7,\n          0x99a7: 0x52de,\n          0x99a8: 0x52e3,\n          0x99a9: 0x52e6,\n          0x99aa: 0x98ed,\n          0x99ab: 0x52e0,\n          0x99ac: 0x52f3,\n          0x99ad: 0x52f5,\n          0x99ae: 0x52f8,\n          0x99af: 0x52f9,\n          0x99b0: 0x5306,\n          0x99b1: 0x5308,\n          0x99b2: 0x7538,\n          0x99b3: 0x530d,\n          0x99b4: 0x5310,\n          0x99b5: 0x530f,\n          0x99b6: 0x5315,\n          0x99b7: 0x531a,\n          0x99b8: 0x5323,\n          0x99b9: 0x532f,\n          0x99ba: 0x5331,\n          0x99bb: 0x5333,\n          0x99bc: 0x5338,\n          0x99bd: 0x5340,\n          0x99be: 0x5346,\n          0x99bf: 0x5345,\n          0x99c0: 0x4e17,\n          0x99c1: 0x5349,\n          0x99c2: 0x534d,\n          0x99c3: 0x51d6,\n          0x99c4: 0x535e,\n          0x99c5: 0x5369,\n          0x99c6: 0x536e,\n          0x99c7: 0x5918,\n          0x99c8: 0x537b,\n          0x99c9: 0x5377,\n          0x99ca: 0x5382,\n          0x99cb: 0x5396,\n          0x99cc: 0x53a0,\n          0x99cd: 0x53a6,\n          0x99ce: 0x53a5,\n          0x99cf: 0x53ae,\n          0x99d0: 0x53b0,\n          0x99d1: 0x53b6,\n          0x99d2: 0x53c3,\n          0x99d3: 0x7c12,\n          0x99d4: 0x96d9,\n          0x99d5: 0x53df,\n          0x99d6: 0x66fc,\n          0x99d7: 0x71ee,\n          0x99d8: 0x53ee,\n          0x99d9: 0x53e8,\n          0x99da: 0x53ed,\n          0x99db: 0x53fa,\n          0x99dc: 0x5401,\n          0x99dd: 0x543d,\n          0x99de: 0x5440,\n          0x99df: 0x542c,\n          0x99e0: 0x542d,\n          0x99e1: 0x543c,\n          0x99e2: 0x542e,\n          0x99e3: 0x5436,\n          0x99e4: 0x5429,\n          0x99e5: 0x541d,\n          0x99e6: 0x544e,\n          0x99e7: 0x548f,\n          0x99e8: 0x5475,\n          0x99e9: 0x548e,\n          0x99ea: 0x545f,\n          0x99eb: 0x5471,\n          0x99ec: 0x5477,\n          0x99ed: 0x5470,\n          0x99ee: 0x5492,\n          0x99ef: 0x547b,\n          0x99f0: 0x5480,\n          0x99f1: 0x5476,\n          0x99f2: 0x5484,\n          0x99f3: 0x5490,\n          0x99f4: 0x5486,\n          0x99f5: 0x54c7,\n          0x99f6: 0x54a2,\n          0x99f7: 0x54b8,\n          0x99f8: 0x54a5,\n          0x99f9: 0x54ac,\n          0x99fa: 0x54c4,\n          0x99fb: 0x54c8,\n          0x99fc: 0x54a8,\n          0x9a40: 0x54ab,\n          0x9a41: 0x54c2,\n          0x9a42: 0x54a4,\n          0x9a43: 0x54be,\n          0x9a44: 0x54bc,\n          0x9a45: 0x54d8,\n          0x9a46: 0x54e5,\n          0x9a47: 0x54e6,\n          0x9a48: 0x550f,\n          0x9a49: 0x5514,\n          0x9a4a: 0x54fd,\n          0x9a4b: 0x54ee,\n          0x9a4c: 0x54ed,\n          0x9a4d: 0x54fa,\n          0x9a4e: 0x54e2,\n          0x9a4f: 0x5539,\n          0x9a50: 0x5540,\n          0x9a51: 0x5563,\n          0x9a52: 0x554c,\n          0x9a53: 0x552e,\n          0x9a54: 0x555c,\n          0x9a55: 0x5545,\n          0x9a56: 0x5556,\n          0x9a57: 0x5557,\n          0x9a58: 0x5538,\n          0x9a59: 0x5533,\n          0x9a5a: 0x555d,\n          0x9a5b: 0x5599,\n          0x9a5c: 0x5580,\n          0x9a5d: 0x54af,\n          0x9a5e: 0x558a,\n          0x9a5f: 0x559f,\n          0x9a60: 0x557b,\n          0x9a61: 0x557e,\n          0x9a62: 0x5598,\n          0x9a63: 0x559e,\n          0x9a64: 0x55ae,\n          0x9a65: 0x557c,\n          0x9a66: 0x5583,\n          0x9a67: 0x55a9,\n          0x9a68: 0x5587,\n          0x9a69: 0x55a8,\n          0x9a6a: 0x55da,\n          0x9a6b: 0x55c5,\n          0x9a6c: 0x55df,\n          0x9a6d: 0x55c4,\n          0x9a6e: 0x55dc,\n          0x9a6f: 0x55e4,\n          0x9a70: 0x55d4,\n          0x9a71: 0x5614,\n          0x9a72: 0x55f7,\n          0x9a73: 0x5616,\n          0x9a74: 0x55fe,\n          0x9a75: 0x55fd,\n          0x9a76: 0x561b,\n          0x9a77: 0x55f9,\n          0x9a78: 0x564e,\n          0x9a79: 0x5650,\n          0x9a7a: 0x71df,\n          0x9a7b: 0x5634,\n          0x9a7c: 0x5636,\n          0x9a7d: 0x5632,\n          0x9a7e: 0x5638,\n          0x9a80: 0x566b,\n          0x9a81: 0x5664,\n          0x9a82: 0x562f,\n          0x9a83: 0x566c,\n          0x9a84: 0x566a,\n          0x9a85: 0x5686,\n          0x9a86: 0x5680,\n          0x9a87: 0x568a,\n          0x9a88: 0x56a0,\n          0x9a89: 0x5694,\n          0x9a8a: 0x568f,\n          0x9a8b: 0x56a5,\n          0x9a8c: 0x56ae,\n          0x9a8d: 0x56b6,\n          0x9a8e: 0x56b4,\n          0x9a8f: 0x56c2,\n          0x9a90: 0x56bc,\n          0x9a91: 0x56c1,\n          0x9a92: 0x56c3,\n          0x9a93: 0x56c0,\n          0x9a94: 0x56c8,\n          0x9a95: 0x56ce,\n          0x9a96: 0x56d1,\n          0x9a97: 0x56d3,\n          0x9a98: 0x56d7,\n          0x9a99: 0x56ee,\n          0x9a9a: 0x56f9,\n          0x9a9b: 0x5700,\n          0x9a9c: 0x56ff,\n          0x9a9d: 0x5704,\n          0x9a9e: 0x5709,\n          0x9a9f: 0x5708,\n          0x9aa0: 0x570b,\n          0x9aa1: 0x570d,\n          0x9aa2: 0x5713,\n          0x9aa3: 0x5718,\n          0x9aa4: 0x5716,\n          0x9aa5: 0x55c7,\n          0x9aa6: 0x571c,\n          0x9aa7: 0x5726,\n          0x9aa8: 0x5737,\n          0x9aa9: 0x5738,\n          0x9aaa: 0x574e,\n          0x9aab: 0x573b,\n          0x9aac: 0x5740,\n          0x9aad: 0x574f,\n          0x9aae: 0x5769,\n          0x9aaf: 0x57c0,\n          0x9ab0: 0x5788,\n          0x9ab1: 0x5761,\n          0x9ab2: 0x577f,\n          0x9ab3: 0x5789,\n          0x9ab4: 0x5793,\n          0x9ab5: 0x57a0,\n          0x9ab6: 0x57b3,\n          0x9ab7: 0x57a4,\n          0x9ab8: 0x57aa,\n          0x9ab9: 0x57b0,\n          0x9aba: 0x57c3,\n          0x9abb: 0x57c6,\n          0x9abc: 0x57d4,\n          0x9abd: 0x57d2,\n          0x9abe: 0x57d3,\n          0x9abf: 0x580a,\n          0x9ac0: 0x57d6,\n          0x9ac1: 0x57e3,\n          0x9ac2: 0x580b,\n          0x9ac3: 0x5819,\n          0x9ac4: 0x581d,\n          0x9ac5: 0x5872,\n          0x9ac6: 0x5821,\n          0x9ac7: 0x5862,\n          0x9ac8: 0x584b,\n          0x9ac9: 0x5870,\n          0x9aca: 0x6bc0,\n          0x9acb: 0x5852,\n          0x9acc: 0x583d,\n          0x9acd: 0x5879,\n          0x9ace: 0x5885,\n          0x9acf: 0x58b9,\n          0x9ad0: 0x589f,\n          0x9ad1: 0x58ab,\n          0x9ad2: 0x58ba,\n          0x9ad3: 0x58de,\n          0x9ad4: 0x58bb,\n          0x9ad5: 0x58b8,\n          0x9ad6: 0x58ae,\n          0x9ad7: 0x58c5,\n          0x9ad8: 0x58d3,\n          0x9ad9: 0x58d1,\n          0x9ada: 0x58d7,\n          0x9adb: 0x58d9,\n          0x9adc: 0x58d8,\n          0x9add: 0x58e5,\n          0x9ade: 0x58dc,\n          0x9adf: 0x58e4,\n          0x9ae0: 0x58df,\n          0x9ae1: 0x58ef,\n          0x9ae2: 0x58fa,\n          0x9ae3: 0x58f9,\n          0x9ae4: 0x58fb,\n          0x9ae5: 0x58fc,\n          0x9ae6: 0x58fd,\n          0x9ae7: 0x5902,\n          0x9ae8: 0x590a,\n          0x9ae9: 0x5910,\n          0x9aea: 0x591b,\n          0x9aeb: 0x68a6,\n          0x9aec: 0x5925,\n          0x9aed: 0x592c,\n          0x9aee: 0x592d,\n          0x9aef: 0x5932,\n          0x9af0: 0x5938,\n          0x9af1: 0x593e,\n          0x9af2: 0x7ad2,\n          0x9af3: 0x5955,\n          0x9af4: 0x5950,\n          0x9af5: 0x594e,\n          0x9af6: 0x595a,\n          0x9af7: 0x5958,\n          0x9af8: 0x5962,\n          0x9af9: 0x5960,\n          0x9afa: 0x5967,\n          0x9afb: 0x596c,\n          0x9afc: 0x5969,\n          0x9b40: 0x5978,\n          0x9b41: 0x5981,\n          0x9b42: 0x599d,\n          0x9b43: 0x4f5e,\n          0x9b44: 0x4fab,\n          0x9b45: 0x59a3,\n          0x9b46: 0x59b2,\n          0x9b47: 0x59c6,\n          0x9b48: 0x59e8,\n          0x9b49: 0x59dc,\n          0x9b4a: 0x598d,\n          0x9b4b: 0x59d9,\n          0x9b4c: 0x59da,\n          0x9b4d: 0x5a25,\n          0x9b4e: 0x5a1f,\n          0x9b4f: 0x5a11,\n          0x9b50: 0x5a1c,\n          0x9b51: 0x5a09,\n          0x9b52: 0x5a1a,\n          0x9b53: 0x5a40,\n          0x9b54: 0x5a6c,\n          0x9b55: 0x5a49,\n          0x9b56: 0x5a35,\n          0x9b57: 0x5a36,\n          0x9b58: 0x5a62,\n          0x9b59: 0x5a6a,\n          0x9b5a: 0x5a9a,\n          0x9b5b: 0x5abc,\n          0x9b5c: 0x5abe,\n          0x9b5d: 0x5acb,\n          0x9b5e: 0x5ac2,\n          0x9b5f: 0x5abd,\n          0x9b60: 0x5ae3,\n          0x9b61: 0x5ad7,\n          0x9b62: 0x5ae6,\n          0x9b63: 0x5ae9,\n          0x9b64: 0x5ad6,\n          0x9b65: 0x5afa,\n          0x9b66: 0x5afb,\n          0x9b67: 0x5b0c,\n          0x9b68: 0x5b0b,\n          0x9b69: 0x5b16,\n          0x9b6a: 0x5b32,\n          0x9b6b: 0x5ad0,\n          0x9b6c: 0x5b2a,\n          0x9b6d: 0x5b36,\n          0x9b6e: 0x5b3e,\n          0x9b6f: 0x5b43,\n          0x9b70: 0x5b45,\n          0x9b71: 0x5b40,\n          0x9b72: 0x5b51,\n          0x9b73: 0x5b55,\n          0x9b74: 0x5b5a,\n          0x9b75: 0x5b5b,\n          0x9b76: 0x5b65,\n          0x9b77: 0x5b69,\n          0x9b78: 0x5b70,\n          0x9b79: 0x5b73,\n          0x9b7a: 0x5b75,\n          0x9b7b: 0x5b78,\n          0x9b7c: 0x6588,\n          0x9b7d: 0x5b7a,\n          0x9b7e: 0x5b80,\n          0x9b80: 0x5b83,\n          0x9b81: 0x5ba6,\n          0x9b82: 0x5bb8,\n          0x9b83: 0x5bc3,\n          0x9b84: 0x5bc7,\n          0x9b85: 0x5bc9,\n          0x9b86: 0x5bd4,\n          0x9b87: 0x5bd0,\n          0x9b88: 0x5be4,\n          0x9b89: 0x5be6,\n          0x9b8a: 0x5be2,\n          0x9b8b: 0x5bde,\n          0x9b8c: 0x5be5,\n          0x9b8d: 0x5beb,\n          0x9b8e: 0x5bf0,\n          0x9b8f: 0x5bf6,\n          0x9b90: 0x5bf3,\n          0x9b91: 0x5c05,\n          0x9b92: 0x5c07,\n          0x9b93: 0x5c08,\n          0x9b94: 0x5c0d,\n          0x9b95: 0x5c13,\n          0x9b96: 0x5c20,\n          0x9b97: 0x5c22,\n          0x9b98: 0x5c28,\n          0x9b99: 0x5c38,\n          0x9b9a: 0x5c39,\n          0x9b9b: 0x5c41,\n          0x9b9c: 0x5c46,\n          0x9b9d: 0x5c4e,\n          0x9b9e: 0x5c53,\n          0x9b9f: 0x5c50,\n          0x9ba0: 0x5c4f,\n          0x9ba1: 0x5b71,\n          0x9ba2: 0x5c6c,\n          0x9ba3: 0x5c6e,\n          0x9ba4: 0x4e62,\n          0x9ba5: 0x5c76,\n          0x9ba6: 0x5c79,\n          0x9ba7: 0x5c8c,\n          0x9ba8: 0x5c91,\n          0x9ba9: 0x5c94,\n          0x9baa: 0x599b,\n          0x9bab: 0x5cab,\n          0x9bac: 0x5cbb,\n          0x9bad: 0x5cb6,\n          0x9bae: 0x5cbc,\n          0x9baf: 0x5cb7,\n          0x9bb0: 0x5cc5,\n          0x9bb1: 0x5cbe,\n          0x9bb2: 0x5cc7,\n          0x9bb3: 0x5cd9,\n          0x9bb4: 0x5ce9,\n          0x9bb5: 0x5cfd,\n          0x9bb6: 0x5cfa,\n          0x9bb7: 0x5ced,\n          0x9bb8: 0x5d8c,\n          0x9bb9: 0x5cea,\n          0x9bba: 0x5d0b,\n          0x9bbb: 0x5d15,\n          0x9bbc: 0x5d17,\n          0x9bbd: 0x5d5c,\n          0x9bbe: 0x5d1f,\n          0x9bbf: 0x5d1b,\n          0x9bc0: 0x5d11,\n          0x9bc1: 0x5d14,\n          0x9bc2: 0x5d22,\n          0x9bc3: 0x5d1a,\n          0x9bc4: 0x5d19,\n          0x9bc5: 0x5d18,\n          0x9bc6: 0x5d4c,\n          0x9bc7: 0x5d52,\n          0x9bc8: 0x5d4e,\n          0x9bc9: 0x5d4b,\n          0x9bca: 0x5d6c,\n          0x9bcb: 0x5d73,\n          0x9bcc: 0x5d76,\n          0x9bcd: 0x5d87,\n          0x9bce: 0x5d84,\n          0x9bcf: 0x5d82,\n          0x9bd0: 0x5da2,\n          0x9bd1: 0x5d9d,\n          0x9bd2: 0x5dac,\n          0x9bd3: 0x5dae,\n          0x9bd4: 0x5dbd,\n          0x9bd5: 0x5d90,\n          0x9bd6: 0x5db7,\n          0x9bd7: 0x5dbc,\n          0x9bd8: 0x5dc9,\n          0x9bd9: 0x5dcd,\n          0x9bda: 0x5dd3,\n          0x9bdb: 0x5dd2,\n          0x9bdc: 0x5dd6,\n          0x9bdd: 0x5ddb,\n          0x9bde: 0x5deb,\n          0x9bdf: 0x5df2,\n          0x9be0: 0x5df5,\n          0x9be1: 0x5e0b,\n          0x9be2: 0x5e1a,\n          0x9be3: 0x5e19,\n          0x9be4: 0x5e11,\n          0x9be5: 0x5e1b,\n          0x9be6: 0x5e36,\n          0x9be7: 0x5e37,\n          0x9be8: 0x5e44,\n          0x9be9: 0x5e43,\n          0x9bea: 0x5e40,\n          0x9beb: 0x5e4e,\n          0x9bec: 0x5e57,\n          0x9bed: 0x5e54,\n          0x9bee: 0x5e5f,\n          0x9bef: 0x5e62,\n          0x9bf0: 0x5e64,\n          0x9bf1: 0x5e47,\n          0x9bf2: 0x5e75,\n          0x9bf3: 0x5e76,\n          0x9bf4: 0x5e7a,\n          0x9bf5: 0x9ebc,\n          0x9bf6: 0x5e7f,\n          0x9bf7: 0x5ea0,\n          0x9bf8: 0x5ec1,\n          0x9bf9: 0x5ec2,\n          0x9bfa: 0x5ec8,\n          0x9bfb: 0x5ed0,\n          0x9bfc: 0x5ecf,\n          0x9c40: 0x5ed6,\n          0x9c41: 0x5ee3,\n          0x9c42: 0x5edd,\n          0x9c43: 0x5eda,\n          0x9c44: 0x5edb,\n          0x9c45: 0x5ee2,\n          0x9c46: 0x5ee1,\n          0x9c47: 0x5ee8,\n          0x9c48: 0x5ee9,\n          0x9c49: 0x5eec,\n          0x9c4a: 0x5ef1,\n          0x9c4b: 0x5ef3,\n          0x9c4c: 0x5ef0,\n          0x9c4d: 0x5ef4,\n          0x9c4e: 0x5ef8,\n          0x9c4f: 0x5efe,\n          0x9c50: 0x5f03,\n          0x9c51: 0x5f09,\n          0x9c52: 0x5f5d,\n          0x9c53: 0x5f5c,\n          0x9c54: 0x5f0b,\n          0x9c55: 0x5f11,\n          0x9c56: 0x5f16,\n          0x9c57: 0x5f29,\n          0x9c58: 0x5f2d,\n          0x9c59: 0x5f38,\n          0x9c5a: 0x5f41,\n          0x9c5b: 0x5f48,\n          0x9c5c: 0x5f4c,\n          0x9c5d: 0x5f4e,\n          0x9c5e: 0x5f2f,\n          0x9c5f: 0x5f51,\n          0x9c60: 0x5f56,\n          0x9c61: 0x5f57,\n          0x9c62: 0x5f59,\n          0x9c63: 0x5f61,\n          0x9c64: 0x5f6d,\n          0x9c65: 0x5f73,\n          0x9c66: 0x5f77,\n          0x9c67: 0x5f83,\n          0x9c68: 0x5f82,\n          0x9c69: 0x5f7f,\n          0x9c6a: 0x5f8a,\n          0x9c6b: 0x5f88,\n          0x9c6c: 0x5f91,\n          0x9c6d: 0x5f87,\n          0x9c6e: 0x5f9e,\n          0x9c6f: 0x5f99,\n          0x9c70: 0x5f98,\n          0x9c71: 0x5fa0,\n          0x9c72: 0x5fa8,\n          0x9c73: 0x5fad,\n          0x9c74: 0x5fbc,\n          0x9c75: 0x5fd6,\n          0x9c76: 0x5ffb,\n          0x9c77: 0x5fe4,\n          0x9c78: 0x5ff8,\n          0x9c79: 0x5ff1,\n          0x9c7a: 0x5fdd,\n          0x9c7b: 0x60b3,\n          0x9c7c: 0x5fff,\n          0x9c7d: 0x6021,\n          0x9c7e: 0x6060,\n          0x9c80: 0x6019,\n          0x9c81: 0x6010,\n          0x9c82: 0x6029,\n          0x9c83: 0x600e,\n          0x9c84: 0x6031,\n          0x9c85: 0x601b,\n          0x9c86: 0x6015,\n          0x9c87: 0x602b,\n          0x9c88: 0x6026,\n          0x9c89: 0x600f,\n          0x9c8a: 0x603a,\n          0x9c8b: 0x605a,\n          0x9c8c: 0x6041,\n          0x9c8d: 0x606a,\n          0x9c8e: 0x6077,\n          0x9c8f: 0x605f,\n          0x9c90: 0x604a,\n          0x9c91: 0x6046,\n          0x9c92: 0x604d,\n          0x9c93: 0x6063,\n          0x9c94: 0x6043,\n          0x9c95: 0x6064,\n          0x9c96: 0x6042,\n          0x9c97: 0x606c,\n          0x9c98: 0x606b,\n          0x9c99: 0x6059,\n          0x9c9a: 0x6081,\n          0x9c9b: 0x608d,\n          0x9c9c: 0x60e7,\n          0x9c9d: 0x6083,\n          0x9c9e: 0x609a,\n          0x9c9f: 0x6084,\n          0x9ca0: 0x609b,\n          0x9ca1: 0x6096,\n          0x9ca2: 0x6097,\n          0x9ca3: 0x6092,\n          0x9ca4: 0x60a7,\n          0x9ca5: 0x608b,\n          0x9ca6: 0x60e1,\n          0x9ca7: 0x60b8,\n          0x9ca8: 0x60e0,\n          0x9ca9: 0x60d3,\n          0x9caa: 0x60b4,\n          0x9cab: 0x5ff0,\n          0x9cac: 0x60bd,\n          0x9cad: 0x60c6,\n          0x9cae: 0x60b5,\n          0x9caf: 0x60d8,\n          0x9cb0: 0x614d,\n          0x9cb1: 0x6115,\n          0x9cb2: 0x6106,\n          0x9cb3: 0x60f6,\n          0x9cb4: 0x60f7,\n          0x9cb5: 0x6100,\n          0x9cb6: 0x60f4,\n          0x9cb7: 0x60fa,\n          0x9cb8: 0x6103,\n          0x9cb9: 0x6121,\n          0x9cba: 0x60fb,\n          0x9cbb: 0x60f1,\n          0x9cbc: 0x610d,\n          0x9cbd: 0x610e,\n          0x9cbe: 0x6147,\n          0x9cbf: 0x613e,\n          0x9cc0: 0x6128,\n          0x9cc1: 0x6127,\n          0x9cc2: 0x614a,\n          0x9cc3: 0x613f,\n          0x9cc4: 0x613c,\n          0x9cc5: 0x612c,\n          0x9cc6: 0x6134,\n          0x9cc7: 0x613d,\n          0x9cc8: 0x6142,\n          0x9cc9: 0x6144,\n          0x9cca: 0x6173,\n          0x9ccb: 0x6177,\n          0x9ccc: 0x6158,\n          0x9ccd: 0x6159,\n          0x9cce: 0x615a,\n          0x9ccf: 0x616b,\n          0x9cd0: 0x6174,\n          0x9cd1: 0x616f,\n          0x9cd2: 0x6165,\n          0x9cd3: 0x6171,\n          0x9cd4: 0x615f,\n          0x9cd5: 0x615d,\n          0x9cd6: 0x6153,\n          0x9cd7: 0x6175,\n          0x9cd8: 0x6199,\n          0x9cd9: 0x6196,\n          0x9cda: 0x6187,\n          0x9cdb: 0x61ac,\n          0x9cdc: 0x6194,\n          0x9cdd: 0x619a,\n          0x9cde: 0x618a,\n          0x9cdf: 0x6191,\n          0x9ce0: 0x61ab,\n          0x9ce1: 0x61ae,\n          0x9ce2: 0x61cc,\n          0x9ce3: 0x61ca,\n          0x9ce4: 0x61c9,\n          0x9ce5: 0x61f7,\n          0x9ce6: 0x61c8,\n          0x9ce7: 0x61c3,\n          0x9ce8: 0x61c6,\n          0x9ce9: 0x61ba,\n          0x9cea: 0x61cb,\n          0x9ceb: 0x7f79,\n          0x9cec: 0x61cd,\n          0x9ced: 0x61e6,\n          0x9cee: 0x61e3,\n          0x9cef: 0x61f6,\n          0x9cf0: 0x61fa,\n          0x9cf1: 0x61f4,\n          0x9cf2: 0x61ff,\n          0x9cf3: 0x61fd,\n          0x9cf4: 0x61fc,\n          0x9cf5: 0x61fe,\n          0x9cf6: 0x6200,\n          0x9cf7: 0x6208,\n          0x9cf8: 0x6209,\n          0x9cf9: 0x620d,\n          0x9cfa: 0x620c,\n          0x9cfb: 0x6214,\n          0x9cfc: 0x621b,\n          0x9d40: 0x621e,\n          0x9d41: 0x6221,\n          0x9d42: 0x622a,\n          0x9d43: 0x622e,\n          0x9d44: 0x6230,\n          0x9d45: 0x6232,\n          0x9d46: 0x6233,\n          0x9d47: 0x6241,\n          0x9d48: 0x624e,\n          0x9d49: 0x625e,\n          0x9d4a: 0x6263,\n          0x9d4b: 0x625b,\n          0x9d4c: 0x6260,\n          0x9d4d: 0x6268,\n          0x9d4e: 0x627c,\n          0x9d4f: 0x6282,\n          0x9d50: 0x6289,\n          0x9d51: 0x627e,\n          0x9d52: 0x6292,\n          0x9d53: 0x6293,\n          0x9d54: 0x6296,\n          0x9d55: 0x62d4,\n          0x9d56: 0x6283,\n          0x9d57: 0x6294,\n          0x9d58: 0x62d7,\n          0x9d59: 0x62d1,\n          0x9d5a: 0x62bb,\n          0x9d5b: 0x62cf,\n          0x9d5c: 0x62ff,\n          0x9d5d: 0x62c6,\n          0x9d5e: 0x64d4,\n          0x9d5f: 0x62c8,\n          0x9d60: 0x62dc,\n          0x9d61: 0x62cc,\n          0x9d62: 0x62ca,\n          0x9d63: 0x62c2,\n          0x9d64: 0x62c7,\n          0x9d65: 0x629b,\n          0x9d66: 0x62c9,\n          0x9d67: 0x630c,\n          0x9d68: 0x62ee,\n          0x9d69: 0x62f1,\n          0x9d6a: 0x6327,\n          0x9d6b: 0x6302,\n          0x9d6c: 0x6308,\n          0x9d6d: 0x62ef,\n          0x9d6e: 0x62f5,\n          0x9d6f: 0x6350,\n          0x9d70: 0x633e,\n          0x9d71: 0x634d,\n          0x9d72: 0x641c,\n          0x9d73: 0x634f,\n          0x9d74: 0x6396,\n          0x9d75: 0x638e,\n          0x9d76: 0x6380,\n          0x9d77: 0x63ab,\n          0x9d78: 0x6376,\n          0x9d79: 0x63a3,\n          0x9d7a: 0x638f,\n          0x9d7b: 0x6389,\n          0x9d7c: 0x639f,\n          0x9d7d: 0x63b5,\n          0x9d7e: 0x636b,\n          0x9d80: 0x6369,\n          0x9d81: 0x63be,\n          0x9d82: 0x63e9,\n          0x9d83: 0x63c0,\n          0x9d84: 0x63c6,\n          0x9d85: 0x63e3,\n          0x9d86: 0x63c9,\n          0x9d87: 0x63d2,\n          0x9d88: 0x63f6,\n          0x9d89: 0x63c4,\n          0x9d8a: 0x6416,\n          0x9d8b: 0x6434,\n          0x9d8c: 0x6406,\n          0x9d8d: 0x6413,\n          0x9d8e: 0x6426,\n          0x9d8f: 0x6436,\n          0x9d90: 0x651d,\n          0x9d91: 0x6417,\n          0x9d92: 0x6428,\n          0x9d93: 0x640f,\n          0x9d94: 0x6467,\n          0x9d95: 0x646f,\n          0x9d96: 0x6476,\n          0x9d97: 0x644e,\n          0x9d98: 0x652a,\n          0x9d99: 0x6495,\n          0x9d9a: 0x6493,\n          0x9d9b: 0x64a5,\n          0x9d9c: 0x64a9,\n          0x9d9d: 0x6488,\n          0x9d9e: 0x64bc,\n          0x9d9f: 0x64da,\n          0x9da0: 0x64d2,\n          0x9da1: 0x64c5,\n          0x9da2: 0x64c7,\n          0x9da3: 0x64bb,\n          0x9da4: 0x64d8,\n          0x9da5: 0x64c2,\n          0x9da6: 0x64f1,\n          0x9da7: 0x64e7,\n          0x9da8: 0x8209,\n          0x9da9: 0x64e0,\n          0x9daa: 0x64e1,\n          0x9dab: 0x62ac,\n          0x9dac: 0x64e3,\n          0x9dad: 0x64ef,\n          0x9dae: 0x652c,\n          0x9daf: 0x64f6,\n          0x9db0: 0x64f4,\n          0x9db1: 0x64f2,\n          0x9db2: 0x64fa,\n          0x9db3: 0x6500,\n          0x9db4: 0x64fd,\n          0x9db5: 0x6518,\n          0x9db6: 0x651c,\n          0x9db7: 0x6505,\n          0x9db8: 0x6524,\n          0x9db9: 0x6523,\n          0x9dba: 0x652b,\n          0x9dbb: 0x6534,\n          0x9dbc: 0x6535,\n          0x9dbd: 0x6537,\n          0x9dbe: 0x6536,\n          0x9dbf: 0x6538,\n          0x9dc0: 0x754b,\n          0x9dc1: 0x6548,\n          0x9dc2: 0x6556,\n          0x9dc3: 0x6555,\n          0x9dc4: 0x654d,\n          0x9dc5: 0x6558,\n          0x9dc6: 0x655e,\n          0x9dc7: 0x655d,\n          0x9dc8: 0x6572,\n          0x9dc9: 0x6578,\n          0x9dca: 0x6582,\n          0x9dcb: 0x6583,\n          0x9dcc: 0x8b8a,\n          0x9dcd: 0x659b,\n          0x9dce: 0x659f,\n          0x9dcf: 0x65ab,\n          0x9dd0: 0x65b7,\n          0x9dd1: 0x65c3,\n          0x9dd2: 0x65c6,\n          0x9dd3: 0x65c1,\n          0x9dd4: 0x65c4,\n          0x9dd5: 0x65cc,\n          0x9dd6: 0x65d2,\n          0x9dd7: 0x65db,\n          0x9dd8: 0x65d9,\n          0x9dd9: 0x65e0,\n          0x9dda: 0x65e1,\n          0x9ddb: 0x65f1,\n          0x9ddc: 0x6772,\n          0x9ddd: 0x660a,\n          0x9dde: 0x6603,\n          0x9ddf: 0x65fb,\n          0x9de0: 0x6773,\n          0x9de1: 0x6635,\n          0x9de2: 0x6636,\n          0x9de3: 0x6634,\n          0x9de4: 0x661c,\n          0x9de5: 0x664f,\n          0x9de6: 0x6644,\n          0x9de7: 0x6649,\n          0x9de8: 0x6641,\n          0x9de9: 0x665e,\n          0x9dea: 0x665d,\n          0x9deb: 0x6664,\n          0x9dec: 0x6667,\n          0x9ded: 0x6668,\n          0x9dee: 0x665f,\n          0x9def: 0x6662,\n          0x9df0: 0x6670,\n          0x9df1: 0x6683,\n          0x9df2: 0x6688,\n          0x9df3: 0x668e,\n          0x9df4: 0x6689,\n          0x9df5: 0x6684,\n          0x9df6: 0x6698,\n          0x9df7: 0x669d,\n          0x9df8: 0x66c1,\n          0x9df9: 0x66b9,\n          0x9dfa: 0x66c9,\n          0x9dfb: 0x66be,\n          0x9dfc: 0x66bc,\n          0x9e40: 0x66c4,\n          0x9e41: 0x66b8,\n          0x9e42: 0x66d6,\n          0x9e43: 0x66da,\n          0x9e44: 0x66e0,\n          0x9e45: 0x663f,\n          0x9e46: 0x66e6,\n          0x9e47: 0x66e9,\n          0x9e48: 0x66f0,\n          0x9e49: 0x66f5,\n          0x9e4a: 0x66f7,\n          0x9e4b: 0x670f,\n          0x9e4c: 0x6716,\n          0x9e4d: 0x671e,\n          0x9e4e: 0x6726,\n          0x9e4f: 0x6727,\n          0x9e50: 0x9738,\n          0x9e51: 0x672e,\n          0x9e52: 0x673f,\n          0x9e53: 0x6736,\n          0x9e54: 0x6741,\n          0x9e55: 0x6738,\n          0x9e56: 0x6737,\n          0x9e57: 0x6746,\n          0x9e58: 0x675e,\n          0x9e59: 0x6760,\n          0x9e5a: 0x6759,\n          0x9e5b: 0x6763,\n          0x9e5c: 0x6764,\n          0x9e5d: 0x6789,\n          0x9e5e: 0x6770,\n          0x9e5f: 0x67a9,\n          0x9e60: 0x677c,\n          0x9e61: 0x676a,\n          0x9e62: 0x678c,\n          0x9e63: 0x678b,\n          0x9e64: 0x67a6,\n          0x9e65: 0x67a1,\n          0x9e66: 0x6785,\n          0x9e67: 0x67b7,\n          0x9e68: 0x67ef,\n          0x9e69: 0x67b4,\n          0x9e6a: 0x67ec,\n          0x9e6b: 0x67b3,\n          0x9e6c: 0x67e9,\n          0x9e6d: 0x67b8,\n          0x9e6e: 0x67e4,\n          0x9e6f: 0x67de,\n          0x9e70: 0x67dd,\n          0x9e71: 0x67e2,\n          0x9e72: 0x67ee,\n          0x9e73: 0x67b9,\n          0x9e74: 0x67ce,\n          0x9e75: 0x67c6,\n          0x9e76: 0x67e7,\n          0x9e77: 0x6a9c,\n          0x9e78: 0x681e,\n          0x9e79: 0x6846,\n          0x9e7a: 0x6829,\n          0x9e7b: 0x6840,\n          0x9e7c: 0x684d,\n          0x9e7d: 0x6832,\n          0x9e7e: 0x684e,\n          0x9e80: 0x68b3,\n          0x9e81: 0x682b,\n          0x9e82: 0x6859,\n          0x9e83: 0x6863,\n          0x9e84: 0x6877,\n          0x9e85: 0x687f,\n          0x9e86: 0x689f,\n          0x9e87: 0x688f,\n          0x9e88: 0x68ad,\n          0x9e89: 0x6894,\n          0x9e8a: 0x689d,\n          0x9e8b: 0x689b,\n          0x9e8c: 0x6883,\n          0x9e8d: 0x6aae,\n          0x9e8e: 0x68b9,\n          0x9e8f: 0x6874,\n          0x9e90: 0x68b5,\n          0x9e91: 0x68a0,\n          0x9e92: 0x68ba,\n          0x9e93: 0x690f,\n          0x9e94: 0x688d,\n          0x9e95: 0x687e,\n          0x9e96: 0x6901,\n          0x9e97: 0x68ca,\n          0x9e98: 0x6908,\n          0x9e99: 0x68d8,\n          0x9e9a: 0x6922,\n          0x9e9b: 0x6926,\n          0x9e9c: 0x68e1,\n          0x9e9d: 0x690c,\n          0x9e9e: 0x68cd,\n          0x9e9f: 0x68d4,\n          0x9ea0: 0x68e7,\n          0x9ea1: 0x68d5,\n          0x9ea2: 0x6936,\n          0x9ea3: 0x6912,\n          0x9ea4: 0x6904,\n          0x9ea5: 0x68d7,\n          0x9ea6: 0x68e3,\n          0x9ea7: 0x6925,\n          0x9ea8: 0x68f9,\n          0x9ea9: 0x68e0,\n          0x9eaa: 0x68ef,\n          0x9eab: 0x6928,\n          0x9eac: 0x692a,\n          0x9ead: 0x691a,\n          0x9eae: 0x6923,\n          0x9eaf: 0x6921,\n          0x9eb0: 0x68c6,\n          0x9eb1: 0x6979,\n          0x9eb2: 0x6977,\n          0x9eb3: 0x695c,\n          0x9eb4: 0x6978,\n          0x9eb5: 0x696b,\n          0x9eb6: 0x6954,\n          0x9eb7: 0x697e,\n          0x9eb8: 0x696e,\n          0x9eb9: 0x6939,\n          0x9eba: 0x6974,\n          0x9ebb: 0x693d,\n          0x9ebc: 0x6959,\n          0x9ebd: 0x6930,\n          0x9ebe: 0x6961,\n          0x9ebf: 0x695e,\n          0x9ec0: 0x695d,\n          0x9ec1: 0x6981,\n          0x9ec2: 0x696a,\n          0x9ec3: 0x69b2,\n          0x9ec4: 0x69ae,\n          0x9ec5: 0x69d0,\n          0x9ec6: 0x69bf,\n          0x9ec7: 0x69c1,\n          0x9ec8: 0x69d3,\n          0x9ec9: 0x69be,\n          0x9eca: 0x69ce,\n          0x9ecb: 0x5be8,\n          0x9ecc: 0x69ca,\n          0x9ecd: 0x69dd,\n          0x9ece: 0x69bb,\n          0x9ecf: 0x69c3,\n          0x9ed0: 0x69a7,\n          0x9ed1: 0x6a2e,\n          0x9ed2: 0x6991,\n          0x9ed3: 0x69a0,\n          0x9ed4: 0x699c,\n          0x9ed5: 0x6995,\n          0x9ed6: 0x69b4,\n          0x9ed7: 0x69de,\n          0x9ed8: 0x69e8,\n          0x9ed9: 0x6a02,\n          0x9eda: 0x6a1b,\n          0x9edb: 0x69ff,\n          0x9edc: 0x6b0a,\n          0x9edd: 0x69f9,\n          0x9ede: 0x69f2,\n          0x9edf: 0x69e7,\n          0x9ee0: 0x6a05,\n          0x9ee1: 0x69b1,\n          0x9ee2: 0x6a1e,\n          0x9ee3: 0x69ed,\n          0x9ee4: 0x6a14,\n          0x9ee5: 0x69eb,\n          0x9ee6: 0x6a0a,\n          0x9ee7: 0x6a12,\n          0x9ee8: 0x6ac1,\n          0x9ee9: 0x6a23,\n          0x9eea: 0x6a13,\n          0x9eeb: 0x6a44,\n          0x9eec: 0x6a0c,\n          0x9eed: 0x6a72,\n          0x9eee: 0x6a36,\n          0x9eef: 0x6a78,\n          0x9ef0: 0x6a47,\n          0x9ef1: 0x6a62,\n          0x9ef2: 0x6a59,\n          0x9ef3: 0x6a66,\n          0x9ef4: 0x6a48,\n          0x9ef5: 0x6a38,\n          0x9ef6: 0x6a22,\n          0x9ef7: 0x6a90,\n          0x9ef8: 0x6a8d,\n          0x9ef9: 0x6aa0,\n          0x9efa: 0x6a84,\n          0x9efb: 0x6aa2,\n          0x9efc: 0x6aa3,\n          0x9f40: 0x6a97,\n          0x9f41: 0x8617,\n          0x9f42: 0x6abb,\n          0x9f43: 0x6ac3,\n          0x9f44: 0x6ac2,\n          0x9f45: 0x6ab8,\n          0x9f46: 0x6ab3,\n          0x9f47: 0x6aac,\n          0x9f48: 0x6ade,\n          0x9f49: 0x6ad1,\n          0x9f4a: 0x6adf,\n          0x9f4b: 0x6aaa,\n          0x9f4c: 0x6ada,\n          0x9f4d: 0x6aea,\n          0x9f4e: 0x6afb,\n          0x9f4f: 0x6b05,\n          0x9f50: 0x8616,\n          0x9f51: 0x6afa,\n          0x9f52: 0x6b12,\n          0x9f53: 0x6b16,\n          0x9f54: 0x9b31,\n          0x9f55: 0x6b1f,\n          0x9f56: 0x6b38,\n          0x9f57: 0x6b37,\n          0x9f58: 0x76dc,\n          0x9f59: 0x6b39,\n          0x9f5a: 0x98ee,\n          0x9f5b: 0x6b47,\n          0x9f5c: 0x6b43,\n          0x9f5d: 0x6b49,\n          0x9f5e: 0x6b50,\n          0x9f5f: 0x6b59,\n          0x9f60: 0x6b54,\n          0x9f61: 0x6b5b,\n          0x9f62: 0x6b5f,\n          0x9f63: 0x6b61,\n          0x9f64: 0x6b78,\n          0x9f65: 0x6b79,\n          0x9f66: 0x6b7f,\n          0x9f67: 0x6b80,\n          0x9f68: 0x6b84,\n          0x9f69: 0x6b83,\n          0x9f6a: 0x6b8d,\n          0x9f6b: 0x6b98,\n          0x9f6c: 0x6b95,\n          0x9f6d: 0x6b9e,\n          0x9f6e: 0x6ba4,\n          0x9f6f: 0x6baa,\n          0x9f70: 0x6bab,\n          0x9f71: 0x6baf,\n          0x9f72: 0x6bb2,\n          0x9f73: 0x6bb1,\n          0x9f74: 0x6bb3,\n          0x9f75: 0x6bb7,\n          0x9f76: 0x6bbc,\n          0x9f77: 0x6bc6,\n          0x9f78: 0x6bcb,\n          0x9f79: 0x6bd3,\n          0x9f7a: 0x6bdf,\n          0x9f7b: 0x6bec,\n          0x9f7c: 0x6beb,\n          0x9f7d: 0x6bf3,\n          0x9f7e: 0x6bef,\n          0x9f80: 0x9ebe,\n          0x9f81: 0x6c08,\n          0x9f82: 0x6c13,\n          0x9f83: 0x6c14,\n          0x9f84: 0x6c1b,\n          0x9f85: 0x6c24,\n          0x9f86: 0x6c23,\n          0x9f87: 0x6c5e,\n          0x9f88: 0x6c55,\n          0x9f89: 0x6c62,\n          0x9f8a: 0x6c6a,\n          0x9f8b: 0x6c82,\n          0x9f8c: 0x6c8d,\n          0x9f8d: 0x6c9a,\n          0x9f8e: 0x6c81,\n          0x9f8f: 0x6c9b,\n          0x9f90: 0x6c7e,\n          0x9f91: 0x6c68,\n          0x9f92: 0x6c73,\n          0x9f93: 0x6c92,\n          0x9f94: 0x6c90,\n          0x9f95: 0x6cc4,\n          0x9f96: 0x6cf1,\n          0x9f97: 0x6cd3,\n          0x9f98: 0x6cbd,\n          0x9f99: 0x6cd7,\n          0x9f9a: 0x6cc5,\n          0x9f9b: 0x6cdd,\n          0x9f9c: 0x6cae,\n          0x9f9d: 0x6cb1,\n          0x9f9e: 0x6cbe,\n          0x9f9f: 0x6cba,\n          0x9fa0: 0x6cdb,\n          0x9fa1: 0x6cef,\n          0x9fa2: 0x6cd9,\n          0x9fa3: 0x6cea,\n          0x9fa4: 0x6d1f,\n          0x9fa5: 0x884d,\n          0x9fa6: 0x6d36,\n          0x9fa7: 0x6d2b,\n          0x9fa8: 0x6d3d,\n          0x9fa9: 0x6d38,\n          0x9faa: 0x6d19,\n          0x9fab: 0x6d35,\n          0x9fac: 0x6d33,\n          0x9fad: 0x6d12,\n          0x9fae: 0x6d0c,\n          0x9faf: 0x6d63,\n          0x9fb0: 0x6d93,\n          0x9fb1: 0x6d64,\n          0x9fb2: 0x6d5a,\n          0x9fb3: 0x6d79,\n          0x9fb4: 0x6d59,\n          0x9fb5: 0x6d8e,\n          0x9fb6: 0x6d95,\n          0x9fb7: 0x6fe4,\n          0x9fb8: 0x6d85,\n          0x9fb9: 0x6df9,\n          0x9fba: 0x6e15,\n          0x9fbb: 0x6e0a,\n          0x9fbc: 0x6db5,\n          0x9fbd: 0x6dc7,\n          0x9fbe: 0x6de6,\n          0x9fbf: 0x6db8,\n          0x9fc0: 0x6dc6,\n          0x9fc1: 0x6dec,\n          0x9fc2: 0x6dde,\n          0x9fc3: 0x6dcc,\n          0x9fc4: 0x6de8,\n          0x9fc5: 0x6dd2,\n          0x9fc6: 0x6dc5,\n          0x9fc7: 0x6dfa,\n          0x9fc8: 0x6dd9,\n          0x9fc9: 0x6de4,\n          0x9fca: 0x6dd5,\n          0x9fcb: 0x6dea,\n          0x9fcc: 0x6dee,\n          0x9fcd: 0x6e2d,\n          0x9fce: 0x6e6e,\n          0x9fcf: 0x6e2e,\n          0x9fd0: 0x6e19,\n          0x9fd1: 0x6e72,\n          0x9fd2: 0x6e5f,\n          0x9fd3: 0x6e3e,\n          0x9fd4: 0x6e23,\n          0x9fd5: 0x6e6b,\n          0x9fd6: 0x6e2b,\n          0x9fd7: 0x6e76,\n          0x9fd8: 0x6e4d,\n          0x9fd9: 0x6e1f,\n          0x9fda: 0x6e43,\n          0x9fdb: 0x6e3a,\n          0x9fdc: 0x6e4e,\n          0x9fdd: 0x6e24,\n          0x9fde: 0x6eff,\n          0x9fdf: 0x6e1d,\n          0x9fe0: 0x6e38,\n          0x9fe1: 0x6e82,\n          0x9fe2: 0x6eaa,\n          0x9fe3: 0x6e98,\n          0x9fe4: 0x6ec9,\n          0x9fe5: 0x6eb7,\n          0x9fe6: 0x6ed3,\n          0x9fe7: 0x6ebd,\n          0x9fe8: 0x6eaf,\n          0x9fe9: 0x6ec4,\n          0x9fea: 0x6eb2,\n          0x9feb: 0x6ed4,\n          0x9fec: 0x6ed5,\n          0x9fed: 0x6e8f,\n          0x9fee: 0x6ea5,\n          0x9fef: 0x6ec2,\n          0x9ff0: 0x6e9f,\n          0x9ff1: 0x6f41,\n          0x9ff2: 0x6f11,\n          0x9ff3: 0x704c,\n          0x9ff4: 0x6eec,\n          0x9ff5: 0x6ef8,\n          0x9ff6: 0x6efe,\n          0x9ff7: 0x6f3f,\n          0x9ff8: 0x6ef2,\n          0x9ff9: 0x6f31,\n          0x9ffa: 0x6eef,\n          0x9ffb: 0x6f32,\n          0x9ffc: 0x6ecc,\n          0xa1: 0xff61,\n          0xa2: 0xff62,\n          0xa3: 0xff63,\n          0xa4: 0xff64,\n          0xa5: 0xff65,\n          0xa6: 0xff66,\n          0xa7: 0xff67,\n          0xa8: 0xff68,\n          0xa9: 0xff69,\n          0xaa: 0xff6a,\n          0xab: 0xff6b,\n          0xac: 0xff6c,\n          0xad: 0xff6d,\n          0xae: 0xff6e,\n          0xaf: 0xff6f,\n          0xb0: 0xff70,\n          0xb1: 0xff71,\n          0xb2: 0xff72,\n          0xb3: 0xff73,\n          0xb4: 0xff74,\n          0xb5: 0xff75,\n          0xb6: 0xff76,\n          0xb7: 0xff77,\n          0xb8: 0xff78,\n          0xb9: 0xff79,\n          0xba: 0xff7a,\n          0xbb: 0xff7b,\n          0xbc: 0xff7c,\n          0xbd: 0xff7d,\n          0xbe: 0xff7e,\n          0xbf: 0xff7f,\n          0xc0: 0xff80,\n          0xc1: 0xff81,\n          0xc2: 0xff82,\n          0xc3: 0xff83,\n          0xc4: 0xff84,\n          0xc5: 0xff85,\n          0xc6: 0xff86,\n          0xc7: 0xff87,\n          0xc8: 0xff88,\n          0xc9: 0xff89,\n          0xca: 0xff8a,\n          0xcb: 0xff8b,\n          0xcc: 0xff8c,\n          0xcd: 0xff8d,\n          0xce: 0xff8e,\n          0xcf: 0xff8f,\n          0xd0: 0xff90,\n          0xd1: 0xff91,\n          0xd2: 0xff92,\n          0xd3: 0xff93,\n          0xd4: 0xff94,\n          0xd5: 0xff95,\n          0xd6: 0xff96,\n          0xd7: 0xff97,\n          0xd8: 0xff98,\n          0xd9: 0xff99,\n          0xda: 0xff9a,\n          0xdb: 0xff9b,\n          0xdc: 0xff9c,\n          0xdd: 0xff9d,\n          0xde: 0xff9e,\n          0xdf: 0xff9f,\n          0xe040: 0x6f3e,\n          0xe041: 0x6f13,\n          0xe042: 0x6ef7,\n          0xe043: 0x6f86,\n          0xe044: 0x6f7a,\n          0xe045: 0x6f78,\n          0xe046: 0x6f81,\n          0xe047: 0x6f80,\n          0xe048: 0x6f6f,\n          0xe049: 0x6f5b,\n          0xe04a: 0x6ff3,\n          0xe04b: 0x6f6d,\n          0xe04c: 0x6f82,\n          0xe04d: 0x6f7c,\n          0xe04e: 0x6f58,\n          0xe04f: 0x6f8e,\n          0xe050: 0x6f91,\n          0xe051: 0x6fc2,\n          0xe052: 0x6f66,\n          0xe053: 0x6fb3,\n          0xe054: 0x6fa3,\n          0xe055: 0x6fa1,\n          0xe056: 0x6fa4,\n          0xe057: 0x6fb9,\n          0xe058: 0x6fc6,\n          0xe059: 0x6faa,\n          0xe05a: 0x6fdf,\n          0xe05b: 0x6fd5,\n          0xe05c: 0x6fec,\n          0xe05d: 0x6fd4,\n          0xe05e: 0x6fd8,\n          0xe05f: 0x6ff1,\n          0xe060: 0x6fee,\n          0xe061: 0x6fdb,\n          0xe062: 0x7009,\n          0xe063: 0x700b,\n          0xe064: 0x6ffa,\n          0xe065: 0x7011,\n          0xe066: 0x7001,\n          0xe067: 0x700f,\n          0xe068: 0x6ffe,\n          0xe069: 0x701b,\n          0xe06a: 0x701a,\n          0xe06b: 0x6f74,\n          0xe06c: 0x701d,\n          0xe06d: 0x7018,\n          0xe06e: 0x701f,\n          0xe06f: 0x7030,\n          0xe070: 0x703e,\n          0xe071: 0x7032,\n          0xe072: 0x7051,\n          0xe073: 0x7063,\n          0xe074: 0x7099,\n          0xe075: 0x7092,\n          0xe076: 0x70af,\n          0xe077: 0x70f1,\n          0xe078: 0x70ac,\n          0xe079: 0x70b8,\n          0xe07a: 0x70b3,\n          0xe07b: 0x70ae,\n          0xe07c: 0x70df,\n          0xe07d: 0x70cb,\n          0xe07e: 0x70dd,\n          0xe080: 0x70d9,\n          0xe081: 0x7109,\n          0xe082: 0x70fd,\n          0xe083: 0x711c,\n          0xe084: 0x7119,\n          0xe085: 0x7165,\n          0xe086: 0x7155,\n          0xe087: 0x7188,\n          0xe088: 0x7166,\n          0xe089: 0x7162,\n          0xe08a: 0x714c,\n          0xe08b: 0x7156,\n          0xe08c: 0x716c,\n          0xe08d: 0x718f,\n          0xe08e: 0x71fb,\n          0xe08f: 0x7184,\n          0xe090: 0x7195,\n          0xe091: 0x71a8,\n          0xe092: 0x71ac,\n          0xe093: 0x71d7,\n          0xe094: 0x71b9,\n          0xe095: 0x71be,\n          0xe096: 0x71d2,\n          0xe097: 0x71c9,\n          0xe098: 0x71d4,\n          0xe099: 0x71ce,\n          0xe09a: 0x71e0,\n          0xe09b: 0x71ec,\n          0xe09c: 0x71e7,\n          0xe09d: 0x71f5,\n          0xe09e: 0x71fc,\n          0xe09f: 0x71f9,\n          0xe0a0: 0x71ff,\n          0xe0a1: 0x720d,\n          0xe0a2: 0x7210,\n          0xe0a3: 0x721b,\n          0xe0a4: 0x7228,\n          0xe0a5: 0x722d,\n          0xe0a6: 0x722c,\n          0xe0a7: 0x7230,\n          0xe0a8: 0x7232,\n          0xe0a9: 0x723b,\n          0xe0aa: 0x723c,\n          0xe0ab: 0x723f,\n          0xe0ac: 0x7240,\n          0xe0ad: 0x7246,\n          0xe0ae: 0x724b,\n          0xe0af: 0x7258,\n          0xe0b0: 0x7274,\n          0xe0b1: 0x727e,\n          0xe0b2: 0x7282,\n          0xe0b3: 0x7281,\n          0xe0b4: 0x7287,\n          0xe0b5: 0x7292,\n          0xe0b6: 0x7296,\n          0xe0b7: 0x72a2,\n          0xe0b8: 0x72a7,\n          0xe0b9: 0x72b9,\n          0xe0ba: 0x72b2,\n          0xe0bb: 0x72c3,\n          0xe0bc: 0x72c6,\n          0xe0bd: 0x72c4,\n          0xe0be: 0x72ce,\n          0xe0bf: 0x72d2,\n          0xe0c0: 0x72e2,\n          0xe0c1: 0x72e0,\n          0xe0c2: 0x72e1,\n          0xe0c3: 0x72f9,\n          0xe0c4: 0x72f7,\n          0xe0c5: 0x500f,\n          0xe0c6: 0x7317,\n          0xe0c7: 0x730a,\n          0xe0c8: 0x731c,\n          0xe0c9: 0x7316,\n          0xe0ca: 0x731d,\n          0xe0cb: 0x7334,\n          0xe0cc: 0x732f,\n          0xe0cd: 0x7329,\n          0xe0ce: 0x7325,\n          0xe0cf: 0x733e,\n          0xe0d0: 0x734e,\n          0xe0d1: 0x734f,\n          0xe0d2: 0x9ed8,\n          0xe0d3: 0x7357,\n          0xe0d4: 0x736a,\n          0xe0d5: 0x7368,\n          0xe0d6: 0x7370,\n          0xe0d7: 0x7378,\n          0xe0d8: 0x7375,\n          0xe0d9: 0x737b,\n          0xe0da: 0x737a,\n          0xe0db: 0x73c8,\n          0xe0dc: 0x73b3,\n          0xe0dd: 0x73ce,\n          0xe0de: 0x73bb,\n          0xe0df: 0x73c0,\n          0xe0e0: 0x73e5,\n          0xe0e1: 0x73ee,\n          0xe0e2: 0x73de,\n          0xe0e3: 0x74a2,\n          0xe0e4: 0x7405,\n          0xe0e5: 0x746f,\n          0xe0e6: 0x7425,\n          0xe0e7: 0x73f8,\n          0xe0e8: 0x7432,\n          0xe0e9: 0x743a,\n          0xe0ea: 0x7455,\n          0xe0eb: 0x743f,\n          0xe0ec: 0x745f,\n          0xe0ed: 0x7459,\n          0xe0ee: 0x7441,\n          0xe0ef: 0x745c,\n          0xe0f0: 0x7469,\n          0xe0f1: 0x7470,\n          0xe0f2: 0x7463,\n          0xe0f3: 0x746a,\n          0xe0f4: 0x7476,\n          0xe0f5: 0x747e,\n          0xe0f6: 0x748b,\n          0xe0f7: 0x749e,\n          0xe0f8: 0x74a7,\n          0xe0f9: 0x74ca,\n          0xe0fa: 0x74cf,\n          0xe0fb: 0x74d4,\n          0xe0fc: 0x73f1,\n          0xe140: 0x74e0,\n          0xe141: 0x74e3,\n          0xe142: 0x74e7,\n          0xe143: 0x74e9,\n          0xe144: 0x74ee,\n          0xe145: 0x74f2,\n          0xe146: 0x74f0,\n          0xe147: 0x74f1,\n          0xe148: 0x74f8,\n          0xe149: 0x74f7,\n          0xe14a: 0x7504,\n          0xe14b: 0x7503,\n          0xe14c: 0x7505,\n          0xe14d: 0x750c,\n          0xe14e: 0x750e,\n          0xe14f: 0x750d,\n          0xe150: 0x7515,\n          0xe151: 0x7513,\n          0xe152: 0x751e,\n          0xe153: 0x7526,\n          0xe154: 0x752c,\n          0xe155: 0x753c,\n          0xe156: 0x7544,\n          0xe157: 0x754d,\n          0xe158: 0x754a,\n          0xe159: 0x7549,\n          0xe15a: 0x755b,\n          0xe15b: 0x7546,\n          0xe15c: 0x755a,\n          0xe15d: 0x7569,\n          0xe15e: 0x7564,\n          0xe15f: 0x7567,\n          0xe160: 0x756b,\n          0xe161: 0x756d,\n          0xe162: 0x7578,\n          0xe163: 0x7576,\n          0xe164: 0x7586,\n          0xe165: 0x7587,\n          0xe166: 0x7574,\n          0xe167: 0x758a,\n          0xe168: 0x7589,\n          0xe169: 0x7582,\n          0xe16a: 0x7594,\n          0xe16b: 0x759a,\n          0xe16c: 0x759d,\n          0xe16d: 0x75a5,\n          0xe16e: 0x75a3,\n          0xe16f: 0x75c2,\n          0xe170: 0x75b3,\n          0xe171: 0x75c3,\n          0xe172: 0x75b5,\n          0xe173: 0x75bd,\n          0xe174: 0x75b8,\n          0xe175: 0x75bc,\n          0xe176: 0x75b1,\n          0xe177: 0x75cd,\n          0xe178: 0x75ca,\n          0xe179: 0x75d2,\n          0xe17a: 0x75d9,\n          0xe17b: 0x75e3,\n          0xe17c: 0x75de,\n          0xe17d: 0x75fe,\n          0xe17e: 0x75ff,\n          0xe180: 0x75fc,\n          0xe181: 0x7601,\n          0xe182: 0x75f0,\n          0xe183: 0x75fa,\n          0xe184: 0x75f2,\n          0xe185: 0x75f3,\n          0xe186: 0x760b,\n          0xe187: 0x760d,\n          0xe188: 0x7609,\n          0xe189: 0x761f,\n          0xe18a: 0x7627,\n          0xe18b: 0x7620,\n          0xe18c: 0x7621,\n          0xe18d: 0x7622,\n          0xe18e: 0x7624,\n          0xe18f: 0x7634,\n          0xe190: 0x7630,\n          0xe191: 0x763b,\n          0xe192: 0x7647,\n          0xe193: 0x7648,\n          0xe194: 0x7646,\n          0xe195: 0x765c,\n          0xe196: 0x7658,\n          0xe197: 0x7661,\n          0xe198: 0x7662,\n          0xe199: 0x7668,\n          0xe19a: 0x7669,\n          0xe19b: 0x766a,\n          0xe19c: 0x7667,\n          0xe19d: 0x766c,\n          0xe19e: 0x7670,\n          0xe19f: 0x7672,\n          0xe1a0: 0x7676,\n          0xe1a1: 0x7678,\n          0xe1a2: 0x767c,\n          0xe1a3: 0x7680,\n          0xe1a4: 0x7683,\n          0xe1a5: 0x7688,\n          0xe1a6: 0x768b,\n          0xe1a7: 0x768e,\n          0xe1a8: 0x7696,\n          0xe1a9: 0x7693,\n          0xe1aa: 0x7699,\n          0xe1ab: 0x769a,\n          0xe1ac: 0x76b0,\n          0xe1ad: 0x76b4,\n          0xe1ae: 0x76b8,\n          0xe1af: 0x76b9,\n          0xe1b0: 0x76ba,\n          0xe1b1: 0x76c2,\n          0xe1b2: 0x76cd,\n          0xe1b3: 0x76d6,\n          0xe1b4: 0x76d2,\n          0xe1b5: 0x76de,\n          0xe1b6: 0x76e1,\n          0xe1b7: 0x76e5,\n          0xe1b8: 0x76e7,\n          0xe1b9: 0x76ea,\n          0xe1ba: 0x862f,\n          0xe1bb: 0x76fb,\n          0xe1bc: 0x7708,\n          0xe1bd: 0x7707,\n          0xe1be: 0x7704,\n          0xe1bf: 0x7729,\n          0xe1c0: 0x7724,\n          0xe1c1: 0x771e,\n          0xe1c2: 0x7725,\n          0xe1c3: 0x7726,\n          0xe1c4: 0x771b,\n          0xe1c5: 0x7737,\n          0xe1c6: 0x7738,\n          0xe1c7: 0x7747,\n          0xe1c8: 0x775a,\n          0xe1c9: 0x7768,\n          0xe1ca: 0x776b,\n          0xe1cb: 0x775b,\n          0xe1cc: 0x7765,\n          0xe1cd: 0x777f,\n          0xe1ce: 0x777e,\n          0xe1cf: 0x7779,\n          0xe1d0: 0x778e,\n          0xe1d1: 0x778b,\n          0xe1d2: 0x7791,\n          0xe1d3: 0x77a0,\n          0xe1d4: 0x779e,\n          0xe1d5: 0x77b0,\n          0xe1d6: 0x77b6,\n          0xe1d7: 0x77b9,\n          0xe1d8: 0x77bf,\n          0xe1d9: 0x77bc,\n          0xe1da: 0x77bd,\n          0xe1db: 0x77bb,\n          0xe1dc: 0x77c7,\n          0xe1dd: 0x77cd,\n          0xe1de: 0x77d7,\n          0xe1df: 0x77da,\n          0xe1e0: 0x77dc,\n          0xe1e1: 0x77e3,\n          0xe1e2: 0x77ee,\n          0xe1e3: 0x77fc,\n          0xe1e4: 0x780c,\n          0xe1e5: 0x7812,\n          0xe1e6: 0x7926,\n          0xe1e7: 0x7820,\n          0xe1e8: 0x792a,\n          0xe1e9: 0x7845,\n          0xe1ea: 0x788e,\n          0xe1eb: 0x7874,\n          0xe1ec: 0x7886,\n          0xe1ed: 0x787c,\n          0xe1ee: 0x789a,\n          0xe1ef: 0x788c,\n          0xe1f0: 0x78a3,\n          0xe1f1: 0x78b5,\n          0xe1f2: 0x78aa,\n          0xe1f3: 0x78af,\n          0xe1f4: 0x78d1,\n          0xe1f5: 0x78c6,\n          0xe1f6: 0x78cb,\n          0xe1f7: 0x78d4,\n          0xe1f8: 0x78be,\n          0xe1f9: 0x78bc,\n          0xe1fa: 0x78c5,\n          0xe1fb: 0x78ca,\n          0xe1fc: 0x78ec,\n          0xe240: 0x78e7,\n          0xe241: 0x78da,\n          0xe242: 0x78fd,\n          0xe243: 0x78f4,\n          0xe244: 0x7907,\n          0xe245: 0x7912,\n          0xe246: 0x7911,\n          0xe247: 0x7919,\n          0xe248: 0x792c,\n          0xe249: 0x792b,\n          0xe24a: 0x7940,\n          0xe24b: 0x7960,\n          0xe24c: 0x7957,\n          0xe24d: 0x795f,\n          0xe24e: 0x795a,\n          0xe24f: 0x7955,\n          0xe250: 0x7953,\n          0xe251: 0x797a,\n          0xe252: 0x797f,\n          0xe253: 0x798a,\n          0xe254: 0x799d,\n          0xe255: 0x79a7,\n          0xe256: 0x9f4b,\n          0xe257: 0x79aa,\n          0xe258: 0x79ae,\n          0xe259: 0x79b3,\n          0xe25a: 0x79b9,\n          0xe25b: 0x79ba,\n          0xe25c: 0x79c9,\n          0xe25d: 0x79d5,\n          0xe25e: 0x79e7,\n          0xe25f: 0x79ec,\n          0xe260: 0x79e1,\n          0xe261: 0x79e3,\n          0xe262: 0x7a08,\n          0xe263: 0x7a0d,\n          0xe264: 0x7a18,\n          0xe265: 0x7a19,\n          0xe266: 0x7a20,\n          0xe267: 0x7a1f,\n          0xe268: 0x7980,\n          0xe269: 0x7a31,\n          0xe26a: 0x7a3b,\n          0xe26b: 0x7a3e,\n          0xe26c: 0x7a37,\n          0xe26d: 0x7a43,\n          0xe26e: 0x7a57,\n          0xe26f: 0x7a49,\n          0xe270: 0x7a61,\n          0xe271: 0x7a62,\n          0xe272: 0x7a69,\n          0xe273: 0x9f9d,\n          0xe274: 0x7a70,\n          0xe275: 0x7a79,\n          0xe276: 0x7a7d,\n          0xe277: 0x7a88,\n          0xe278: 0x7a97,\n          0xe279: 0x7a95,\n          0xe27a: 0x7a98,\n          0xe27b: 0x7a96,\n          0xe27c: 0x7aa9,\n          0xe27d: 0x7ac8,\n          0xe27e: 0x7ab0,\n          0xe280: 0x7ab6,\n          0xe281: 0x7ac5,\n          0xe282: 0x7ac4,\n          0xe283: 0x7abf,\n          0xe284: 0x9083,\n          0xe285: 0x7ac7,\n          0xe286: 0x7aca,\n          0xe287: 0x7acd,\n          0xe288: 0x7acf,\n          0xe289: 0x7ad5,\n          0xe28a: 0x7ad3,\n          0xe28b: 0x7ad9,\n          0xe28c: 0x7ada,\n          0xe28d: 0x7add,\n          0xe28e: 0x7ae1,\n          0xe28f: 0x7ae2,\n          0xe290: 0x7ae6,\n          0xe291: 0x7aed,\n          0xe292: 0x7af0,\n          0xe293: 0x7b02,\n          0xe294: 0x7b0f,\n          0xe295: 0x7b0a,\n          0xe296: 0x7b06,\n          0xe297: 0x7b33,\n          0xe298: 0x7b18,\n          0xe299: 0x7b19,\n          0xe29a: 0x7b1e,\n          0xe29b: 0x7b35,\n          0xe29c: 0x7b28,\n          0xe29d: 0x7b36,\n          0xe29e: 0x7b50,\n          0xe29f: 0x7b7a,\n          0xe2a0: 0x7b04,\n          0xe2a1: 0x7b4d,\n          0xe2a2: 0x7b0b,\n          0xe2a3: 0x7b4c,\n          0xe2a4: 0x7b45,\n          0xe2a5: 0x7b75,\n          0xe2a6: 0x7b65,\n          0xe2a7: 0x7b74,\n          0xe2a8: 0x7b67,\n          0xe2a9: 0x7b70,\n          0xe2aa: 0x7b71,\n          0xe2ab: 0x7b6c,\n          0xe2ac: 0x7b6e,\n          0xe2ad: 0x7b9d,\n          0xe2ae: 0x7b98,\n          0xe2af: 0x7b9f,\n          0xe2b0: 0x7b8d,\n          0xe2b1: 0x7b9c,\n          0xe2b2: 0x7b9a,\n          0xe2b3: 0x7b8b,\n          0xe2b4: 0x7b92,\n          0xe2b5: 0x7b8f,\n          0xe2b6: 0x7b5d,\n          0xe2b7: 0x7b99,\n          0xe2b8: 0x7bcb,\n          0xe2b9: 0x7bc1,\n          0xe2ba: 0x7bcc,\n          0xe2bb: 0x7bcf,\n          0xe2bc: 0x7bb4,\n          0xe2bd: 0x7bc6,\n          0xe2be: 0x7bdd,\n          0xe2bf: 0x7be9,\n          0xe2c0: 0x7c11,\n          0xe2c1: 0x7c14,\n          0xe2c2: 0x7be6,\n          0xe2c3: 0x7be5,\n          0xe2c4: 0x7c60,\n          0xe2c5: 0x7c00,\n          0xe2c6: 0x7c07,\n          0xe2c7: 0x7c13,\n          0xe2c8: 0x7bf3,\n          0xe2c9: 0x7bf7,\n          0xe2ca: 0x7c17,\n          0xe2cb: 0x7c0d,\n          0xe2cc: 0x7bf6,\n          0xe2cd: 0x7c23,\n          0xe2ce: 0x7c27,\n          0xe2cf: 0x7c2a,\n          0xe2d0: 0x7c1f,\n          0xe2d1: 0x7c37,\n          0xe2d2: 0x7c2b,\n          0xe2d3: 0x7c3d,\n          0xe2d4: 0x7c4c,\n          0xe2d5: 0x7c43,\n          0xe2d6: 0x7c54,\n          0xe2d7: 0x7c4f,\n          0xe2d8: 0x7c40,\n          0xe2d9: 0x7c50,\n          0xe2da: 0x7c58,\n          0xe2db: 0x7c5f,\n          0xe2dc: 0x7c64,\n          0xe2dd: 0x7c56,\n          0xe2de: 0x7c65,\n          0xe2df: 0x7c6c,\n          0xe2e0: 0x7c75,\n          0xe2e1: 0x7c83,\n          0xe2e2: 0x7c90,\n          0xe2e3: 0x7ca4,\n          0xe2e4: 0x7cad,\n          0xe2e5: 0x7ca2,\n          0xe2e6: 0x7cab,\n          0xe2e7: 0x7ca1,\n          0xe2e8: 0x7ca8,\n          0xe2e9: 0x7cb3,\n          0xe2ea: 0x7cb2,\n          0xe2eb: 0x7cb1,\n          0xe2ec: 0x7cae,\n          0xe2ed: 0x7cb9,\n          0xe2ee: 0x7cbd,\n          0xe2ef: 0x7cc0,\n          0xe2f0: 0x7cc5,\n          0xe2f1: 0x7cc2,\n          0xe2f2: 0x7cd8,\n          0xe2f3: 0x7cd2,\n          0xe2f4: 0x7cdc,\n          0xe2f5: 0x7ce2,\n          0xe2f6: 0x9b3b,\n          0xe2f7: 0x7cef,\n          0xe2f8: 0x7cf2,\n          0xe2f9: 0x7cf4,\n          0xe2fa: 0x7cf6,\n          0xe2fb: 0x7cfa,\n          0xe2fc: 0x7d06,\n          0xe340: 0x7d02,\n          0xe341: 0x7d1c,\n          0xe342: 0x7d15,\n          0xe343: 0x7d0a,\n          0xe344: 0x7d45,\n          0xe345: 0x7d4b,\n          0xe346: 0x7d2e,\n          0xe347: 0x7d32,\n          0xe348: 0x7d3f,\n          0xe349: 0x7d35,\n          0xe34a: 0x7d46,\n          0xe34b: 0x7d73,\n          0xe34c: 0x7d56,\n          0xe34d: 0x7d4e,\n          0xe34e: 0x7d72,\n          0xe34f: 0x7d68,\n          0xe350: 0x7d6e,\n          0xe351: 0x7d4f,\n          0xe352: 0x7d63,\n          0xe353: 0x7d93,\n          0xe354: 0x7d89,\n          0xe355: 0x7d5b,\n          0xe356: 0x7d8f,\n          0xe357: 0x7d7d,\n          0xe358: 0x7d9b,\n          0xe359: 0x7dba,\n          0xe35a: 0x7dae,\n          0xe35b: 0x7da3,\n          0xe35c: 0x7db5,\n          0xe35d: 0x7dc7,\n          0xe35e: 0x7dbd,\n          0xe35f: 0x7dab,\n          0xe360: 0x7e3d,\n          0xe361: 0x7da2,\n          0xe362: 0x7daf,\n          0xe363: 0x7ddc,\n          0xe364: 0x7db8,\n          0xe365: 0x7d9f,\n          0xe366: 0x7db0,\n          0xe367: 0x7dd8,\n          0xe368: 0x7ddd,\n          0xe369: 0x7de4,\n          0xe36a: 0x7dde,\n          0xe36b: 0x7dfb,\n          0xe36c: 0x7df2,\n          0xe36d: 0x7de1,\n          0xe36e: 0x7e05,\n          0xe36f: 0x7e0a,\n          0xe370: 0x7e23,\n          0xe371: 0x7e21,\n          0xe372: 0x7e12,\n          0xe373: 0x7e31,\n          0xe374: 0x7e1f,\n          0xe375: 0x7e09,\n          0xe376: 0x7e0b,\n          0xe377: 0x7e22,\n          0xe378: 0x7e46,\n          0xe379: 0x7e66,\n          0xe37a: 0x7e3b,\n          0xe37b: 0x7e35,\n          0xe37c: 0x7e39,\n          0xe37d: 0x7e43,\n          0xe37e: 0x7e37,\n          0xe380: 0x7e32,\n          0xe381: 0x7e3a,\n          0xe382: 0x7e67,\n          0xe383: 0x7e5d,\n          0xe384: 0x7e56,\n          0xe385: 0x7e5e,\n          0xe386: 0x7e59,\n          0xe387: 0x7e5a,\n          0xe388: 0x7e79,\n          0xe389: 0x7e6a,\n          0xe38a: 0x7e69,\n          0xe38b: 0x7e7c,\n          0xe38c: 0x7e7b,\n          0xe38d: 0x7e83,\n          0xe38e: 0x7dd5,\n          0xe38f: 0x7e7d,\n          0xe390: 0x8fae,\n          0xe391: 0x7e7f,\n          0xe392: 0x7e88,\n          0xe393: 0x7e89,\n          0xe394: 0x7e8c,\n          0xe395: 0x7e92,\n          0xe396: 0x7e90,\n          0xe397: 0x7e93,\n          0xe398: 0x7e94,\n          0xe399: 0x7e96,\n          0xe39a: 0x7e8e,\n          0xe39b: 0x7e9b,\n          0xe39c: 0x7e9c,\n          0xe39d: 0x7f38,\n          0xe39e: 0x7f3a,\n          0xe39f: 0x7f45,\n          0xe3a0: 0x7f4c,\n          0xe3a1: 0x7f4d,\n          0xe3a2: 0x7f4e,\n          0xe3a3: 0x7f50,\n          0xe3a4: 0x7f51,\n          0xe3a5: 0x7f55,\n          0xe3a6: 0x7f54,\n          0xe3a7: 0x7f58,\n          0xe3a8: 0x7f5f,\n          0xe3a9: 0x7f60,\n          0xe3aa: 0x7f68,\n          0xe3ab: 0x7f69,\n          0xe3ac: 0x7f67,\n          0xe3ad: 0x7f78,\n          0xe3ae: 0x7f82,\n          0xe3af: 0x7f86,\n          0xe3b0: 0x7f83,\n          0xe3b1: 0x7f88,\n          0xe3b2: 0x7f87,\n          0xe3b3: 0x7f8c,\n          0xe3b4: 0x7f94,\n          0xe3b5: 0x7f9e,\n          0xe3b6: 0x7f9d,\n          0xe3b7: 0x7f9a,\n          0xe3b8: 0x7fa3,\n          0xe3b9: 0x7faf,\n          0xe3ba: 0x7fb2,\n          0xe3bb: 0x7fb9,\n          0xe3bc: 0x7fae,\n          0xe3bd: 0x7fb6,\n          0xe3be: 0x7fb8,\n          0xe3bf: 0x8b71,\n          0xe3c0: 0x7fc5,\n          0xe3c1: 0x7fc6,\n          0xe3c2: 0x7fca,\n          0xe3c3: 0x7fd5,\n          0xe3c4: 0x7fd4,\n          0xe3c5: 0x7fe1,\n          0xe3c6: 0x7fe6,\n          0xe3c7: 0x7fe9,\n          0xe3c8: 0x7ff3,\n          0xe3c9: 0x7ff9,\n          0xe3ca: 0x98dc,\n          0xe3cb: 0x8006,\n          0xe3cc: 0x8004,\n          0xe3cd: 0x800b,\n          0xe3ce: 0x8012,\n          0xe3cf: 0x8018,\n          0xe3d0: 0x8019,\n          0xe3d1: 0x801c,\n          0xe3d2: 0x8021,\n          0xe3d3: 0x8028,\n          0xe3d4: 0x803f,\n          0xe3d5: 0x803b,\n          0xe3d6: 0x804a,\n          0xe3d7: 0x8046,\n          0xe3d8: 0x8052,\n          0xe3d9: 0x8058,\n          0xe3da: 0x805a,\n          0xe3db: 0x805f,\n          0xe3dc: 0x8062,\n          0xe3dd: 0x8068,\n          0xe3de: 0x8073,\n          0xe3df: 0x8072,\n          0xe3e0: 0x8070,\n          0xe3e1: 0x8076,\n          0xe3e2: 0x8079,\n          0xe3e3: 0x807d,\n          0xe3e4: 0x807f,\n          0xe3e5: 0x8084,\n          0xe3e6: 0x8086,\n          0xe3e7: 0x8085,\n          0xe3e8: 0x809b,\n          0xe3e9: 0x8093,\n          0xe3ea: 0x809a,\n          0xe3eb: 0x80ad,\n          0xe3ec: 0x5190,\n          0xe3ed: 0x80ac,\n          0xe3ee: 0x80db,\n          0xe3ef: 0x80e5,\n          0xe3f0: 0x80d9,\n          0xe3f1: 0x80dd,\n          0xe3f2: 0x80c4,\n          0xe3f3: 0x80da,\n          0xe3f4: 0x80d6,\n          0xe3f5: 0x8109,\n          0xe3f6: 0x80ef,\n          0xe3f7: 0x80f1,\n          0xe3f8: 0x811b,\n          0xe3f9: 0x8129,\n          0xe3fa: 0x8123,\n          0xe3fb: 0x812f,\n          0xe3fc: 0x814b,\n          0xe440: 0x968b,\n          0xe441: 0x8146,\n          0xe442: 0x813e,\n          0xe443: 0x8153,\n          0xe444: 0x8151,\n          0xe445: 0x80fc,\n          0xe446: 0x8171,\n          0xe447: 0x816e,\n          0xe448: 0x8165,\n          0xe449: 0x8166,\n          0xe44a: 0x8174,\n          0xe44b: 0x8183,\n          0xe44c: 0x8188,\n          0xe44d: 0x818a,\n          0xe44e: 0x8180,\n          0xe44f: 0x8182,\n          0xe450: 0x81a0,\n          0xe451: 0x8195,\n          0xe452: 0x81a4,\n          0xe453: 0x81a3,\n          0xe454: 0x815f,\n          0xe455: 0x8193,\n          0xe456: 0x81a9,\n          0xe457: 0x81b0,\n          0xe458: 0x81b5,\n          0xe459: 0x81be,\n          0xe45a: 0x81b8,\n          0xe45b: 0x81bd,\n          0xe45c: 0x81c0,\n          0xe45d: 0x81c2,\n          0xe45e: 0x81ba,\n          0xe45f: 0x81c9,\n          0xe460: 0x81cd,\n          0xe461: 0x81d1,\n          0xe462: 0x81d9,\n          0xe463: 0x81d8,\n          0xe464: 0x81c8,\n          0xe465: 0x81da,\n          0xe466: 0x81df,\n          0xe467: 0x81e0,\n          0xe468: 0x81e7,\n          0xe469: 0x81fa,\n          0xe46a: 0x81fb,\n          0xe46b: 0x81fe,\n          0xe46c: 0x8201,\n          0xe46d: 0x8202,\n          0xe46e: 0x8205,\n          0xe46f: 0x8207,\n          0xe470: 0x820a,\n          0xe471: 0x820d,\n          0xe472: 0x8210,\n          0xe473: 0x8216,\n          0xe474: 0x8229,\n          0xe475: 0x822b,\n          0xe476: 0x8238,\n          0xe477: 0x8233,\n          0xe478: 0x8240,\n          0xe479: 0x8259,\n          0xe47a: 0x8258,\n          0xe47b: 0x825d,\n          0xe47c: 0x825a,\n          0xe47d: 0x825f,\n          0xe47e: 0x8264,\n          0xe480: 0x8262,\n          0xe481: 0x8268,\n          0xe482: 0x826a,\n          0xe483: 0x826b,\n          0xe484: 0x822e,\n          0xe485: 0x8271,\n          0xe486: 0x8277,\n          0xe487: 0x8278,\n          0xe488: 0x827e,\n          0xe489: 0x828d,\n          0xe48a: 0x8292,\n          0xe48b: 0x82ab,\n          0xe48c: 0x829f,\n          0xe48d: 0x82bb,\n          0xe48e: 0x82ac,\n          0xe48f: 0x82e1,\n          0xe490: 0x82e3,\n          0xe491: 0x82df,\n          0xe492: 0x82d2,\n          0xe493: 0x82f4,\n          0xe494: 0x82f3,\n          0xe495: 0x82fa,\n          0xe496: 0x8393,\n          0xe497: 0x8303,\n          0xe498: 0x82fb,\n          0xe499: 0x82f9,\n          0xe49a: 0x82de,\n          0xe49b: 0x8306,\n          0xe49c: 0x82dc,\n          0xe49d: 0x8309,\n          0xe49e: 0x82d9,\n          0xe49f: 0x8335,\n          0xe4a0: 0x8334,\n          0xe4a1: 0x8316,\n          0xe4a2: 0x8332,\n          0xe4a3: 0x8331,\n          0xe4a4: 0x8340,\n          0xe4a5: 0x8339,\n          0xe4a6: 0x8350,\n          0xe4a7: 0x8345,\n          0xe4a8: 0x832f,\n          0xe4a9: 0x832b,\n          0xe4aa: 0x8317,\n          0xe4ab: 0x8318,\n          0xe4ac: 0x8385,\n          0xe4ad: 0x839a,\n          0xe4ae: 0x83aa,\n          0xe4af: 0x839f,\n          0xe4b0: 0x83a2,\n          0xe4b1: 0x8396,\n          0xe4b2: 0x8323,\n          0xe4b3: 0x838e,\n          0xe4b4: 0x8387,\n          0xe4b5: 0x838a,\n          0xe4b6: 0x837c,\n          0xe4b7: 0x83b5,\n          0xe4b8: 0x8373,\n          0xe4b9: 0x8375,\n          0xe4ba: 0x83a0,\n          0xe4bb: 0x8389,\n          0xe4bc: 0x83a8,\n          0xe4bd: 0x83f4,\n          0xe4be: 0x8413,\n          0xe4bf: 0x83eb,\n          0xe4c0: 0x83ce,\n          0xe4c1: 0x83fd,\n          0xe4c2: 0x8403,\n          0xe4c3: 0x83d8,\n          0xe4c4: 0x840b,\n          0xe4c5: 0x83c1,\n          0xe4c6: 0x83f7,\n          0xe4c7: 0x8407,\n          0xe4c8: 0x83e0,\n          0xe4c9: 0x83f2,\n          0xe4ca: 0x840d,\n          0xe4cb: 0x8422,\n          0xe4cc: 0x8420,\n          0xe4cd: 0x83bd,\n          0xe4ce: 0x8438,\n          0xe4cf: 0x8506,\n          0xe4d0: 0x83fb,\n          0xe4d1: 0x846d,\n          0xe4d2: 0x842a,\n          0xe4d3: 0x843c,\n          0xe4d4: 0x855a,\n          0xe4d5: 0x8484,\n          0xe4d6: 0x8477,\n          0xe4d7: 0x846b,\n          0xe4d8: 0x84ad,\n          0xe4d9: 0x846e,\n          0xe4da: 0x8482,\n          0xe4db: 0x8469,\n          0xe4dc: 0x8446,\n          0xe4dd: 0x842c,\n          0xe4de: 0x846f,\n          0xe4df: 0x8479,\n          0xe4e0: 0x8435,\n          0xe4e1: 0x84ca,\n          0xe4e2: 0x8462,\n          0xe4e3: 0x84b9,\n          0xe4e4: 0x84bf,\n          0xe4e5: 0x849f,\n          0xe4e6: 0x84d9,\n          0xe4e7: 0x84cd,\n          0xe4e8: 0x84bb,\n          0xe4e9: 0x84da,\n          0xe4ea: 0x84d0,\n          0xe4eb: 0x84c1,\n          0xe4ec: 0x84c6,\n          0xe4ed: 0x84d6,\n          0xe4ee: 0x84a1,\n          0xe4ef: 0x8521,\n          0xe4f0: 0x84ff,\n          0xe4f1: 0x84f4,\n          0xe4f2: 0x8517,\n          0xe4f3: 0x8518,\n          0xe4f4: 0x852c,\n          0xe4f5: 0x851f,\n          0xe4f6: 0x8515,\n          0xe4f7: 0x8514,\n          0xe4f8: 0x84fc,\n          0xe4f9: 0x8540,\n          0xe4fa: 0x8563,\n          0xe4fb: 0x8558,\n          0xe4fc: 0x8548,\n          0xe540: 0x8541,\n          0xe541: 0x8602,\n          0xe542: 0x854b,\n          0xe543: 0x8555,\n          0xe544: 0x8580,\n          0xe545: 0x85a4,\n          0xe546: 0x8588,\n          0xe547: 0x8591,\n          0xe548: 0x858a,\n          0xe549: 0x85a8,\n          0xe54a: 0x856d,\n          0xe54b: 0x8594,\n          0xe54c: 0x859b,\n          0xe54d: 0x85ea,\n          0xe54e: 0x8587,\n          0xe54f: 0x859c,\n          0xe550: 0x8577,\n          0xe551: 0x857e,\n          0xe552: 0x8590,\n          0xe553: 0x85c9,\n          0xe554: 0x85ba,\n          0xe555: 0x85cf,\n          0xe556: 0x85b9,\n          0xe557: 0x85d0,\n          0xe558: 0x85d5,\n          0xe559: 0x85dd,\n          0xe55a: 0x85e5,\n          0xe55b: 0x85dc,\n          0xe55c: 0x85f9,\n          0xe55d: 0x860a,\n          0xe55e: 0x8613,\n          0xe55f: 0x860b,\n          0xe560: 0x85fe,\n          0xe561: 0x85fa,\n          0xe562: 0x8606,\n          0xe563: 0x8622,\n          0xe564: 0x861a,\n          0xe565: 0x8630,\n          0xe566: 0x863f,\n          0xe567: 0x864d,\n          0xe568: 0x4e55,\n          0xe569: 0x8654,\n          0xe56a: 0x865f,\n          0xe56b: 0x8667,\n          0xe56c: 0x8671,\n          0xe56d: 0x8693,\n          0xe56e: 0x86a3,\n          0xe56f: 0x86a9,\n          0xe570: 0x86aa,\n          0xe571: 0x868b,\n          0xe572: 0x868c,\n          0xe573: 0x86b6,\n          0xe574: 0x86af,\n          0xe575: 0x86c4,\n          0xe576: 0x86c6,\n          0xe577: 0x86b0,\n          0xe578: 0x86c9,\n          0xe579: 0x8823,\n          0xe57a: 0x86ab,\n          0xe57b: 0x86d4,\n          0xe57c: 0x86de,\n          0xe57d: 0x86e9,\n          0xe57e: 0x86ec,\n          0xe580: 0x86df,\n          0xe581: 0x86db,\n          0xe582: 0x86ef,\n          0xe583: 0x8712,\n          0xe584: 0x8706,\n          0xe585: 0x8708,\n          0xe586: 0x8700,\n          0xe587: 0x8703,\n          0xe588: 0x86fb,\n          0xe589: 0x8711,\n          0xe58a: 0x8709,\n          0xe58b: 0x870d,\n          0xe58c: 0x86f9,\n          0xe58d: 0x870a,\n          0xe58e: 0x8734,\n          0xe58f: 0x873f,\n          0xe590: 0x8737,\n          0xe591: 0x873b,\n          0xe592: 0x8725,\n          0xe593: 0x8729,\n          0xe594: 0x871a,\n          0xe595: 0x8760,\n          0xe596: 0x875f,\n          0xe597: 0x8778,\n          0xe598: 0x874c,\n          0xe599: 0x874e,\n          0xe59a: 0x8774,\n          0xe59b: 0x8757,\n          0xe59c: 0x8768,\n          0xe59d: 0x876e,\n          0xe59e: 0x8759,\n          0xe59f: 0x8753,\n          0xe5a0: 0x8763,\n          0xe5a1: 0x876a,\n          0xe5a2: 0x8805,\n          0xe5a3: 0x87a2,\n          0xe5a4: 0x879f,\n          0xe5a5: 0x8782,\n          0xe5a6: 0x87af,\n          0xe5a7: 0x87cb,\n          0xe5a8: 0x87bd,\n          0xe5a9: 0x87c0,\n          0xe5aa: 0x87d0,\n          0xe5ab: 0x96d6,\n          0xe5ac: 0x87ab,\n          0xe5ad: 0x87c4,\n          0xe5ae: 0x87b3,\n          0xe5af: 0x87c7,\n          0xe5b0: 0x87c6,\n          0xe5b1: 0x87bb,\n          0xe5b2: 0x87ef,\n          0xe5b3: 0x87f2,\n          0xe5b4: 0x87e0,\n          0xe5b5: 0x880f,\n          0xe5b6: 0x880d,\n          0xe5b7: 0x87fe,\n          0xe5b8: 0x87f6,\n          0xe5b9: 0x87f7,\n          0xe5ba: 0x880e,\n          0xe5bb: 0x87d2,\n          0xe5bc: 0x8811,\n          0xe5bd: 0x8816,\n          0xe5be: 0x8815,\n          0xe5bf: 0x8822,\n          0xe5c0: 0x8821,\n          0xe5c1: 0x8831,\n          0xe5c2: 0x8836,\n          0xe5c3: 0x8839,\n          0xe5c4: 0x8827,\n          0xe5c5: 0x883b,\n          0xe5c6: 0x8844,\n          0xe5c7: 0x8842,\n          0xe5c8: 0x8852,\n          0xe5c9: 0x8859,\n          0xe5ca: 0x885e,\n          0xe5cb: 0x8862,\n          0xe5cc: 0x886b,\n          0xe5cd: 0x8881,\n          0xe5ce: 0x887e,\n          0xe5cf: 0x889e,\n          0xe5d0: 0x8875,\n          0xe5d1: 0x887d,\n          0xe5d2: 0x88b5,\n          0xe5d3: 0x8872,\n          0xe5d4: 0x8882,\n          0xe5d5: 0x8897,\n          0xe5d6: 0x8892,\n          0xe5d7: 0x88ae,\n          0xe5d8: 0x8899,\n          0xe5d9: 0x88a2,\n          0xe5da: 0x888d,\n          0xe5db: 0x88a4,\n          0xe5dc: 0x88b0,\n          0xe5dd: 0x88bf,\n          0xe5de: 0x88b1,\n          0xe5df: 0x88c3,\n          0xe5e0: 0x88c4,\n          0xe5e1: 0x88d4,\n          0xe5e2: 0x88d8,\n          0xe5e3: 0x88d9,\n          0xe5e4: 0x88dd,\n          0xe5e5: 0x88f9,\n          0xe5e6: 0x8902,\n          0xe5e7: 0x88fc,\n          0xe5e8: 0x88f4,\n          0xe5e9: 0x88e8,\n          0xe5ea: 0x88f2,\n          0xe5eb: 0x8904,\n          0xe5ec: 0x890c,\n          0xe5ed: 0x890a,\n          0xe5ee: 0x8913,\n          0xe5ef: 0x8943,\n          0xe5f0: 0x891e,\n          0xe5f1: 0x8925,\n          0xe5f2: 0x892a,\n          0xe5f3: 0x892b,\n          0xe5f4: 0x8941,\n          0xe5f5: 0x8944,\n          0xe5f6: 0x893b,\n          0xe5f7: 0x8936,\n          0xe5f8: 0x8938,\n          0xe5f9: 0x894c,\n          0xe5fa: 0x891d,\n          0xe5fb: 0x8960,\n          0xe5fc: 0x895e,\n          0xe640: 0x8966,\n          0xe641: 0x8964,\n          0xe642: 0x896d,\n          0xe643: 0x896a,\n          0xe644: 0x896f,\n          0xe645: 0x8974,\n          0xe646: 0x8977,\n          0xe647: 0x897e,\n          0xe648: 0x8983,\n          0xe649: 0x8988,\n          0xe64a: 0x898a,\n          0xe64b: 0x8993,\n          0xe64c: 0x8998,\n          0xe64d: 0x89a1,\n          0xe64e: 0x89a9,\n          0xe64f: 0x89a6,\n          0xe650: 0x89ac,\n          0xe651: 0x89af,\n          0xe652: 0x89b2,\n          0xe653: 0x89ba,\n          0xe654: 0x89bd,\n          0xe655: 0x89bf,\n          0xe656: 0x89c0,\n          0xe657: 0x89da,\n          0xe658: 0x89dc,\n          0xe659: 0x89dd,\n          0xe65a: 0x89e7,\n          0xe65b: 0x89f4,\n          0xe65c: 0x89f8,\n          0xe65d: 0x8a03,\n          0xe65e: 0x8a16,\n          0xe65f: 0x8a10,\n          0xe660: 0x8a0c,\n          0xe661: 0x8a1b,\n          0xe662: 0x8a1d,\n          0xe663: 0x8a25,\n          0xe664: 0x8a36,\n          0xe665: 0x8a41,\n          0xe666: 0x8a5b,\n          0xe667: 0x8a52,\n          0xe668: 0x8a46,\n          0xe669: 0x8a48,\n          0xe66a: 0x8a7c,\n          0xe66b: 0x8a6d,\n          0xe66c: 0x8a6c,\n          0xe66d: 0x8a62,\n          0xe66e: 0x8a85,\n          0xe66f: 0x8a82,\n          0xe670: 0x8a84,\n          0xe671: 0x8aa8,\n          0xe672: 0x8aa1,\n          0xe673: 0x8a91,\n          0xe674: 0x8aa5,\n          0xe675: 0x8aa6,\n          0xe676: 0x8a9a,\n          0xe677: 0x8aa3,\n          0xe678: 0x8ac4,\n          0xe679: 0x8acd,\n          0xe67a: 0x8ac2,\n          0xe67b: 0x8ada,\n          0xe67c: 0x8aeb,\n          0xe67d: 0x8af3,\n          0xe67e: 0x8ae7,\n          0xe680: 0x8ae4,\n          0xe681: 0x8af1,\n          0xe682: 0x8b14,\n          0xe683: 0x8ae0,\n          0xe684: 0x8ae2,\n          0xe685: 0x8af7,\n          0xe686: 0x8ade,\n          0xe687: 0x8adb,\n          0xe688: 0x8b0c,\n          0xe689: 0x8b07,\n          0xe68a: 0x8b1a,\n          0xe68b: 0x8ae1,\n          0xe68c: 0x8b16,\n          0xe68d: 0x8b10,\n          0xe68e: 0x8b17,\n          0xe68f: 0x8b20,\n          0xe690: 0x8b33,\n          0xe691: 0x97ab,\n          0xe692: 0x8b26,\n          0xe693: 0x8b2b,\n          0xe694: 0x8b3e,\n          0xe695: 0x8b28,\n          0xe696: 0x8b41,\n          0xe697: 0x8b4c,\n          0xe698: 0x8b4f,\n          0xe699: 0x8b4e,\n          0xe69a: 0x8b49,\n          0xe69b: 0x8b56,\n          0xe69c: 0x8b5b,\n          0xe69d: 0x8b5a,\n          0xe69e: 0x8b6b,\n          0xe69f: 0x8b5f,\n          0xe6a0: 0x8b6c,\n          0xe6a1: 0x8b6f,\n          0xe6a2: 0x8b74,\n          0xe6a3: 0x8b7d,\n          0xe6a4: 0x8b80,\n          0xe6a5: 0x8b8c,\n          0xe6a6: 0x8b8e,\n          0xe6a7: 0x8b92,\n          0xe6a8: 0x8b93,\n          0xe6a9: 0x8b96,\n          0xe6aa: 0x8b99,\n          0xe6ab: 0x8b9a,\n          0xe6ac: 0x8c3a,\n          0xe6ad: 0x8c41,\n          0xe6ae: 0x8c3f,\n          0xe6af: 0x8c48,\n          0xe6b0: 0x8c4c,\n          0xe6b1: 0x8c4e,\n          0xe6b2: 0x8c50,\n          0xe6b3: 0x8c55,\n          0xe6b4: 0x8c62,\n          0xe6b5: 0x8c6c,\n          0xe6b6: 0x8c78,\n          0xe6b7: 0x8c7a,\n          0xe6b8: 0x8c82,\n          0xe6b9: 0x8c89,\n          0xe6ba: 0x8c85,\n          0xe6bb: 0x8c8a,\n          0xe6bc: 0x8c8d,\n          0xe6bd: 0x8c8e,\n          0xe6be: 0x8c94,\n          0xe6bf: 0x8c7c,\n          0xe6c0: 0x8c98,\n          0xe6c1: 0x621d,\n          0xe6c2: 0x8cad,\n          0xe6c3: 0x8caa,\n          0xe6c4: 0x8cbd,\n          0xe6c5: 0x8cb2,\n          0xe6c6: 0x8cb3,\n          0xe6c7: 0x8cae,\n          0xe6c8: 0x8cb6,\n          0xe6c9: 0x8cc8,\n          0xe6ca: 0x8cc1,\n          0xe6cb: 0x8ce4,\n          0xe6cc: 0x8ce3,\n          0xe6cd: 0x8cda,\n          0xe6ce: 0x8cfd,\n          0xe6cf: 0x8cfa,\n          0xe6d0: 0x8cfb,\n          0xe6d1: 0x8d04,\n          0xe6d2: 0x8d05,\n          0xe6d3: 0x8d0a,\n          0xe6d4: 0x8d07,\n          0xe6d5: 0x8d0f,\n          0xe6d6: 0x8d0d,\n          0xe6d7: 0x8d10,\n          0xe6d8: 0x9f4e,\n          0xe6d9: 0x8d13,\n          0xe6da: 0x8ccd,\n          0xe6db: 0x8d14,\n          0xe6dc: 0x8d16,\n          0xe6dd: 0x8d67,\n          0xe6de: 0x8d6d,\n          0xe6df: 0x8d71,\n          0xe6e0: 0x8d73,\n          0xe6e1: 0x8d81,\n          0xe6e2: 0x8d99,\n          0xe6e3: 0x8dc2,\n          0xe6e4: 0x8dbe,\n          0xe6e5: 0x8dba,\n          0xe6e6: 0x8dcf,\n          0xe6e7: 0x8dda,\n          0xe6e8: 0x8dd6,\n          0xe6e9: 0x8dcc,\n          0xe6ea: 0x8ddb,\n          0xe6eb: 0x8dcb,\n          0xe6ec: 0x8dea,\n          0xe6ed: 0x8deb,\n          0xe6ee: 0x8ddf,\n          0xe6ef: 0x8de3,\n          0xe6f0: 0x8dfc,\n          0xe6f1: 0x8e08,\n          0xe6f2: 0x8e09,\n          0xe6f3: 0x8dff,\n          0xe6f4: 0x8e1d,\n          0xe6f5: 0x8e1e,\n          0xe6f6: 0x8e10,\n          0xe6f7: 0x8e1f,\n          0xe6f8: 0x8e42,\n          0xe6f9: 0x8e35,\n          0xe6fa: 0x8e30,\n          0xe6fb: 0x8e34,\n          0xe6fc: 0x8e4a,\n          0xe740: 0x8e47,\n          0xe741: 0x8e49,\n          0xe742: 0x8e4c,\n          0xe743: 0x8e50,\n          0xe744: 0x8e48,\n          0xe745: 0x8e59,\n          0xe746: 0x8e64,\n          0xe747: 0x8e60,\n          0xe748: 0x8e2a,\n          0xe749: 0x8e63,\n          0xe74a: 0x8e55,\n          0xe74b: 0x8e76,\n          0xe74c: 0x8e72,\n          0xe74d: 0x8e7c,\n          0xe74e: 0x8e81,\n          0xe74f: 0x8e87,\n          0xe750: 0x8e85,\n          0xe751: 0x8e84,\n          0xe752: 0x8e8b,\n          0xe753: 0x8e8a,\n          0xe754: 0x8e93,\n          0xe755: 0x8e91,\n          0xe756: 0x8e94,\n          0xe757: 0x8e99,\n          0xe758: 0x8eaa,\n          0xe759: 0x8ea1,\n          0xe75a: 0x8eac,\n          0xe75b: 0x8eb0,\n          0xe75c: 0x8ec6,\n          0xe75d: 0x8eb1,\n          0xe75e: 0x8ebe,\n          0xe75f: 0x8ec5,\n          0xe760: 0x8ec8,\n          0xe761: 0x8ecb,\n          0xe762: 0x8edb,\n          0xe763: 0x8ee3,\n          0xe764: 0x8efc,\n          0xe765: 0x8efb,\n          0xe766: 0x8eeb,\n          0xe767: 0x8efe,\n          0xe768: 0x8f0a,\n          0xe769: 0x8f05,\n          0xe76a: 0x8f15,\n          0xe76b: 0x8f12,\n          0xe76c: 0x8f19,\n          0xe76d: 0x8f13,\n          0xe76e: 0x8f1c,\n          0xe76f: 0x8f1f,\n          0xe770: 0x8f1b,\n          0xe771: 0x8f0c,\n          0xe772: 0x8f26,\n          0xe773: 0x8f33,\n          0xe774: 0x8f3b,\n          0xe775: 0x8f39,\n          0xe776: 0x8f45,\n          0xe777: 0x8f42,\n          0xe778: 0x8f3e,\n          0xe779: 0x8f4c,\n          0xe77a: 0x8f49,\n          0xe77b: 0x8f46,\n          0xe77c: 0x8f4e,\n          0xe77d: 0x8f57,\n          0xe77e: 0x8f5c,\n          0xe780: 0x8f62,\n          0xe781: 0x8f63,\n          0xe782: 0x8f64,\n          0xe783: 0x8f9c,\n          0xe784: 0x8f9f,\n          0xe785: 0x8fa3,\n          0xe786: 0x8fad,\n          0xe787: 0x8faf,\n          0xe788: 0x8fb7,\n          0xe789: 0x8fda,\n          0xe78a: 0x8fe5,\n          0xe78b: 0x8fe2,\n          0xe78c: 0x8fea,\n          0xe78d: 0x8fef,\n          0xe78e: 0x9087,\n          0xe78f: 0x8ff4,\n          0xe790: 0x9005,\n          0xe791: 0x8ff9,\n          0xe792: 0x8ffa,\n          0xe793: 0x9011,\n          0xe794: 0x9015,\n          0xe795: 0x9021,\n          0xe796: 0x900d,\n          0xe797: 0x901e,\n          0xe798: 0x9016,\n          0xe799: 0x900b,\n          0xe79a: 0x9027,\n          0xe79b: 0x9036,\n          0xe79c: 0x9035,\n          0xe79d: 0x9039,\n          0xe79e: 0x8ff8,\n          0xe79f: 0x904f,\n          0xe7a0: 0x9050,\n          0xe7a1: 0x9051,\n          0xe7a2: 0x9052,\n          0xe7a3: 0x900e,\n          0xe7a4: 0x9049,\n          0xe7a5: 0x903e,\n          0xe7a6: 0x9056,\n          0xe7a7: 0x9058,\n          0xe7a8: 0x905e,\n          0xe7a9: 0x9068,\n          0xe7aa: 0x906f,\n          0xe7ab: 0x9076,\n          0xe7ac: 0x96a8,\n          0xe7ad: 0x9072,\n          0xe7ae: 0x9082,\n          0xe7af: 0x907d,\n          0xe7b0: 0x9081,\n          0xe7b1: 0x9080,\n          0xe7b2: 0x908a,\n          0xe7b3: 0x9089,\n          0xe7b4: 0x908f,\n          0xe7b5: 0x90a8,\n          0xe7b6: 0x90af,\n          0xe7b7: 0x90b1,\n          0xe7b8: 0x90b5,\n          0xe7b9: 0x90e2,\n          0xe7ba: 0x90e4,\n          0xe7bb: 0x6248,\n          0xe7bc: 0x90db,\n          0xe7bd: 0x9102,\n          0xe7be: 0x9112,\n          0xe7bf: 0x9119,\n          0xe7c0: 0x9132,\n          0xe7c1: 0x9130,\n          0xe7c2: 0x914a,\n          0xe7c3: 0x9156,\n          0xe7c4: 0x9158,\n          0xe7c5: 0x9163,\n          0xe7c6: 0x9165,\n          0xe7c7: 0x9169,\n          0xe7c8: 0x9173,\n          0xe7c9: 0x9172,\n          0xe7ca: 0x918b,\n          0xe7cb: 0x9189,\n          0xe7cc: 0x9182,\n          0xe7cd: 0x91a2,\n          0xe7ce: 0x91ab,\n          0xe7cf: 0x91af,\n          0xe7d0: 0x91aa,\n          0xe7d1: 0x91b5,\n          0xe7d2: 0x91b4,\n          0xe7d3: 0x91ba,\n          0xe7d4: 0x91c0,\n          0xe7d5: 0x91c1,\n          0xe7d6: 0x91c9,\n          0xe7d7: 0x91cb,\n          0xe7d8: 0x91d0,\n          0xe7d9: 0x91d6,\n          0xe7da: 0x91df,\n          0xe7db: 0x91e1,\n          0xe7dc: 0x91db,\n          0xe7dd: 0x91fc,\n          0xe7de: 0x91f5,\n          0xe7df: 0x91f6,\n          0xe7e0: 0x921e,\n          0xe7e1: 0x91ff,\n          0xe7e2: 0x9214,\n          0xe7e3: 0x922c,\n          0xe7e4: 0x9215,\n          0xe7e5: 0x9211,\n          0xe7e6: 0x925e,\n          0xe7e7: 0x9257,\n          0xe7e8: 0x9245,\n          0xe7e9: 0x9249,\n          0xe7ea: 0x9264,\n          0xe7eb: 0x9248,\n          0xe7ec: 0x9295,\n          0xe7ed: 0x923f,\n          0xe7ee: 0x924b,\n          0xe7ef: 0x9250,\n          0xe7f0: 0x929c,\n          0xe7f1: 0x9296,\n          0xe7f2: 0x9293,\n          0xe7f3: 0x929b,\n          0xe7f4: 0x925a,\n          0xe7f5: 0x92cf,\n          0xe7f6: 0x92b9,\n          0xe7f7: 0x92b7,\n          0xe7f8: 0x92e9,\n          0xe7f9: 0x930f,\n          0xe7fa: 0x92fa,\n          0xe7fb: 0x9344,\n          0xe7fc: 0x932e,\n          0xe840: 0x9319,\n          0xe841: 0x9322,\n          0xe842: 0x931a,\n          0xe843: 0x9323,\n          0xe844: 0x933a,\n          0xe845: 0x9335,\n          0xe846: 0x933b,\n          0xe847: 0x935c,\n          0xe848: 0x9360,\n          0xe849: 0x937c,\n          0xe84a: 0x936e,\n          0xe84b: 0x9356,\n          0xe84c: 0x93b0,\n          0xe84d: 0x93ac,\n          0xe84e: 0x93ad,\n          0xe84f: 0x9394,\n          0xe850: 0x93b9,\n          0xe851: 0x93d6,\n          0xe852: 0x93d7,\n          0xe853: 0x93e8,\n          0xe854: 0x93e5,\n          0xe855: 0x93d8,\n          0xe856: 0x93c3,\n          0xe857: 0x93dd,\n          0xe858: 0x93d0,\n          0xe859: 0x93c8,\n          0xe85a: 0x93e4,\n          0xe85b: 0x941a,\n          0xe85c: 0x9414,\n          0xe85d: 0x9413,\n          0xe85e: 0x9403,\n          0xe85f: 0x9407,\n          0xe860: 0x9410,\n          0xe861: 0x9436,\n          0xe862: 0x942b,\n          0xe863: 0x9435,\n          0xe864: 0x9421,\n          0xe865: 0x943a,\n          0xe866: 0x9441,\n          0xe867: 0x9452,\n          0xe868: 0x9444,\n          0xe869: 0x945b,\n          0xe86a: 0x9460,\n          0xe86b: 0x9462,\n          0xe86c: 0x945e,\n          0xe86d: 0x946a,\n          0xe86e: 0x9229,\n          0xe86f: 0x9470,\n          0xe870: 0x9475,\n          0xe871: 0x9477,\n          0xe872: 0x947d,\n          0xe873: 0x945a,\n          0xe874: 0x947c,\n          0xe875: 0x947e,\n          0xe876: 0x9481,\n          0xe877: 0x947f,\n          0xe878: 0x9582,\n          0xe879: 0x9587,\n          0xe87a: 0x958a,\n          0xe87b: 0x9594,\n          0xe87c: 0x9596,\n          0xe87d: 0x9598,\n          0xe87e: 0x9599,\n          0xe880: 0x95a0,\n          0xe881: 0x95a8,\n          0xe882: 0x95a7,\n          0xe883: 0x95ad,\n          0xe884: 0x95bc,\n          0xe885: 0x95bb,\n          0xe886: 0x95b9,\n          0xe887: 0x95be,\n          0xe888: 0x95ca,\n          0xe889: 0x6ff6,\n          0xe88a: 0x95c3,\n          0xe88b: 0x95cd,\n          0xe88c: 0x95cc,\n          0xe88d: 0x95d5,\n          0xe88e: 0x95d4,\n          0xe88f: 0x95d6,\n          0xe890: 0x95dc,\n          0xe891: 0x95e1,\n          0xe892: 0x95e5,\n          0xe893: 0x95e2,\n          0xe894: 0x9621,\n          0xe895: 0x9628,\n          0xe896: 0x962e,\n          0xe897: 0x962f,\n          0xe898: 0x9642,\n          0xe899: 0x964c,\n          0xe89a: 0x964f,\n          0xe89b: 0x964b,\n          0xe89c: 0x9677,\n          0xe89d: 0x965c,\n          0xe89e: 0x965e,\n          0xe89f: 0x965d,\n          0xe8a0: 0x965f,\n          0xe8a1: 0x9666,\n          0xe8a2: 0x9672,\n          0xe8a3: 0x966c,\n          0xe8a4: 0x968d,\n          0xe8a5: 0x9698,\n          0xe8a6: 0x9695,\n          0xe8a7: 0x9697,\n          0xe8a8: 0x96aa,\n          0xe8a9: 0x96a7,\n          0xe8aa: 0x96b1,\n          0xe8ab: 0x96b2,\n          0xe8ac: 0x96b0,\n          0xe8ad: 0x96b4,\n          0xe8ae: 0x96b6,\n          0xe8af: 0x96b8,\n          0xe8b0: 0x96b9,\n          0xe8b1: 0x96ce,\n          0xe8b2: 0x96cb,\n          0xe8b3: 0x96c9,\n          0xe8b4: 0x96cd,\n          0xe8b5: 0x894d,\n          0xe8b6: 0x96dc,\n          0xe8b7: 0x970d,\n          0xe8b8: 0x96d5,\n          0xe8b9: 0x96f9,\n          0xe8ba: 0x9704,\n          0xe8bb: 0x9706,\n          0xe8bc: 0x9708,\n          0xe8bd: 0x9713,\n          0xe8be: 0x970e,\n          0xe8bf: 0x9711,\n          0xe8c0: 0x970f,\n          0xe8c1: 0x9716,\n          0xe8c2: 0x9719,\n          0xe8c3: 0x9724,\n          0xe8c4: 0x972a,\n          0xe8c5: 0x9730,\n          0xe8c6: 0x9739,\n          0xe8c7: 0x973d,\n          0xe8c8: 0x973e,\n          0xe8c9: 0x9744,\n          0xe8ca: 0x9746,\n          0xe8cb: 0x9748,\n          0xe8cc: 0x9742,\n          0xe8cd: 0x9749,\n          0xe8ce: 0x975c,\n          0xe8cf: 0x9760,\n          0xe8d0: 0x9764,\n          0xe8d1: 0x9766,\n          0xe8d2: 0x9768,\n          0xe8d3: 0x52d2,\n          0xe8d4: 0x976b,\n          0xe8d5: 0x9771,\n          0xe8d6: 0x9779,\n          0xe8d7: 0x9785,\n          0xe8d8: 0x977c,\n          0xe8d9: 0x9781,\n          0xe8da: 0x977a,\n          0xe8db: 0x9786,\n          0xe8dc: 0x978b,\n          0xe8dd: 0x978f,\n          0xe8de: 0x9790,\n          0xe8df: 0x979c,\n          0xe8e0: 0x97a8,\n          0xe8e1: 0x97a6,\n          0xe8e2: 0x97a3,\n          0xe8e3: 0x97b3,\n          0xe8e4: 0x97b4,\n          0xe8e5: 0x97c3,\n          0xe8e6: 0x97c6,\n          0xe8e7: 0x97c8,\n          0xe8e8: 0x97cb,\n          0xe8e9: 0x97dc,\n          0xe8ea: 0x97ed,\n          0xe8eb: 0x9f4f,\n          0xe8ec: 0x97f2,\n          0xe8ed: 0x7adf,\n          0xe8ee: 0x97f6,\n          0xe8ef: 0x97f5,\n          0xe8f0: 0x980f,\n          0xe8f1: 0x980c,\n          0xe8f2: 0x9838,\n          0xe8f3: 0x9824,\n          0xe8f4: 0x9821,\n          0xe8f5: 0x9837,\n          0xe8f6: 0x983d,\n          0xe8f7: 0x9846,\n          0xe8f8: 0x984f,\n          0xe8f9: 0x984b,\n          0xe8fa: 0x986b,\n          0xe8fb: 0x986f,\n          0xe8fc: 0x9870,\n          0xe940: 0x9871,\n          0xe941: 0x9874,\n          0xe942: 0x9873,\n          0xe943: 0x98aa,\n          0xe944: 0x98af,\n          0xe945: 0x98b1,\n          0xe946: 0x98b6,\n          0xe947: 0x98c4,\n          0xe948: 0x98c3,\n          0xe949: 0x98c6,\n          0xe94a: 0x98e9,\n          0xe94b: 0x98eb,\n          0xe94c: 0x9903,\n          0xe94d: 0x9909,\n          0xe94e: 0x9912,\n          0xe94f: 0x9914,\n          0xe950: 0x9918,\n          0xe951: 0x9921,\n          0xe952: 0x991d,\n          0xe953: 0x991e,\n          0xe954: 0x9924,\n          0xe955: 0x9920,\n          0xe956: 0x992c,\n          0xe957: 0x992e,\n          0xe958: 0x993d,\n          0xe959: 0x993e,\n          0xe95a: 0x9942,\n          0xe95b: 0x9949,\n          0xe95c: 0x9945,\n          0xe95d: 0x9950,\n          0xe95e: 0x994b,\n          0xe95f: 0x9951,\n          0xe960: 0x9952,\n          0xe961: 0x994c,\n          0xe962: 0x9955,\n          0xe963: 0x9997,\n          0xe964: 0x9998,\n          0xe965: 0x99a5,\n          0xe966: 0x99ad,\n          0xe967: 0x99ae,\n          0xe968: 0x99bc,\n          0xe969: 0x99df,\n          0xe96a: 0x99db,\n          0xe96b: 0x99dd,\n          0xe96c: 0x99d8,\n          0xe96d: 0x99d1,\n          0xe96e: 0x99ed,\n          0xe96f: 0x99ee,\n          0xe970: 0x99f1,\n          0xe971: 0x99f2,\n          0xe972: 0x99fb,\n          0xe973: 0x99f8,\n          0xe974: 0x9a01,\n          0xe975: 0x9a0f,\n          0xe976: 0x9a05,\n          0xe977: 0x99e2,\n          0xe978: 0x9a19,\n          0xe979: 0x9a2b,\n          0xe97a: 0x9a37,\n          0xe97b: 0x9a45,\n          0xe97c: 0x9a42,\n          0xe97d: 0x9a40,\n          0xe97e: 0x9a43,\n          0xe980: 0x9a3e,\n          0xe981: 0x9a55,\n          0xe982: 0x9a4d,\n          0xe983: 0x9a5b,\n          0xe984: 0x9a57,\n          0xe985: 0x9a5f,\n          0xe986: 0x9a62,\n          0xe987: 0x9a65,\n          0xe988: 0x9a64,\n          0xe989: 0x9a69,\n          0xe98a: 0x9a6b,\n          0xe98b: 0x9a6a,\n          0xe98c: 0x9aad,\n          0xe98d: 0x9ab0,\n          0xe98e: 0x9abc,\n          0xe98f: 0x9ac0,\n          0xe990: 0x9acf,\n          0xe991: 0x9ad1,\n          0xe992: 0x9ad3,\n          0xe993: 0x9ad4,\n          0xe994: 0x9ade,\n          0xe995: 0x9adf,\n          0xe996: 0x9ae2,\n          0xe997: 0x9ae3,\n          0xe998: 0x9ae6,\n          0xe999: 0x9aef,\n          0xe99a: 0x9aeb,\n          0xe99b: 0x9aee,\n          0xe99c: 0x9af4,\n          0xe99d: 0x9af1,\n          0xe99e: 0x9af7,\n          0xe99f: 0x9afb,\n          0xe9a0: 0x9b06,\n          0xe9a1: 0x9b18,\n          0xe9a2: 0x9b1a,\n          0xe9a3: 0x9b1f,\n          0xe9a4: 0x9b22,\n          0xe9a5: 0x9b23,\n          0xe9a6: 0x9b25,\n          0xe9a7: 0x9b27,\n          0xe9a8: 0x9b28,\n          0xe9a9: 0x9b29,\n          0xe9aa: 0x9b2a,\n          0xe9ab: 0x9b2e,\n          0xe9ac: 0x9b2f,\n          0xe9ad: 0x9b32,\n          0xe9ae: 0x9b44,\n          0xe9af: 0x9b43,\n          0xe9b0: 0x9b4f,\n          0xe9b1: 0x9b4d,\n          0xe9b2: 0x9b4e,\n          0xe9b3: 0x9b51,\n          0xe9b4: 0x9b58,\n          0xe9b5: 0x9b74,\n          0xe9b6: 0x9b93,\n          0xe9b7: 0x9b83,\n          0xe9b8: 0x9b91,\n          0xe9b9: 0x9b96,\n          0xe9ba: 0x9b97,\n          0xe9bb: 0x9b9f,\n          0xe9bc: 0x9ba0,\n          0xe9bd: 0x9ba8,\n          0xe9be: 0x9bb4,\n          0xe9bf: 0x9bc0,\n          0xe9c0: 0x9bca,\n          0xe9c1: 0x9bb9,\n          0xe9c2: 0x9bc6,\n          0xe9c3: 0x9bcf,\n          0xe9c4: 0x9bd1,\n          0xe9c5: 0x9bd2,\n          0xe9c6: 0x9be3,\n          0xe9c7: 0x9be2,\n          0xe9c8: 0x9be4,\n          0xe9c9: 0x9bd4,\n          0xe9ca: 0x9be1,\n          0xe9cb: 0x9c3a,\n          0xe9cc: 0x9bf2,\n          0xe9cd: 0x9bf1,\n          0xe9ce: 0x9bf0,\n          0xe9cf: 0x9c15,\n          0xe9d0: 0x9c14,\n          0xe9d1: 0x9c09,\n          0xe9d2: 0x9c13,\n          0xe9d3: 0x9c0c,\n          0xe9d4: 0x9c06,\n          0xe9d5: 0x9c08,\n          0xe9d6: 0x9c12,\n          0xe9d7: 0x9c0a,\n          0xe9d8: 0x9c04,\n          0xe9d9: 0x9c2e,\n          0xe9da: 0x9c1b,\n          0xe9db: 0x9c25,\n          0xe9dc: 0x9c24,\n          0xe9dd: 0x9c21,\n          0xe9de: 0x9c30,\n          0xe9df: 0x9c47,\n          0xe9e0: 0x9c32,\n          0xe9e1: 0x9c46,\n          0xe9e2: 0x9c3e,\n          0xe9e3: 0x9c5a,\n          0xe9e4: 0x9c60,\n          0xe9e5: 0x9c67,\n          0xe9e6: 0x9c76,\n          0xe9e7: 0x9c78,\n          0xe9e8: 0x9ce7,\n          0xe9e9: 0x9cec,\n          0xe9ea: 0x9cf0,\n          0xe9eb: 0x9d09,\n          0xe9ec: 0x9d08,\n          0xe9ed: 0x9ceb,\n          0xe9ee: 0x9d03,\n          0xe9ef: 0x9d06,\n          0xe9f0: 0x9d2a,\n          0xe9f1: 0x9d26,\n          0xe9f2: 0x9daf,\n          0xe9f3: 0x9d23,\n          0xe9f4: 0x9d1f,\n          0xe9f5: 0x9d44,\n          0xe9f6: 0x9d15,\n          0xe9f7: 0x9d12,\n          0xe9f8: 0x9d41,\n          0xe9f9: 0x9d3f,\n          0xe9fa: 0x9d3e,\n          0xe9fb: 0x9d46,\n          0xe9fc: 0x9d48,\n          0xea40: 0x9d5d,\n          0xea41: 0x9d5e,\n          0xea42: 0x9d64,\n          0xea43: 0x9d51,\n          0xea44: 0x9d50,\n          0xea45: 0x9d59,\n          0xea46: 0x9d72,\n          0xea47: 0x9d89,\n          0xea48: 0x9d87,\n          0xea49: 0x9dab,\n          0xea4a: 0x9d6f,\n          0xea4b: 0x9d7a,\n          0xea4c: 0x9d9a,\n          0xea4d: 0x9da4,\n          0xea4e: 0x9da9,\n          0xea4f: 0x9db2,\n          0xea50: 0x9dc4,\n          0xea51: 0x9dc1,\n          0xea52: 0x9dbb,\n          0xea53: 0x9db8,\n          0xea54: 0x9dba,\n          0xea55: 0x9dc6,\n          0xea56: 0x9dcf,\n          0xea57: 0x9dc2,\n          0xea58: 0x9dd9,\n          0xea59: 0x9dd3,\n          0xea5a: 0x9df8,\n          0xea5b: 0x9de6,\n          0xea5c: 0x9ded,\n          0xea5d: 0x9def,\n          0xea5e: 0x9dfd,\n          0xea5f: 0x9e1a,\n          0xea60: 0x9e1b,\n          0xea61: 0x9e1e,\n          0xea62: 0x9e75,\n          0xea63: 0x9e79,\n          0xea64: 0x9e7d,\n          0xea65: 0x9e81,\n          0xea66: 0x9e88,\n          0xea67: 0x9e8b,\n          0xea68: 0x9e8c,\n          0xea69: 0x9e92,\n          0xea6a: 0x9e95,\n          0xea6b: 0x9e91,\n          0xea6c: 0x9e9d,\n          0xea6d: 0x9ea5,\n          0xea6e: 0x9ea9,\n          0xea6f: 0x9eb8,\n          0xea70: 0x9eaa,\n          0xea71: 0x9ead,\n          0xea72: 0x9761,\n          0xea73: 0x9ecc,\n          0xea74: 0x9ece,\n          0xea75: 0x9ecf,\n          0xea76: 0x9ed0,\n          0xea77: 0x9ed4,\n          0xea78: 0x9edc,\n          0xea79: 0x9ede,\n          0xea7a: 0x9edd,\n          0xea7b: 0x9ee0,\n          0xea7c: 0x9ee5,\n          0xea7d: 0x9ee8,\n          0xea7e: 0x9eef,\n          0xea80: 0x9ef4,\n          0xea81: 0x9ef6,\n          0xea82: 0x9ef7,\n          0xea83: 0x9ef9,\n          0xea84: 0x9efb,\n          0xea85: 0x9efc,\n          0xea86: 0x9efd,\n          0xea87: 0x9f07,\n          0xea88: 0x9f08,\n          0xea89: 0x76b7,\n          0xea8a: 0x9f15,\n          0xea8b: 0x9f21,\n          0xea8c: 0x9f2c,\n          0xea8d: 0x9f3e,\n          0xea8e: 0x9f4a,\n          0xea8f: 0x9f52,\n          0xea90: 0x9f54,\n          0xea91: 0x9f63,\n          0xea92: 0x9f5f,\n          0xea93: 0x9f60,\n          0xea94: 0x9f61,\n          0xea95: 0x9f66,\n          0xea96: 0x9f67,\n          0xea97: 0x9f6c,\n          0xea98: 0x9f6a,\n          0xea99: 0x9f77,\n          0xea9a: 0x9f72,\n          0xea9b: 0x9f76,\n          0xea9c: 0x9f95,\n          0xea9d: 0x9f9c,\n          0xea9e: 0x9fa0,\n          0xea9f: 0x582f,\n          0xeaa0: 0x69c7,\n          0xeaa1: 0x9059,\n          0xeaa2: 0x7464,\n          0xeaa3: 0x51dc,\n          0xeaa4: 0x7199,\n        };\n\n        /***/\n      },\n      /* 9 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var GenericGF_1 = __webpack_require__(1);\n        var GenericGFPoly_1 = __webpack_require__(2);\n        function runEuclideanAlgorithm(field, a, b, R) {\n          var _a;\n          // Assume a's degree is >= b's\n          if (a.degree() < b.degree()) {\n            (_a = [b, a]), (a = _a[0]), (b = _a[1]);\n          }\n          var rLast = a;\n          var r = b;\n          var tLast = field.zero;\n          var t = field.one;\n          // Run Euclidean algorithm until r's degree is less than R/2\n          while (r.degree() >= R / 2) {\n            var rLastLast = rLast;\n            var tLastLast = tLast;\n            rLast = r;\n            tLast = t;\n            // Divide rLastLast by rLast, with quotient in q and remainder in r\n            if (rLast.isZero()) {\n              // Euclidean algorithm already terminated?\n              return null;\n            }\n            r = rLastLast;\n            var q = field.zero;\n            var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());\n            var dltInverse = field.inverse(denominatorLeadingTerm);\n            while (r.degree() >= rLast.degree() && !r.isZero()) {\n              var degreeDiff = r.degree() - rLast.degree();\n              var scale = field.multiply(\n                r.getCoefficient(r.degree()),\n                dltInverse\n              );\n              q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n              r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n            }\n            t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);\n            if (r.degree() >= rLast.degree()) {\n              return null;\n            }\n          }\n          var sigmaTildeAtZero = t.getCoefficient(0);\n          if (sigmaTildeAtZero === 0) {\n            return null;\n          }\n          var inverse = field.inverse(sigmaTildeAtZero);\n          return [t.multiply(inverse), r.multiply(inverse)];\n        }\n        function findErrorLocations(field, errorLocator) {\n          // This is a direct application of Chien's search\n          var numErrors = errorLocator.degree();\n          if (numErrors === 1) {\n            return [errorLocator.getCoefficient(1)];\n          }\n          var result = new Array(numErrors);\n          var errorCount = 0;\n          for (var i = 1; i < field.size && errorCount < numErrors; i++) {\n            if (errorLocator.evaluateAt(i) === 0) {\n              result[errorCount] = field.inverse(i);\n              errorCount++;\n            }\n          }\n          if (errorCount !== numErrors) {\n            return null;\n          }\n          return result;\n        }\n        function findErrorMagnitudes(field, errorEvaluator, errorLocations) {\n          // This is directly applying Forney's Formula\n          var s = errorLocations.length;\n          var result = new Array(s);\n          for (var i = 0; i < s; i++) {\n            var xiInverse = field.inverse(errorLocations[i]);\n            var denominator = 1;\n            for (var j = 0; j < s; j++) {\n              if (i !== j) {\n                denominator = field.multiply(\n                  denominator,\n                  GenericGF_1.addOrSubtractGF(\n                    1,\n                    field.multiply(errorLocations[j], xiInverse)\n                  )\n                );\n              }\n            }\n            result[i] = field.multiply(\n              errorEvaluator.evaluateAt(xiInverse),\n              field.inverse(denominator)\n            );\n            if (field.generatorBase !== 0) {\n              result[i] = field.multiply(result[i], xiInverse);\n            }\n          }\n          return result;\n        }\n        function decode(bytes, twoS) {\n          var outputBytes = new Uint8ClampedArray(bytes.length);\n          outputBytes.set(bytes);\n          var field = new GenericGF_1.default(0x011d, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n          var poly = new GenericGFPoly_1.default(field, outputBytes);\n          var syndromeCoefficients = new Uint8ClampedArray(twoS);\n          var error = false;\n          for (var s = 0; s < twoS; s++) {\n            var evaluation = poly.evaluateAt(\n              field.exp(s + field.generatorBase)\n            );\n            syndromeCoefficients[\n              syndromeCoefficients.length - 1 - s\n            ] = evaluation;\n            if (evaluation !== 0) {\n              error = true;\n            }\n          }\n          if (!error) {\n            return outputBytes;\n          }\n          var syndrome = new GenericGFPoly_1.default(\n            field,\n            syndromeCoefficients\n          );\n          var sigmaOmega = runEuclideanAlgorithm(\n            field,\n            field.buildMonomial(twoS, 1),\n            syndrome,\n            twoS\n          );\n          if (sigmaOmega === null) {\n            return null;\n          }\n          var errorLocations = findErrorLocations(field, sigmaOmega[0]);\n          if (errorLocations == null) {\n            return null;\n          }\n          var errorMagnitudes = findErrorMagnitudes(\n            field,\n            sigmaOmega[1],\n            errorLocations\n          );\n          for (var i = 0; i < errorLocations.length; i++) {\n            var position =\n              outputBytes.length - 1 - field.log(errorLocations[i]);\n            if (position < 0) {\n              return null;\n            }\n            outputBytes[position] = GenericGF_1.addOrSubtractGF(\n              outputBytes[position],\n              errorMagnitudes[i]\n            );\n          }\n          return outputBytes;\n        }\n        exports.decode = decode;\n\n        /***/\n      },\n      /* 10 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        exports.VERSIONS = [\n          {\n            infoBits: null,\n            versionNumber: 1,\n            alignmentPatternCenters: [],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 7,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],\n              },\n              {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n              },\n              {\n                ecCodewordsPerBlock: 13,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],\n              },\n              {\n                ecCodewordsPerBlock: 17,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],\n              },\n            ],\n          },\n          {\n            infoBits: null,\n            versionNumber: 2,\n            alignmentPatternCenters: [6, 18],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],\n              },\n              {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n              },\n            ],\n          },\n          {\n            infoBits: null,\n            versionNumber: 3,\n            alignmentPatternCenters: [6, 22],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 15,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],\n              },\n              {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],\n              },\n            ],\n          },\n          {\n            infoBits: null,\n            versionNumber: 4,\n            alignmentPatternCenters: [6, 26],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],\n              },\n              {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],\n              },\n              {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],\n              },\n            ],\n          },\n          {\n            infoBits: null,\n            versionNumber: 5,\n            alignmentPatternCenters: [6, 30],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],\n              },\n              {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 11 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 12 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: null,\n            versionNumber: 6,\n            alignmentPatternCenters: [6, 34],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],\n              },\n              {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],\n              },\n            ],\n          },\n          {\n            infoBits: 0x07c94,\n            versionNumber: 7,\n            alignmentPatternCenters: [6, 22, 38],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],\n              },\n              {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],\n              },\n              {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 14 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x085bc,\n            versionNumber: 8,\n            alignmentPatternCenters: [6, 24, 42],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 38 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 39 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 18 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 19 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 14 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x09a99,\n            versionNumber: 9,\n            alignmentPatternCenters: [6, 26, 46],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 36 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 16 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x0a4d3,\n            versionNumber: 10,\n            alignmentPatternCenters: [6, 28, 50],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 68 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 69 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 43 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 44 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 6, dataCodewordsPerBlock: 19 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 6, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x0bbf6,\n            versionNumber: 11,\n            alignmentPatternCenters: [6, 30, 54],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 1, dataCodewordsPerBlock: 50 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 51 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 23 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 12 },\n                  { numBlocks: 8, dataCodewordsPerBlock: 13 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x0c762,\n            versionNumber: 12,\n            alignmentPatternCenters: [6, 32, 58],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 92 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 93 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                  { numBlocks: 6, dataCodewordsPerBlock: 36 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 20 },\n                  { numBlocks: 6, dataCodewordsPerBlock: 21 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 7, dataCodewordsPerBlock: 14 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x0d847,\n            versionNumber: 13,\n            alignmentPatternCenters: [6, 34, 62],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                  { numBlocks: 8, dataCodewordsPerBlock: 37 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 38 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 8, dataCodewordsPerBlock: 20 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 21 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                  { numBlocks: 12, dataCodewordsPerBlock: 11 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x0e60d,\n            versionNumber: 14,\n            alignmentPatternCenters: [6, 26, 46, 66],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 115 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 40 },\n                  { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                  { numBlocks: 11, dataCodewordsPerBlock: 16 },\n                  { numBlocks: 5, dataCodewordsPerBlock: 17 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                  { numBlocks: 5, dataCodewordsPerBlock: 13 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x0f928,\n            versionNumber: 15,\n            alignmentPatternCenters: [6, 26, 48, 70],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                  { numBlocks: 5, dataCodewordsPerBlock: 87 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 88 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                  { numBlocks: 5, dataCodewordsPerBlock: 42 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 5, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                  { numBlocks: 7, dataCodewordsPerBlock: 13 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x10b78,\n            versionNumber: 16,\n            alignmentPatternCenters: [6, 26, 50, 74],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 5, dataCodewordsPerBlock: 98 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 99 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 7, dataCodewordsPerBlock: 45 },\n                  { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                  { numBlocks: 15, dataCodewordsPerBlock: 19 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x1145d,\n            versionNumber: 17,\n            alignmentPatternCenters: [6, 30, 54, 78],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 1, dataCodewordsPerBlock: 107 },\n                  { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 47 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 1, dataCodewordsPerBlock: 22 },\n                  { numBlocks: 15, dataCodewordsPerBlock: 23 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                  { numBlocks: 17, dataCodewordsPerBlock: 15 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x12a17,\n            versionNumber: 18,\n            alignmentPatternCenters: [6, 30, 56, 82],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 5, dataCodewordsPerBlock: 120 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 121 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 9, dataCodewordsPerBlock: 43 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 44 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                  { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x13532,\n            versionNumber: 19,\n            alignmentPatternCenters: [6, 30, 58, 86],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 113 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 114 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 44 },\n                  { numBlocks: 11, dataCodewordsPerBlock: 45 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 17, dataCodewordsPerBlock: 21 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 9, dataCodewordsPerBlock: 13 },\n                  { numBlocks: 16, dataCodewordsPerBlock: 14 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x149a6,\n            versionNumber: 20,\n            alignmentPatternCenters: [6, 34, 62, 90],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 107 },\n                  { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 41 },\n                  { numBlocks: 13, dataCodewordsPerBlock: 42 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 5, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 15, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 10, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x15683,\n            versionNumber: 21,\n            alignmentPatternCenters: [6, 28, 50, 72, 94],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 116 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 117 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                  { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 19, dataCodewordsPerBlock: 16 },\n                  { numBlocks: 6, dataCodewordsPerBlock: 17 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x168c9,\n            versionNumber: 22,\n            alignmentPatternCenters: [6, 26, 50, 74, 98],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 111 },\n                  { numBlocks: 7, dataCodewordsPerBlock: 112 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],\n              },\n            ],\n          },\n          {\n            infoBits: 0x177ec,\n            versionNumber: 23,\n            alignmentPatternCenters: [6, 30, 54, 74, 102],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 121 },\n                  { numBlocks: 5, dataCodewordsPerBlock: 122 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                  { numBlocks: 14, dataCodewordsPerBlock: 48 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 16, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 14, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x18ec4,\n            versionNumber: 24,\n            alignmentPatternCenters: [6, 28, 54, 80, 106],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 6, dataCodewordsPerBlock: 117 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 6, dataCodewordsPerBlock: 45 },\n                  { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 30, dataCodewordsPerBlock: 16 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 17 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x191e1,\n            versionNumber: 25,\n            alignmentPatternCenters: [6, 32, 58, 84, 110],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                  { numBlocks: 8, dataCodewordsPerBlock: 106 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 107 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 8, dataCodewordsPerBlock: 47 },\n                  { numBlocks: 13, dataCodewordsPerBlock: 48 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x1afab,\n            versionNumber: 26,\n            alignmentPatternCenters: [6, 30, 58, 86, 114],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 10, dataCodewordsPerBlock: 114 },\n                  { numBlocks: 2, dataCodewordsPerBlock: 115 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 19, dataCodewordsPerBlock: 46 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 28, dataCodewordsPerBlock: 22 },\n                  { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 33, dataCodewordsPerBlock: 16 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x1b08e,\n            versionNumber: 27,\n            alignmentPatternCenters: [6, 34, 62, 90, 118],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 8, dataCodewordsPerBlock: 122 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 22, dataCodewordsPerBlock: 45 },\n                  { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 8, dataCodewordsPerBlock: 23 },\n                  { numBlocks: 26, dataCodewordsPerBlock: 24 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 12, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x1cc1a,\n            versionNumber: 28,\n            alignmentPatternCenters: [6, 26, 50, 74, 98, 122],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 117 },\n                  { numBlocks: 10, dataCodewordsPerBlock: 118 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 3, dataCodewordsPerBlock: 45 },\n                  { numBlocks: 23, dataCodewordsPerBlock: 46 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 31, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 31, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x1d33f,\n            versionNumber: 29,\n            alignmentPatternCenters: [6, 30, 54, 78, 102, 126],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 7, dataCodewordsPerBlock: 116 },\n                  { numBlocks: 7, dataCodewordsPerBlock: 117 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 21, dataCodewordsPerBlock: 45 },\n                  { numBlocks: 7, dataCodewordsPerBlock: 46 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                  { numBlocks: 37, dataCodewordsPerBlock: 24 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 26, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x1ed75,\n            versionNumber: 30,\n            alignmentPatternCenters: [6, 26, 52, 78, 104, 130],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 5, dataCodewordsPerBlock: 115 },\n                  { numBlocks: 10, dataCodewordsPerBlock: 116 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 19, dataCodewordsPerBlock: 47 },\n                  { numBlocks: 10, dataCodewordsPerBlock: 48 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 25, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 25, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x1f250,\n            versionNumber: 31,\n            alignmentPatternCenters: [6, 30, 56, 82, 108, 134],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                  { numBlocks: 3, dataCodewordsPerBlock: 116 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 46 },\n                  { numBlocks: 29, dataCodewordsPerBlock: 47 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 42, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x209d5,\n            versionNumber: 32,\n            alignmentPatternCenters: [6, 34, 60, 86, 112, 138],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                  { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 10, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 35, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 35, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x216f0,\n            versionNumber: 33,\n            alignmentPatternCenters: [6, 30, 58, 86, 114, 142],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 17, dataCodewordsPerBlock: 115 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                  { numBlocks: 21, dataCodewordsPerBlock: 47 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 29, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 19, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x228ba,\n            versionNumber: 34,\n            alignmentPatternCenters: [6, 34, 62, 90, 118, 146],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                  { numBlocks: 6, dataCodewordsPerBlock: 116 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                  { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 44, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 59, dataCodewordsPerBlock: 16 },\n                  { numBlocks: 1, dataCodewordsPerBlock: 17 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x2379f,\n            versionNumber: 35,\n            alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 12, dataCodewordsPerBlock: 121 },\n                  { numBlocks: 7, dataCodewordsPerBlock: 122 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 12, dataCodewordsPerBlock: 47 },\n                  { numBlocks: 26, dataCodewordsPerBlock: 48 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 39, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 41, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x24b0b,\n            versionNumber: 36,\n            alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 6, dataCodewordsPerBlock: 121 },\n                  { numBlocks: 14, dataCodewordsPerBlock: 122 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 6, dataCodewordsPerBlock: 47 },\n                  { numBlocks: 34, dataCodewordsPerBlock: 48 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 46, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 64, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x2542e,\n            versionNumber: 37,\n            alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 17, dataCodewordsPerBlock: 122 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 29, dataCodewordsPerBlock: 46 },\n                  { numBlocks: 14, dataCodewordsPerBlock: 47 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 49, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 24, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x26a64,\n            versionNumber: 38,\n            alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 4, dataCodewordsPerBlock: 122 },\n                  { numBlocks: 18, dataCodewordsPerBlock: 123 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 13, dataCodewordsPerBlock: 46 },\n                  { numBlocks: 32, dataCodewordsPerBlock: 47 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 48, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 42, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 32, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x27541,\n            versionNumber: 39,\n            alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 20, dataCodewordsPerBlock: 117 },\n                  { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 40, dataCodewordsPerBlock: 47 },\n                  { numBlocks: 7, dataCodewordsPerBlock: 48 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 43, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 10, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 67, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n          {\n            infoBits: 0x28c69,\n            versionNumber: 40,\n            alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],\n            errorCorrectionLevels: [\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 19, dataCodewordsPerBlock: 118 },\n                  { numBlocks: 6, dataCodewordsPerBlock: 119 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                  { numBlocks: 18, dataCodewordsPerBlock: 47 },\n                  { numBlocks: 31, dataCodewordsPerBlock: 48 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 34, dataCodewordsPerBlock: 24 },\n                  { numBlocks: 34, dataCodewordsPerBlock: 25 },\n                ],\n              },\n              {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                  { numBlocks: 20, dataCodewordsPerBlock: 15 },\n                  { numBlocks: 61, dataCodewordsPerBlock: 16 },\n                ],\n              },\n            ],\n          },\n        ];\n\n        /***/\n      },\n      /* 11 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var BitMatrix_1 = __webpack_require__(0);\n        function squareToQuadrilateral(p1, p2, p3, p4) {\n          var dx3 = p1.x - p2.x + p3.x - p4.x;\n          var dy3 = p1.y - p2.y + p3.y - p4.y;\n          if (dx3 === 0 && dy3 === 0) {\n            // Affine\n            return {\n              a11: p2.x - p1.x,\n              a12: p2.y - p1.y,\n              a13: 0,\n              a21: p3.x - p2.x,\n              a22: p3.y - p2.y,\n              a23: 0,\n              a31: p1.x,\n              a32: p1.y,\n              a33: 1,\n            };\n          } else {\n            var dx1 = p2.x - p3.x;\n            var dx2 = p4.x - p3.x;\n            var dy1 = p2.y - p3.y;\n            var dy2 = p4.y - p3.y;\n            var denominator = dx1 * dy2 - dx2 * dy1;\n            var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n            var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n            return {\n              a11: p2.x - p1.x + a13 * p2.x,\n              a12: p2.y - p1.y + a13 * p2.y,\n              a13: a13,\n              a21: p4.x - p1.x + a23 * p4.x,\n              a22: p4.y - p1.y + a23 * p4.y,\n              a23: a23,\n              a31: p1.x,\n              a32: p1.y,\n              a33: 1,\n            };\n          }\n        }\n        function quadrilateralToSquare(p1, p2, p3, p4) {\n          // Here, the adjoint serves as the inverse:\n          var sToQ = squareToQuadrilateral(p1, p2, p3, p4);\n          return {\n            a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,\n            a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,\n            a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,\n            a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,\n            a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,\n            a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,\n            a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,\n            a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,\n            a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,\n          };\n        }\n        function times(a, b) {\n          return {\n            a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\n            a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\n            a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\n            a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\n            a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\n            a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\n            a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\n            a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\n            a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,\n          };\n        }\n        function extract(image, location) {\n          var qToS = quadrilateralToSquare(\n            { x: 3.5, y: 3.5 },\n            { x: location.dimension - 3.5, y: 3.5 },\n            { x: location.dimension - 6.5, y: location.dimension - 6.5 },\n            { x: 3.5, y: location.dimension - 3.5 }\n          );\n          var sToQ = squareToQuadrilateral(\n            location.topLeft,\n            location.topRight,\n            location.alignmentPattern,\n            location.bottomLeft\n          );\n          var transform = times(sToQ, qToS);\n          var matrix = BitMatrix_1.BitMatrix.createEmpty(\n            location.dimension,\n            location.dimension\n          );\n          var mappingFunction = function (x, y) {\n            var denominator =\n              transform.a13 * x + transform.a23 * y + transform.a33;\n            return {\n              x:\n                (transform.a11 * x + transform.a21 * y + transform.a31) /\n                denominator,\n              y:\n                (transform.a12 * x + transform.a22 * y + transform.a32) /\n                denominator,\n            };\n          };\n          for (var y = 0; y < location.dimension; y++) {\n            for (var x = 0; x < location.dimension; x++) {\n              var xValue = x + 0.5;\n              var yValue = y + 0.5;\n              var sourcePixel = mappingFunction(xValue, yValue);\n              matrix.set(\n                x,\n                y,\n                image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y))\n              );\n            }\n          }\n          return {\n            matrix: matrix,\n            mappingFunction: mappingFunction,\n          };\n        }\n        exports.extract = extract;\n\n        /***/\n      },\n      /* 12 */\n      /***/ function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", { value: true });\n        var MAX_FINDERPATTERNS_TO_SEARCH = 4;\n        var MIN_QUAD_RATIO = 0.5;\n        var MAX_QUAD_RATIO = 1.5;\n        var distance = function (a, b) {\n          return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n        };\n        function sum(values) {\n          return values.reduce(function (a, b) {\n            return a + b;\n          });\n        }\n        // Takes three finder patterns and organizes them into topLeft, topRight, etc\n        function reorderFinderPatterns(pattern1, pattern2, pattern3) {\n          var _a, _b, _c, _d;\n          // Find distances between pattern centers\n          var oneTwoDistance = distance(pattern1, pattern2);\n          var twoThreeDistance = distance(pattern2, pattern3);\n          var oneThreeDistance = distance(pattern1, pattern3);\n          var bottomLeft;\n          var topLeft;\n          var topRight;\n          // Assume one closest to other two is B; A and C will just be guesses at first\n          if (\n            twoThreeDistance >= oneTwoDistance &&\n            twoThreeDistance >= oneThreeDistance\n          ) {\n            (_a = [pattern2, pattern1, pattern3]),\n              (bottomLeft = _a[0]),\n              (topLeft = _a[1]),\n              (topRight = _a[2]);\n          } else if (\n            oneThreeDistance >= twoThreeDistance &&\n            oneThreeDistance >= oneTwoDistance\n          ) {\n            (_b = [pattern1, pattern2, pattern3]),\n              (bottomLeft = _b[0]),\n              (topLeft = _b[1]),\n              (topRight = _b[2]);\n          } else {\n            (_c = [pattern1, pattern3, pattern2]),\n              (bottomLeft = _c[0]),\n              (topLeft = _c[1]),\n              (topRight = _c[2]);\n          }\n          // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)\n          // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then\n          // we've got it flipped around and should swap topRight and bottomLeft.\n          if (\n            (topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y) -\n              (topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x) <\n            0\n          ) {\n            (_d = [topRight, bottomLeft]),\n              (bottomLeft = _d[0]),\n              (topRight = _d[1]);\n          }\n          return {\n            bottomLeft: bottomLeft,\n            topLeft: topLeft,\n            topRight: topRight,\n          };\n        }\n        // Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns\n        function computeDimension(topLeft, topRight, bottomLeft, matrix) {\n          var moduleSize =\n            (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1\n              sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +\n              sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +\n              sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) /\n            4;\n          if (moduleSize < 1) {\n            throw new Error(\"Invalid module size\");\n          }\n          var topDimension = Math.round(\n            distance(topLeft, topRight) / moduleSize\n          );\n          var sideDimension = Math.round(\n            distance(topLeft, bottomLeft) / moduleSize\n          );\n          var dimension = Math.floor((topDimension + sideDimension) / 2) + 7;\n          switch (dimension % 4) {\n            case 0:\n              dimension++;\n              break;\n            case 2:\n              dimension--;\n              break;\n          }\n          return { dimension: dimension, moduleSize: moduleSize };\n        }\n        // Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.\n        // Returns an array of elements, representing the pixel size of the black white run.\n        // Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n        function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {\n          var switchPoints = [\n            { x: Math.floor(origin.x), y: Math.floor(origin.y) },\n          ];\n          var steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);\n          var fromX;\n          var fromY;\n          var toX;\n          var toY;\n          if (steep) {\n            fromX = Math.floor(origin.y);\n            fromY = Math.floor(origin.x);\n            toX = Math.floor(end.y);\n            toY = Math.floor(end.x);\n          } else {\n            fromX = Math.floor(origin.x);\n            fromY = Math.floor(origin.y);\n            toX = Math.floor(end.x);\n            toY = Math.floor(end.y);\n          }\n          var dx = Math.abs(toX - fromX);\n          var dy = Math.abs(toY - fromY);\n          var error = Math.floor(-dx / 2);\n          var xStep = fromX < toX ? 1 : -1;\n          var yStep = fromY < toY ? 1 : -1;\n          var currentPixel = true;\n          // Loop up until x == toX, but not beyond\n          for (var x = fromX, y = fromY; x !== toX + xStep; x += xStep) {\n            // Does current pixel mean we have moved white to black or vice versa?\n            // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n            // color, advance to next state or end if we are in state 2 already\n            var realX = steep ? y : x;\n            var realY = steep ? x : y;\n            if (matrix.get(realX, realY) !== currentPixel) {\n              currentPixel = !currentPixel;\n              switchPoints.push({ x: realX, y: realY });\n              if (switchPoints.length === length + 1) {\n                break;\n              }\n            }\n            error += dy;\n            if (error > 0) {\n              if (y === toY) {\n                break;\n              }\n              y += yStep;\n              error -= dx;\n            }\n          }\n          var distances = [];\n          for (var i = 0; i < length; i++) {\n            if (switchPoints[i] && switchPoints[i + 1]) {\n              distances.push(distance(switchPoints[i], switchPoints[i + 1]));\n            } else {\n              distances.push(0);\n            }\n          }\n          return distances;\n        }\n        // Takes an origin point and an end point and counts the sizes of the black white run in the origin point\n        // along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes\n        // of the black white run. Takes a length which represents the number of switches from black to white to look for.\n        function countBlackWhiteRun(origin, end, matrix, length) {\n          var _a;\n          var rise = end.y - origin.y;\n          var run = end.x - origin.x;\n          var towardsEnd = countBlackWhiteRunTowardsPoint(\n            origin,\n            end,\n            matrix,\n            Math.ceil(length / 2)\n          );\n          var awayFromEnd = countBlackWhiteRunTowardsPoint(\n            origin,\n            { x: origin.x - run, y: origin.y - rise },\n            matrix,\n            Math.ceil(length / 2)\n          );\n          var middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel\n          return (_a = awayFromEnd.concat(middleValue)).concat.apply(\n            _a,\n            towardsEnd\n          );\n        }\n        // Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the \"error\" -\n        // that is the amount the run diverges from the expected ratio\n        function scoreBlackWhiteRun(sequence, ratios) {\n          var averageSize = sum(sequence) / sum(ratios);\n          var error = 0;\n          ratios.forEach(function (ratio, i) {\n            error += Math.pow(sequence[i] - ratio * averageSize, 2);\n          });\n          return { averageSize: averageSize, error: error };\n        }\n        // Takes an X,Y point and an array of sizes and scores the point against those ratios.\n        // For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios\n        // against that.\n        function scorePattern(point, ratios, matrix) {\n          try {\n            var horizontalRun = countBlackWhiteRun(\n              point,\n              { x: -1, y: point.y },\n              matrix,\n              ratios.length\n            );\n            var verticalRun = countBlackWhiteRun(\n              point,\n              { x: point.x, y: -1 },\n              matrix,\n              ratios.length\n            );\n            var topLeftPoint = {\n              x: Math.max(0, point.x - point.y) - 1,\n              y: Math.max(0, point.y - point.x) - 1,\n            };\n            var topLeftBottomRightRun = countBlackWhiteRun(\n              point,\n              topLeftPoint,\n              matrix,\n              ratios.length\n            );\n            var bottomLeftPoint = {\n              x: Math.min(matrix.width, point.x + point.y) + 1,\n              y: Math.min(matrix.height, point.y + point.x) + 1,\n            };\n            var bottomLeftTopRightRun = countBlackWhiteRun(\n              point,\n              bottomLeftPoint,\n              matrix,\n              ratios.length\n            );\n            var horzError = scoreBlackWhiteRun(horizontalRun, ratios);\n            var vertError = scoreBlackWhiteRun(verticalRun, ratios);\n            var diagDownError = scoreBlackWhiteRun(\n              topLeftBottomRightRun,\n              ratios\n            );\n            var diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);\n            var ratioError = Math.sqrt(\n              horzError.error * horzError.error +\n                vertError.error * vertError.error +\n                diagDownError.error * diagDownError.error +\n                diagUpError.error * diagUpError.error\n            );\n            var avgSize =\n              (horzError.averageSize +\n                vertError.averageSize +\n                diagDownError.averageSize +\n                diagUpError.averageSize) /\n              4;\n            var sizeError =\n              (Math.pow(horzError.averageSize - avgSize, 2) +\n                Math.pow(vertError.averageSize - avgSize, 2) +\n                Math.pow(diagDownError.averageSize - avgSize, 2) +\n                Math.pow(diagUpError.averageSize - avgSize, 2)) /\n              avgSize;\n            return ratioError + sizeError;\n          } catch (_a) {\n            return Infinity;\n          }\n        }\n        function recenterLocation(matrix, p) {\n          var leftX = Math.round(p.x);\n          while (matrix.get(leftX, Math.round(p.y))) {\n            leftX--;\n          }\n          var rightX = Math.round(p.x);\n          while (matrix.get(rightX, Math.round(p.y))) {\n            rightX++;\n          }\n          var x = (leftX + rightX) / 2;\n          var topY = Math.round(p.y);\n          while (matrix.get(Math.round(x), topY)) {\n            topY--;\n          }\n          var bottomY = Math.round(p.y);\n          while (matrix.get(Math.round(x), bottomY)) {\n            bottomY++;\n          }\n          var y = (topY + bottomY) / 2;\n          return { x: x, y: y };\n        }\n        function locate(matrix) {\n          var finderPatternQuads = [];\n          var activeFinderPatternQuads = [];\n          var alignmentPatternQuads = [];\n          var activeAlignmentPatternQuads = [];\n          var _loop_1 = function (y) {\n            var length_1 = 0;\n            var lastBit = false;\n            var scans = [0, 0, 0, 0, 0];\n            var _loop_2 = function (x) {\n              var v = matrix.get(x, y);\n              if (v === lastBit) {\n                length_1++;\n              } else {\n                scans = [scans[1], scans[2], scans[3], scans[4], length_1];\n                length_1 = 1;\n                lastBit = v;\n                // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b\n                var averageFinderPatternBlocksize = sum(scans) / 7;\n                var validFinderPattern =\n                  Math.abs(scans[0] - averageFinderPatternBlocksize) <\n                    averageFinderPatternBlocksize &&\n                  Math.abs(scans[1] - averageFinderPatternBlocksize) <\n                    averageFinderPatternBlocksize &&\n                  Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) <\n                    3 * averageFinderPatternBlocksize &&\n                  Math.abs(scans[3] - averageFinderPatternBlocksize) <\n                    averageFinderPatternBlocksize &&\n                  Math.abs(scans[4] - averageFinderPatternBlocksize) <\n                    averageFinderPatternBlocksize &&\n                  !v; // And make sure the current pixel is white since finder patterns are bordered in white\n                // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w\n                var averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;\n                var validAlignmentPattern =\n                  Math.abs(scans[2] - averageAlignmentPatternBlocksize) <\n                    averageAlignmentPatternBlocksize &&\n                  Math.abs(scans[3] - averageAlignmentPatternBlocksize) <\n                    averageAlignmentPatternBlocksize &&\n                  Math.abs(scans[4] - averageAlignmentPatternBlocksize) <\n                    averageAlignmentPatternBlocksize &&\n                  v; // Is the current pixel black since alignment patterns are bordered in black\n                if (validFinderPattern) {\n                  // Compute the start and end x values of the large center black square\n                  var endX_1 = x - scans[3] - scans[4];\n                  var startX_1 = endX_1 - scans[2];\n                  var line = { startX: startX_1, endX: endX_1, y: y };\n                  // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                  // that line as the starting point.\n                  var matchingQuads = activeFinderPatternQuads.filter(function (\n                    q\n                  ) {\n                    return (\n                      (startX_1 >= q.bottom.startX &&\n                        startX_1 <= q.bottom.endX) ||\n                      (endX_1 >= q.bottom.startX &&\n                        startX_1 <= q.bottom.endX) ||\n                      (startX_1 <= q.bottom.startX &&\n                        endX_1 >= q.bottom.endX &&\n                        scans[2] / (q.bottom.endX - q.bottom.startX) <\n                          MAX_QUAD_RATIO &&\n                        scans[2] / (q.bottom.endX - q.bottom.startX) >\n                          MIN_QUAD_RATIO)\n                    );\n                  });\n                  if (matchingQuads.length > 0) {\n                    matchingQuads[0].bottom = line;\n                  } else {\n                    activeFinderPatternQuads.push({ top: line, bottom: line });\n                  }\n                }\n                if (validAlignmentPattern) {\n                  // Compute the start and end x values of the center black square\n                  var endX_2 = x - scans[4];\n                  var startX_2 = endX_2 - scans[3];\n                  var line = { startX: startX_2, y: y, endX: endX_2 };\n                  // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                  // that line as the starting point.\n                  var matchingQuads = activeAlignmentPatternQuads.filter(\n                    function (q) {\n                      return (\n                        (startX_2 >= q.bottom.startX &&\n                          startX_2 <= q.bottom.endX) ||\n                        (endX_2 >= q.bottom.startX &&\n                          startX_2 <= q.bottom.endX) ||\n                        (startX_2 <= q.bottom.startX &&\n                          endX_2 >= q.bottom.endX &&\n                          scans[2] / (q.bottom.endX - q.bottom.startX) <\n                            MAX_QUAD_RATIO &&\n                          scans[2] / (q.bottom.endX - q.bottom.startX) >\n                            MIN_QUAD_RATIO)\n                      );\n                    }\n                  );\n                  if (matchingQuads.length > 0) {\n                    matchingQuads[0].bottom = line;\n                  } else {\n                    activeAlignmentPatternQuads.push({\n                      top: line,\n                      bottom: line,\n                    });\n                  }\n                }\n              }\n            };\n            for (var x = -1; x <= matrix.width; x++) {\n              _loop_2(x);\n            }\n            finderPatternQuads.push.apply(\n              finderPatternQuads,\n              activeFinderPatternQuads.filter(function (q) {\n                return q.bottom.y !== y && q.bottom.y - q.top.y >= 2;\n              })\n            );\n            activeFinderPatternQuads = activeFinderPatternQuads.filter(\n              function (q) {\n                return q.bottom.y === y;\n              }\n            );\n            alignmentPatternQuads.push.apply(\n              alignmentPatternQuads,\n              activeAlignmentPatternQuads.filter(function (q) {\n                return q.bottom.y !== y;\n              })\n            );\n            activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(\n              function (q) {\n                return q.bottom.y === y;\n              }\n            );\n          };\n          for (var y = 0; y <= matrix.height; y++) {\n            _loop_1(y);\n          }\n          finderPatternQuads.push.apply(\n            finderPatternQuads,\n            activeFinderPatternQuads.filter(function (q) {\n              return q.bottom.y - q.top.y >= 2;\n            })\n          );\n          alignmentPatternQuads.push.apply(\n            alignmentPatternQuads,\n            activeAlignmentPatternQuads\n          );\n          var finderPatternGroups = finderPatternQuads\n            .filter(function (q) {\n              return q.bottom.y - q.top.y >= 2;\n            }) // All quads must be at least 2px tall since the center square is larger than a block\n            .map(function (q) {\n              var x =\n                (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) /\n                4;\n              var y = (q.top.y + q.bottom.y + 1) / 2;\n              if (!matrix.get(Math.round(x), Math.round(y))) {\n                return;\n              }\n              var lengths = [\n                q.top.endX - q.top.startX,\n                q.bottom.endX - q.bottom.startX,\n                q.bottom.y - q.top.y + 1,\n              ];\n              var size = sum(lengths) / lengths.length;\n              var score = scorePattern(\n                { x: Math.round(x), y: Math.round(y) },\n                [1, 1, 3, 1, 1],\n                matrix\n              );\n              return { score: score, x: x, y: y, size: size };\n            })\n            .filter(function (q) {\n              return !!q;\n            }) // Filter out any rejected quads from above\n            .sort(function (a, b) {\n              return a.score - b.score;\n            })\n            // Now take the top finder pattern options and try to find 2 other options with a similar size.\n            .map(function (point, i, finderPatterns) {\n              if (i > MAX_FINDERPATTERNS_TO_SEARCH) {\n                return null;\n              }\n              var otherPoints = finderPatterns\n                .filter(function (p, ii) {\n                  return i !== ii;\n                })\n                .map(function (p) {\n                  return {\n                    x: p.x,\n                    y: p.y,\n                    score:\n                      p.score + Math.pow(p.size - point.size, 2) / point.size,\n                    size: p.size,\n                  };\n                })\n                .sort(function (a, b) {\n                  return a.score - b.score;\n                });\n              if (otherPoints.length < 2) {\n                return null;\n              }\n              var score =\n                point.score + otherPoints[0].score + otherPoints[1].score;\n              return {\n                points: [point].concat(otherPoints.slice(0, 2)),\n                score: score,\n              };\n            })\n            .filter(function (q) {\n              return !!q;\n            }) // Filter out any rejected finder patterns from above\n            .sort(function (a, b) {\n              return a.score - b.score;\n            });\n          if (finderPatternGroups.length === 0) {\n            return null;\n          }\n          var _a = reorderFinderPatterns(\n              finderPatternGroups[0].points[0],\n              finderPatternGroups[0].points[1],\n              finderPatternGroups[0].points[2]\n            ),\n            topRight = _a.topRight,\n            topLeft = _a.topLeft,\n            bottomLeft = _a.bottomLeft;\n          var alignment = findAlignmentPattern(\n            matrix,\n            alignmentPatternQuads,\n            topRight,\n            topLeft,\n            bottomLeft\n          );\n          var result = [];\n          if (alignment) {\n            result.push({\n              alignmentPattern: {\n                x: alignment.alignmentPattern.x,\n                y: alignment.alignmentPattern.y,\n              },\n              bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },\n              dimension: alignment.dimension,\n              topLeft: { x: topLeft.x, y: topLeft.y },\n              topRight: { x: topRight.x, y: topRight.y },\n            });\n          }\n          // We normally use the center of the quads as the location of the tracking points, which is optimal for most cases and will account\n          // for a skew in the image. However, In some cases, a slight skew might not be real and instead be caused by image compression\n          // errors and/or low resolution. For those cases, we'd be better off centering the point exactly in the middle of the black area. We\n          // compute and return the location data for the naively centered points as it is little additional work and allows for multiple\n          // attempts at decoding harder images.\n          var midTopRight = recenterLocation(matrix, topRight);\n          var midTopLeft = recenterLocation(matrix, topLeft);\n          var midBottomLeft = recenterLocation(matrix, bottomLeft);\n          var centeredAlignment = findAlignmentPattern(\n            matrix,\n            alignmentPatternQuads,\n            midTopRight,\n            midTopLeft,\n            midBottomLeft\n          );\n          if (centeredAlignment) {\n            result.push({\n              alignmentPattern: {\n                x: centeredAlignment.alignmentPattern.x,\n                y: centeredAlignment.alignmentPattern.y,\n              },\n              bottomLeft: { x: midBottomLeft.x, y: midBottomLeft.y },\n              topLeft: { x: midTopLeft.x, y: midTopLeft.y },\n              topRight: { x: midTopRight.x, y: midTopRight.y },\n              dimension: centeredAlignment.dimension,\n            });\n          }\n          if (result.length === 0) {\n            return null;\n          }\n          return result;\n        }\n        exports.locate = locate;\n        function findAlignmentPattern(\n          matrix,\n          alignmentPatternQuads,\n          topRight,\n          topLeft,\n          bottomLeft\n        ) {\n          var _a;\n          // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.\n          // We'll use these to help find the alignment pattern but also later when we do the extraction.\n          var dimension;\n          var moduleSize;\n          try {\n            (_a = computeDimension(topLeft, topRight, bottomLeft, matrix)),\n              (dimension = _a.dimension),\n              (moduleSize = _a.moduleSize);\n          } catch (e) {\n            return null;\n          }\n          // Now find the alignment pattern\n          var bottomRightFinderPattern = {\n            x: topRight.x - topLeft.x + bottomLeft.x,\n            y: topRight.y - topLeft.y + bottomLeft.y,\n          };\n          var modulesBetweenFinderPatterns =\n            (distance(topLeft, bottomLeft) + distance(topLeft, topRight)) /\n            2 /\n            moduleSize;\n          var correctionToTopLeft = 1 - 3 / modulesBetweenFinderPatterns;\n          var expectedAlignmentPattern = {\n            x:\n              topLeft.x +\n              correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),\n            y:\n              topLeft.y +\n              correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),\n          };\n          var alignmentPatterns = alignmentPatternQuads\n            .map(function (q) {\n              var x =\n                (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) /\n                4;\n              var y = (q.top.y + q.bottom.y + 1) / 2;\n              if (!matrix.get(Math.floor(x), Math.floor(y))) {\n                return;\n              }\n              var lengths = [\n                q.top.endX - q.top.startX,\n                q.bottom.endX - q.bottom.startX,\n                q.bottom.y - q.top.y + 1,\n              ];\n              var size = sum(lengths) / lengths.length;\n              var sizeScore = scorePattern(\n                { x: Math.floor(x), y: Math.floor(y) },\n                [1, 1, 1],\n                matrix\n              );\n              var score =\n                sizeScore + distance({ x: x, y: y }, expectedAlignmentPattern);\n              return { x: x, y: y, score: score };\n            })\n            .filter(function (v) {\n              return !!v;\n            })\n            .sort(function (a, b) {\n              return a.score - b.score;\n            });\n          // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern\n          // so we can only use our best guess.\n          var alignmentPattern =\n            modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length\n              ? alignmentPatterns[0]\n              : expectedAlignmentPattern;\n          return { alignmentPattern: alignmentPattern, dimension: dimension };\n        }\n\n        /***/\n      },\n      /******/\n    ]\n  )[\"default\"];\n});\n"]}